
G_001.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU3.ustack  00000800  40014e00  40014e00  00000574  2**0
                  ALLOC
  1 .CPU3.istack  00000400  40015700  40015700  00000574  2**0
                  ALLOC
  2 .CPU3.csa     00002000  40015c00  40015c00  00000574  2**0
                  ALLOC
  3 .CPU2.ustack  00000800  50014e00  50014e00  00000574  2**0
                  ALLOC
  4 .CPU2.istack  00000400  50015700  50015700  00000574  2**0
                  ALLOC
  5 .CPU2.csa     00002000  50015c00  50015c00  00000574  2**0
                  ALLOC
  6 .CPU1.ustack  00000800  60038e00  60038e00  00000574  2**0
                  ALLOC
  7 .CPU1.istack  00000400  60039700  60039700  00000574  2**0
                  ALLOC
  8 .CPU1.csa     00002000  60039c00  60039c00  00000574  2**0
                  ALLOC
  9 .CPU0.ustack  00000800  70038e00  70038e00  00000574  2**0
                  ALLOC
 10 .CPU0.istack  00000400  70039700  70039700  00000574  2**0
                  ALLOC
 11 .CPU0.csa     00002000  70039c00  70039c00  00000574  2**0
                  ALLOC
 12 .start_tc0    0000000c  a0000000  a0000000  00005e06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .traptab_tc0  00000100  80000100  80000100  00000580  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 14 .traptab_tc1  00000100  80300000  80300000  00005520  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 15 .traptab_tc2  00000100  80600000  80600000  00005820  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 16 .traptab_tc3  00000100  80900000  80900000  00005b20  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 17 .start_tc1    0000000c  a0300100  a0300100  00005e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .start_tc2    0000000c  a0600100  a0600100  00005e1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .start_tc3    0000000c  a0900100  a0900100  00005e2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .inttab_tc0_000 00000000  802fe000  802fe000  00006dd8  2**0
                  CONTENTS
 21 .inttab_tc0_001 00000000  802fe020  802fe020  00006dd8  2**0
                  CONTENTS
 22 .inttab_tc0_002 0000000e  802fe040  802fe040  000054c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .inttab_tc0_003 0000000e  802fe060  802fe060  000054d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .inttab_tc0_004 0000000e  802fe080  802fe080  000054e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .inttab_tc0_005 0000000e  802fe0a0  802fe0a0  000054ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .inttab_tc0_006 0000000e  802fe0c0  802fe0c0  000054fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .inttab_tc0_007 0000000e  802fe0e0  802fe0e0  0000550a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .inttab_tc0_008 00000000  802fe100  802fe100  00006dd8  2**0
                  CONTENTS
 29 .inttab_tc0_009 00000000  802fe120  802fe120  00006dd8  2**0
                  CONTENTS
 30 .inttab_tc0_00A 00000000  802fe140  802fe140  00006dd8  2**0
                  CONTENTS
 31 .inttab_tc0_00B 00000000  802fe160  802fe160  00006dd8  2**0
                  CONTENTS
 32 .inttab_tc0_00C 00000000  802fe180  802fe180  00006dd8  2**0
                  CONTENTS
 33 .inttab_tc0_00D 00000000  802fe1a0  802fe1a0  00006dd8  2**0
                  CONTENTS
 34 .inttab_tc0_00E 00000000  802fe1c0  802fe1c0  00006dd8  2**0
                  CONTENTS
 35 .inttab_tc0_00F 00000000  802fe1e0  802fe1e0  00006dd8  2**0
                  CONTENTS
 36 .inttab_tc0_010 00000000  802fe200  802fe200  00006dd8  2**0
                  CONTENTS
 37 .inttab_tc0_011 00000000  802fe220  802fe220  00006dd8  2**0
                  CONTENTS
 38 .inttab_tc0_012 00000000  802fe240  802fe240  00006dd8  2**0
                  CONTENTS
 39 .inttab_tc0_013 00000000  802fe260  802fe260  00006dd8  2**0
                  CONTENTS
 40 .inttab_tc0_014 00000000  802fe280  802fe280  00006dd8  2**0
                  CONTENTS
 41 .inttab_tc0_015 00000000  802fe2a0  802fe2a0  00006dd8  2**0
                  CONTENTS
 42 .inttab_tc0_016 00000000  802fe2c0  802fe2c0  00006dd8  2**0
                  CONTENTS
 43 .inttab_tc0_017 00000000  802fe2e0  802fe2e0  00006dd8  2**0
                  CONTENTS
 44 .inttab_tc0_018 00000000  802fe300  802fe300  00006dd8  2**0
                  CONTENTS
 45 .inttab_tc0_019 00000000  802fe320  802fe320  00006dd8  2**0
                  CONTENTS
 46 .inttab_tc0_01A 00000000  802fe340  802fe340  00006dd8  2**0
                  CONTENTS
 47 .inttab_tc0_01B 00000000  802fe360  802fe360  00006dd8  2**0
                  CONTENTS
 48 .inttab_tc0_01C 00000000  802fe380  802fe380  00006dd8  2**0
                  CONTENTS
 49 .inttab_tc0_01D 00000000  802fe3a0  802fe3a0  00006dd8  2**0
                  CONTENTS
 50 .inttab_tc0_01E 00000000  802fe3c0  802fe3c0  00006dd8  2**0
                  CONTENTS
 51 .inttab_tc0_01F 00000000  802fe3e0  802fe3e0  00006dd8  2**0
                  CONTENTS
 52 .inttab_tc0_020 00000000  802fe400  802fe400  00006dd8  2**0
                  CONTENTS
 53 .inttab_tc0_021 00000000  802fe420  802fe420  00006dd8  2**0
                  CONTENTS
 54 .inttab_tc0_022 00000000  802fe440  802fe440  00006dd8  2**0
                  CONTENTS
 55 .inttab_tc0_023 00000000  802fe460  802fe460  00006dd8  2**0
                  CONTENTS
 56 .inttab_tc0_024 00000000  802fe480  802fe480  00006dd8  2**0
                  CONTENTS
 57 .inttab_tc0_025 00000000  802fe4a0  802fe4a0  00006dd8  2**0
                  CONTENTS
 58 .inttab_tc0_026 00000000  802fe4c0  802fe4c0  00006dd8  2**0
                  CONTENTS
 59 .inttab_tc0_027 00000000  802fe4e0  802fe4e0  00006dd8  2**0
                  CONTENTS
 60 .inttab_tc0_028 00000000  802fe500  802fe500  00006dd8  2**0
                  CONTENTS
 61 .inttab_tc0_029 00000000  802fe520  802fe520  00006dd8  2**0
                  CONTENTS
 62 .inttab_tc0_02A 00000000  802fe540  802fe540  00006dd8  2**0
                  CONTENTS
 63 .inttab_tc0_02B 00000000  802fe560  802fe560  00006dd8  2**0
                  CONTENTS
 64 .inttab_tc0_02C 00000000  802fe580  802fe580  00006dd8  2**0
                  CONTENTS
 65 .inttab_tc0_02D 00000000  802fe5a0  802fe5a0  00006dd8  2**0
                  CONTENTS
 66 .inttab_tc0_02E 00000000  802fe5c0  802fe5c0  00006dd8  2**0
                  CONTENTS
 67 .inttab_tc0_02F 00000000  802fe5e0  802fe5e0  00006dd8  2**0
                  CONTENTS
 68 .inttab_tc0_030 00000000  802fe600  802fe600  00006dd8  2**0
                  CONTENTS
 69 .inttab_tc0_031 00000000  802fe620  802fe620  00006dd8  2**0
                  CONTENTS
 70 .inttab_tc0_032 00000000  802fe640  802fe640  00006dd8  2**0
                  CONTENTS
 71 .inttab_tc0_033 00000000  802fe660  802fe660  00006dd8  2**0
                  CONTENTS
 72 .inttab_tc0_034 00000000  802fe680  802fe680  00006dd8  2**0
                  CONTENTS
 73 .inttab_tc0_035 00000000  802fe6a0  802fe6a0  00006dd8  2**0
                  CONTENTS
 74 .inttab_tc0_036 00000000  802fe6c0  802fe6c0  00006dd8  2**0
                  CONTENTS
 75 .inttab_tc0_037 00000000  802fe6e0  802fe6e0  00006dd8  2**0
                  CONTENTS
 76 .inttab_tc0_038 00000000  802fe700  802fe700  00006dd8  2**0
                  CONTENTS
 77 .inttab_tc0_039 00000000  802fe720  802fe720  00006dd8  2**0
                  CONTENTS
 78 .inttab_tc0_03A 00000000  802fe740  802fe740  00006dd8  2**0
                  CONTENTS
 79 .inttab_tc0_03B 00000000  802fe760  802fe760  00006dd8  2**0
                  CONTENTS
 80 .inttab_tc0_03C 00000000  802fe780  802fe780  00006dd8  2**0
                  CONTENTS
 81 .inttab_tc0_03D 00000000  802fe7a0  802fe7a0  00006dd8  2**0
                  CONTENTS
 82 .inttab_tc0_03E 00000000  802fe7c0  802fe7c0  00006dd8  2**0
                  CONTENTS
 83 .inttab_tc0_03F 00000000  802fe7e0  802fe7e0  00006dd8  2**0
                  CONTENTS
 84 .inttab_tc0_040 00000000  802fe800  802fe800  00006dd8  2**0
                  CONTENTS
 85 .inttab_tc0_041 00000000  802fe820  802fe820  00006dd8  2**0
                  CONTENTS
 86 .inttab_tc0_042 00000000  802fe840  802fe840  00006dd8  2**0
                  CONTENTS
 87 .inttab_tc0_043 00000000  802fe860  802fe860  00006dd8  2**0
                  CONTENTS
 88 .inttab_tc0_044 00000000  802fe880  802fe880  00006dd8  2**0
                  CONTENTS
 89 .inttab_tc0_045 00000000  802fe8a0  802fe8a0  00006dd8  2**0
                  CONTENTS
 90 .inttab_tc0_046 00000000  802fe8c0  802fe8c0  00006dd8  2**0
                  CONTENTS
 91 .inttab_tc0_047 00000000  802fe8e0  802fe8e0  00006dd8  2**0
                  CONTENTS
 92 .inttab_tc0_048 00000000  802fe900  802fe900  00006dd8  2**0
                  CONTENTS
 93 .inttab_tc0_049 00000000  802fe920  802fe920  00006dd8  2**0
                  CONTENTS
 94 .inttab_tc0_04A 00000000  802fe940  802fe940  00006dd8  2**0
                  CONTENTS
 95 .inttab_tc0_04B 00000000  802fe960  802fe960  00006dd8  2**0
                  CONTENTS
 96 .inttab_tc0_04C 00000000  802fe980  802fe980  00006dd8  2**0
                  CONTENTS
 97 .inttab_tc0_04D 00000000  802fe9a0  802fe9a0  00006dd8  2**0
                  CONTENTS
 98 .inttab_tc0_04E 00000000  802fe9c0  802fe9c0  00006dd8  2**0
                  CONTENTS
 99 .inttab_tc0_04F 00000000  802fe9e0  802fe9e0  00006dd8  2**0
                  CONTENTS
100 .inttab_tc0_050 00000000  802fea00  802fea00  00006dd8  2**0
                  CONTENTS
101 .inttab_tc0_051 00000000  802fea20  802fea20  00006dd8  2**0
                  CONTENTS
102 .inttab_tc0_052 00000000  802fea40  802fea40  00006dd8  2**0
                  CONTENTS
103 .inttab_tc0_053 00000000  802fea60  802fea60  00006dd8  2**0
                  CONTENTS
104 .inttab_tc0_054 00000000  802fea80  802fea80  00006dd8  2**0
                  CONTENTS
105 .inttab_tc0_055 00000000  802feaa0  802feaa0  00006dd8  2**0
                  CONTENTS
106 .inttab_tc0_056 00000000  802feac0  802feac0  00006dd8  2**0
                  CONTENTS
107 .inttab_tc0_057 00000000  802feae0  802feae0  00006dd8  2**0
                  CONTENTS
108 .inttab_tc0_058 00000000  802feb00  802feb00  00006dd8  2**0
                  CONTENTS
109 .inttab_tc0_059 00000000  802feb20  802feb20  00006dd8  2**0
                  CONTENTS
110 .inttab_tc0_05A 00000000  802feb40  802feb40  00006dd8  2**0
                  CONTENTS
111 .inttab_tc0_05B 00000000  802feb60  802feb60  00006dd8  2**0
                  CONTENTS
112 .inttab_tc0_05C 00000000  802feb80  802feb80  00006dd8  2**0
                  CONTENTS
113 .inttab_tc0_05D 00000000  802feba0  802feba0  00006dd8  2**0
                  CONTENTS
114 .inttab_tc0_05E 00000000  802febc0  802febc0  00006dd8  2**0
                  CONTENTS
115 .inttab_tc0_05F 00000000  802febe0  802febe0  00006dd8  2**0
                  CONTENTS
116 .inttab_tc0_060 00000000  802fec00  802fec00  00006dd8  2**0
                  CONTENTS
117 .inttab_tc0_061 00000000  802fec20  802fec20  00006dd8  2**0
                  CONTENTS
118 .inttab_tc0_062 00000000  802fec40  802fec40  00006dd8  2**0
                  CONTENTS
119 .inttab_tc0_063 00000000  802fec60  802fec60  00006dd8  2**0
                  CONTENTS
120 .inttab_tc0_064 00000000  802fec80  802fec80  00006dd8  2**0
                  CONTENTS
121 .inttab_tc0_065 00000000  802feca0  802feca0  00006dd8  2**0
                  CONTENTS
122 .inttab_tc0_066 00000000  802fecc0  802fecc0  00006dd8  2**0
                  CONTENTS
123 .inttab_tc0_067 00000000  802fece0  802fece0  00006dd8  2**0
                  CONTENTS
124 .inttab_tc0_068 00000000  802fed00  802fed00  00006dd8  2**0
                  CONTENTS
125 .inttab_tc0_069 00000000  802fed20  802fed20  00006dd8  2**0
                  CONTENTS
126 .inttab_tc0_06A 00000000  802fed40  802fed40  00006dd8  2**0
                  CONTENTS
127 .inttab_tc0_06B 00000000  802fed60  802fed60  00006dd8  2**0
                  CONTENTS
128 .inttab_tc0_06C 00000000  802fed80  802fed80  00006dd8  2**0
                  CONTENTS
129 .inttab_tc0_06D 00000000  802feda0  802feda0  00006dd8  2**0
                  CONTENTS
130 .inttab_tc0_06E 00000000  802fedc0  802fedc0  00006dd8  2**0
                  CONTENTS
131 .inttab_tc0_06F 00000000  802fede0  802fede0  00006dd8  2**0
                  CONTENTS
132 .inttab_tc0_070 00000000  802fee00  802fee00  00006dd8  2**0
                  CONTENTS
133 .inttab_tc0_071 00000000  802fee20  802fee20  00006dd8  2**0
                  CONTENTS
134 .inttab_tc0_072 00000000  802fee40  802fee40  00006dd8  2**0
                  CONTENTS
135 .inttab_tc0_073 00000000  802fee60  802fee60  00006dd8  2**0
                  CONTENTS
136 .inttab_tc0_074 00000000  802fee80  802fee80  00006dd8  2**0
                  CONTENTS
137 .inttab_tc0_075 00000000  802feea0  802feea0  00006dd8  2**0
                  CONTENTS
138 .inttab_tc0_076 00000000  802feec0  802feec0  00006dd8  2**0
                  CONTENTS
139 .inttab_tc0_077 00000000  802feee0  802feee0  00006dd8  2**0
                  CONTENTS
140 .inttab_tc0_078 00000000  802fef00  802fef00  00006dd8  2**0
                  CONTENTS
141 .inttab_tc0_079 00000000  802fef20  802fef20  00006dd8  2**0
                  CONTENTS
142 .inttab_tc0_07A 00000000  802fef40  802fef40  00006dd8  2**0
                  CONTENTS
143 .inttab_tc0_07B 00000000  802fef60  802fef60  00006dd8  2**0
                  CONTENTS
144 .inttab_tc0_07C 00000000  802fef80  802fef80  00006dd8  2**0
                  CONTENTS
145 .inttab_tc0_07D 00000000  802fefa0  802fefa0  00006dd8  2**0
                  CONTENTS
146 .inttab_tc0_07E 00000000  802fefc0  802fefc0  00006dd8  2**0
                  CONTENTS
147 .inttab_tc0_07F 00000000  802fefe0  802fefe0  00006dd8  2**0
                  CONTENTS
148 .inttab_tc0_080 00000000  802ff000  802ff000  00006dd8  2**0
                  CONTENTS
149 .inttab_tc0_081 00000000  802ff020  802ff020  00006dd8  2**0
                  CONTENTS
150 .inttab_tc0_082 00000000  802ff040  802ff040  00006dd8  2**0
                  CONTENTS
151 .inttab_tc0_083 00000000  802ff060  802ff060  00006dd8  2**0
                  CONTENTS
152 .inttab_tc0_084 00000000  802ff080  802ff080  00006dd8  2**0
                  CONTENTS
153 .inttab_tc0_085 00000000  802ff0a0  802ff0a0  00006dd8  2**0
                  CONTENTS
154 .inttab_tc0_086 00000000  802ff0c0  802ff0c0  00006dd8  2**0
                  CONTENTS
155 .inttab_tc0_087 00000000  802ff0e0  802ff0e0  00006dd8  2**0
                  CONTENTS
156 .inttab_tc0_088 00000000  802ff100  802ff100  00006dd8  2**0
                  CONTENTS
157 .inttab_tc0_089 00000000  802ff120  802ff120  00006dd8  2**0
                  CONTENTS
158 .inttab_tc0_08A 00000000  802ff140  802ff140  00006dd8  2**0
                  CONTENTS
159 .inttab_tc0_08B 00000000  802ff160  802ff160  00006dd8  2**0
                  CONTENTS
160 .inttab_tc0_08C 00000000  802ff180  802ff180  00006dd8  2**0
                  CONTENTS
161 .inttab_tc0_08D 00000000  802ff1a0  802ff1a0  00006dd8  2**0
                  CONTENTS
162 .inttab_tc0_08E 00000000  802ff1c0  802ff1c0  00006dd8  2**0
                  CONTENTS
163 .inttab_tc0_08F 00000000  802ff1e0  802ff1e0  00006dd8  2**0
                  CONTENTS
164 .inttab_tc0_090 00000000  802ff200  802ff200  00006dd8  2**0
                  CONTENTS
165 .inttab_tc0_091 00000000  802ff220  802ff220  00006dd8  2**0
                  CONTENTS
166 .inttab_tc0_092 00000000  802ff240  802ff240  00006dd8  2**0
                  CONTENTS
167 .inttab_tc0_093 00000000  802ff260  802ff260  00006dd8  2**0
                  CONTENTS
168 .inttab_tc0_094 00000000  802ff280  802ff280  00006dd8  2**0
                  CONTENTS
169 .inttab_tc0_095 00000000  802ff2a0  802ff2a0  00006dd8  2**0
                  CONTENTS
170 .inttab_tc0_096 00000000  802ff2c0  802ff2c0  00006dd8  2**0
                  CONTENTS
171 .inttab_tc0_097 00000000  802ff2e0  802ff2e0  00006dd8  2**0
                  CONTENTS
172 .inttab_tc0_098 00000000  802ff300  802ff300  00006dd8  2**0
                  CONTENTS
173 .inttab_tc0_099 00000000  802ff320  802ff320  00006dd8  2**0
                  CONTENTS
174 .inttab_tc0_09A 00000000  802ff340  802ff340  00006dd8  2**0
                  CONTENTS
175 .inttab_tc0_09B 00000000  802ff360  802ff360  00006dd8  2**0
                  CONTENTS
176 .inttab_tc0_09C 00000000  802ff380  802ff380  00006dd8  2**0
                  CONTENTS
177 .inttab_tc0_09D 00000000  802ff3a0  802ff3a0  00006dd8  2**0
                  CONTENTS
178 .inttab_tc0_09E 00000000  802ff3c0  802ff3c0  00006dd8  2**0
                  CONTENTS
179 .inttab_tc0_09F 00000000  802ff3e0  802ff3e0  00006dd8  2**0
                  CONTENTS
180 .inttab_tc0_0A0 00000000  802ff400  802ff400  00006dd8  2**0
                  CONTENTS
181 .inttab_tc0_0A1 00000000  802ff420  802ff420  00006dd8  2**0
                  CONTENTS
182 .inttab_tc0_0A2 00000000  802ff440  802ff440  00006dd8  2**0
                  CONTENTS
183 .inttab_tc0_0A3 00000000  802ff460  802ff460  00006dd8  2**0
                  CONTENTS
184 .inttab_tc0_0A4 00000000  802ff480  802ff480  00006dd8  2**0
                  CONTENTS
185 .inttab_tc0_0A5 00000000  802ff4a0  802ff4a0  00006dd8  2**0
                  CONTENTS
186 .inttab_tc0_0A6 00000000  802ff4c0  802ff4c0  00006dd8  2**0
                  CONTENTS
187 .inttab_tc0_0A7 00000000  802ff4e0  802ff4e0  00006dd8  2**0
                  CONTENTS
188 .inttab_tc0_0A8 00000000  802ff500  802ff500  00006dd8  2**0
                  CONTENTS
189 .inttab_tc0_0A9 00000000  802ff520  802ff520  00006dd8  2**0
                  CONTENTS
190 .inttab_tc0_0AA 00000000  802ff540  802ff540  00006dd8  2**0
                  CONTENTS
191 .inttab_tc0_0AB 00000000  802ff560  802ff560  00006dd8  2**0
                  CONTENTS
192 .inttab_tc0_0AC 00000000  802ff580  802ff580  00006dd8  2**0
                  CONTENTS
193 .inttab_tc0_0AD 00000000  802ff5a0  802ff5a0  00006dd8  2**0
                  CONTENTS
194 .inttab_tc0_0AE 00000000  802ff5c0  802ff5c0  00006dd8  2**0
                  CONTENTS
195 .inttab_tc0_0AF 00000000  802ff5e0  802ff5e0  00006dd8  2**0
                  CONTENTS
196 .inttab_tc0_0B0 00000000  802ff600  802ff600  00006dd8  2**0
                  CONTENTS
197 .inttab_tc0_0B1 00000000  802ff620  802ff620  00006dd8  2**0
                  CONTENTS
198 .inttab_tc0_0B2 00000000  802ff640  802ff640  00006dd8  2**0
                  CONTENTS
199 .inttab_tc0_0B3 00000000  802ff660  802ff660  00006dd8  2**0
                  CONTENTS
200 .inttab_tc0_0B4 00000000  802ff680  802ff680  00006dd8  2**0
                  CONTENTS
201 .inttab_tc0_0B5 00000000  802ff6a0  802ff6a0  00006dd8  2**0
                  CONTENTS
202 .inttab_tc0_0B6 00000000  802ff6c0  802ff6c0  00006dd8  2**0
                  CONTENTS
203 .inttab_tc0_0B7 00000000  802ff6e0  802ff6e0  00006dd8  2**0
                  CONTENTS
204 .inttab_tc0_0B8 00000000  802ff700  802ff700  00006dd8  2**0
                  CONTENTS
205 .inttab_tc0_0B9 00000000  802ff720  802ff720  00006dd8  2**0
                  CONTENTS
206 .inttab_tc0_0BA 00000000  802ff740  802ff740  00006dd8  2**0
                  CONTENTS
207 .inttab_tc0_0BB 00000000  802ff760  802ff760  00006dd8  2**0
                  CONTENTS
208 .inttab_tc0_0BC 00000000  802ff780  802ff780  00006dd8  2**0
                  CONTENTS
209 .inttab_tc0_0BD 00000000  802ff7a0  802ff7a0  00006dd8  2**0
                  CONTENTS
210 .inttab_tc0_0BE 00000000  802ff7c0  802ff7c0  00006dd8  2**0
                  CONTENTS
211 .inttab_tc0_0BF 00000000  802ff7e0  802ff7e0  00006dd8  2**0
                  CONTENTS
212 .inttab_tc0_0C0 00000000  802ff800  802ff800  00006dd8  2**0
                  CONTENTS
213 .inttab_tc0_0C1 00000000  802ff820  802ff820  00006dd8  2**0
                  CONTENTS
214 .inttab_tc0_0C2 00000000  802ff840  802ff840  00006dd8  2**0
                  CONTENTS
215 .inttab_tc0_0C3 00000000  802ff860  802ff860  00006dd8  2**0
                  CONTENTS
216 .inttab_tc0_0C4 00000000  802ff880  802ff880  00006dd8  2**0
                  CONTENTS
217 .inttab_tc0_0C5 00000000  802ff8a0  802ff8a0  00006dd8  2**0
                  CONTENTS
218 .inttab_tc0_0C6 00000000  802ff8c0  802ff8c0  00006dd8  2**0
                  CONTENTS
219 .inttab_tc0_0C7 00000000  802ff8e0  802ff8e0  00006dd8  2**0
                  CONTENTS
220 .inttab_tc0_0C8 00000000  802ff900  802ff900  00006dd8  2**0
                  CONTENTS
221 .inttab_tc0_0C9 00000000  802ff920  802ff920  00006dd8  2**0
                  CONTENTS
222 .inttab_tc0_0CA 00000000  802ff940  802ff940  00006dd8  2**0
                  CONTENTS
223 .inttab_tc0_0CB 00000000  802ff960  802ff960  00006dd8  2**0
                  CONTENTS
224 .inttab_tc0_0CC 00000000  802ff980  802ff980  00006dd8  2**0
                  CONTENTS
225 .inttab_tc0_0CD 00000000  802ff9a0  802ff9a0  00006dd8  2**0
                  CONTENTS
226 .inttab_tc0_0CE 00000000  802ff9c0  802ff9c0  00006dd8  2**0
                  CONTENTS
227 .inttab_tc0_0CF 00000000  802ff9e0  802ff9e0  00006dd8  2**0
                  CONTENTS
228 .inttab_tc0_0D0 00000000  802ffa00  802ffa00  00006dd8  2**0
                  CONTENTS
229 .inttab_tc0_0D1 00000000  802ffa20  802ffa20  00006dd8  2**0
                  CONTENTS
230 .inttab_tc0_0D2 00000000  802ffa40  802ffa40  00006dd8  2**0
                  CONTENTS
231 .inttab_tc0_0D3 00000000  802ffa60  802ffa60  00006dd8  2**0
                  CONTENTS
232 .inttab_tc0_0D4 00000000  802ffa80  802ffa80  00006dd8  2**0
                  CONTENTS
233 .inttab_tc0_0D5 00000000  802ffaa0  802ffaa0  00006dd8  2**0
                  CONTENTS
234 .inttab_tc0_0D6 00000000  802ffac0  802ffac0  00006dd8  2**0
                  CONTENTS
235 .inttab_tc0_0D7 00000000  802ffae0  802ffae0  00006dd8  2**0
                  CONTENTS
236 .inttab_tc0_0D8 00000000  802ffb00  802ffb00  00006dd8  2**0
                  CONTENTS
237 .inttab_tc0_0D9 00000000  802ffb20  802ffb20  00006dd8  2**0
                  CONTENTS
238 .inttab_tc0_0DA 00000000  802ffb40  802ffb40  00006dd8  2**0
                  CONTENTS
239 .inttab_tc0_0DB 00000000  802ffb60  802ffb60  00006dd8  2**0
                  CONTENTS
240 .inttab_tc0_0DC 00000000  802ffb80  802ffb80  00006dd8  2**0
                  CONTENTS
241 .inttab_tc0_0DD 00000000  802ffba0  802ffba0  00006dd8  2**0
                  CONTENTS
242 .inttab_tc0_0DE 00000000  802ffbc0  802ffbc0  00006dd8  2**0
                  CONTENTS
243 .inttab_tc0_0DF 00000000  802ffbe0  802ffbe0  00006dd8  2**0
                  CONTENTS
244 .inttab_tc0_0E0 00000000  802ffc00  802ffc00  00006dd8  2**0
                  CONTENTS
245 .inttab_tc0_0E1 00000000  802ffc20  802ffc20  00006dd8  2**0
                  CONTENTS
246 .inttab_tc0_0E2 00000000  802ffc40  802ffc40  00006dd8  2**0
                  CONTENTS
247 .inttab_tc0_0E3 00000000  802ffc60  802ffc60  00006dd8  2**0
                  CONTENTS
248 .inttab_tc0_0E4 00000000  802ffc80  802ffc80  00006dd8  2**0
                  CONTENTS
249 .inttab_tc0_0E5 00000000  802ffca0  802ffca0  00006dd8  2**0
                  CONTENTS
250 .inttab_tc0_0E6 00000000  802ffcc0  802ffcc0  00006dd8  2**0
                  CONTENTS
251 .inttab_tc0_0E7 00000000  802ffce0  802ffce0  00006dd8  2**0
                  CONTENTS
252 .inttab_tc0_0E8 00000000  802ffd00  802ffd00  00006dd8  2**0
                  CONTENTS
253 .inttab_tc0_0E9 00000000  802ffd20  802ffd20  00006dd8  2**0
                  CONTENTS
254 .inttab_tc0_0EA 00000000  802ffd40  802ffd40  00006dd8  2**0
                  CONTENTS
255 .inttab_tc0_0EB 00000000  802ffd60  802ffd60  00006dd8  2**0
                  CONTENTS
256 .inttab_tc0_0EC 00000000  802ffd80  802ffd80  00006dd8  2**0
                  CONTENTS
257 .inttab_tc0_0ED 00000000  802ffda0  802ffda0  00006dd8  2**0
                  CONTENTS
258 .inttab_tc0_0EE 00000000  802ffdc0  802ffdc0  00006dd8  2**0
                  CONTENTS
259 .inttab_tc0_0EF 00000000  802ffde0  802ffde0  00006dd8  2**0
                  CONTENTS
260 .inttab_tc0_0F0 00000000  802ffe00  802ffe00  00006dd8  2**0
                  CONTENTS
261 .inttab_tc0_0F1 00000000  802ffe20  802ffe20  00006dd8  2**0
                  CONTENTS
262 .inttab_tc0_0F2 00000000  802ffe40  802ffe40  00006dd8  2**0
                  CONTENTS
263 .inttab_tc0_0F3 00000000  802ffe60  802ffe60  00006dd8  2**0
                  CONTENTS
264 .inttab_tc0_0F4 00000000  802ffe80  802ffe80  00006dd8  2**0
                  CONTENTS
265 .inttab_tc0_0F5 00000000  802ffea0  802ffea0  00006dd8  2**0
                  CONTENTS
266 .inttab_tc0_0F6 00000000  802ffec0  802ffec0  00006dd8  2**0
                  CONTENTS
267 .inttab_tc0_0F7 00000000  802ffee0  802ffee0  00006dd8  2**0
                  CONTENTS
268 .inttab_tc0_0F8 00000000  802fff00  802fff00  00006dd8  2**0
                  CONTENTS
269 .inttab_tc0_0F9 00000000  802fff20  802fff20  00006dd8  2**0
                  CONTENTS
270 .inttab_tc0_0FA 00000000  802fff40  802fff40  00006dd8  2**0
                  CONTENTS
271 .inttab_tc0_0FB 00000000  802fff60  802fff60  00006dd8  2**0
                  CONTENTS
272 .inttab_tc0_0FC 00000000  802fff80  802fff80  00006dd8  2**0
                  CONTENTS
273 .inttab_tc0_0FD 00000000  802fffa0  802fffa0  00006dd8  2**0
                  CONTENTS
274 .inttab_tc0_0FE 00000000  802fffc0  802fffc0  00006dd8  2**0
                  CONTENTS
275 .inttab_tc0_0FF 00000000  802fffe0  802fffe0  00006dd8  2**0
                  CONTENTS
276 .inttab_tc1_000 00000000  805fe000  805fe000  00006dd8  2**0
                  CONTENTS
277 .inttab_tc1_001 00000000  805fe020  805fe020  00006dd8  2**0
                  CONTENTS
278 .inttab_tc1_002 00000000  805fe040  805fe040  00006dd8  2**0
                  CONTENTS
279 .inttab_tc1_003 00000000  805fe060  805fe060  00006dd8  2**0
                  CONTENTS
280 .inttab_tc1_004 00000000  805fe080  805fe080  00006dd8  2**0
                  CONTENTS
281 .inttab_tc1_005 00000000  805fe0a0  805fe0a0  00006dd8  2**0
                  CONTENTS
282 .inttab_tc1_006 00000000  805fe0c0  805fe0c0  00006dd8  2**0
                  CONTENTS
283 .inttab_tc1_007 00000000  805fe0e0  805fe0e0  00006dd8  2**0
                  CONTENTS
284 .inttab_tc1_008 00000000  805fe100  805fe100  00006dd8  2**0
                  CONTENTS
285 .inttab_tc1_009 00000000  805fe120  805fe120  00006dd8  2**0
                  CONTENTS
286 .inttab_tc1_00A 00000000  805fe140  805fe140  00006dd8  2**0
                  CONTENTS
287 .inttab_tc1_00B 00000000  805fe160  805fe160  00006dd8  2**0
                  CONTENTS
288 .inttab_tc1_00C 00000000  805fe180  805fe180  00006dd8  2**0
                  CONTENTS
289 .inttab_tc1_00D 00000000  805fe1a0  805fe1a0  00006dd8  2**0
                  CONTENTS
290 .inttab_tc1_00E 00000000  805fe1c0  805fe1c0  00006dd8  2**0
                  CONTENTS
291 .inttab_tc1_00F 00000000  805fe1e0  805fe1e0  00006dd8  2**0
                  CONTENTS
292 .inttab_tc1_010 00000000  805fe200  805fe200  00006dd8  2**0
                  CONTENTS
293 .inttab_tc1_011 00000000  805fe220  805fe220  00006dd8  2**0
                  CONTENTS
294 .inttab_tc1_012 00000000  805fe240  805fe240  00006dd8  2**0
                  CONTENTS
295 .inttab_tc1_013 00000000  805fe260  805fe260  00006dd8  2**0
                  CONTENTS
296 .inttab_tc1_014 00000000  805fe280  805fe280  00006dd8  2**0
                  CONTENTS
297 .inttab_tc1_015 00000000  805fe2a0  805fe2a0  00006dd8  2**0
                  CONTENTS
298 .inttab_tc1_016 00000000  805fe2c0  805fe2c0  00006dd8  2**0
                  CONTENTS
299 .inttab_tc1_017 00000000  805fe2e0  805fe2e0  00006dd8  2**0
                  CONTENTS
300 .inttab_tc1_018 00000000  805fe300  805fe300  00006dd8  2**0
                  CONTENTS
301 .inttab_tc1_019 00000000  805fe320  805fe320  00006dd8  2**0
                  CONTENTS
302 .inttab_tc1_01A 00000000  805fe340  805fe340  00006dd8  2**0
                  CONTENTS
303 .inttab_tc1_01B 00000000  805fe360  805fe360  00006dd8  2**0
                  CONTENTS
304 .inttab_tc1_01C 00000000  805fe380  805fe380  00006dd8  2**0
                  CONTENTS
305 .inttab_tc1_01D 00000000  805fe3a0  805fe3a0  00006dd8  2**0
                  CONTENTS
306 .inttab_tc1_01E 00000000  805fe3c0  805fe3c0  00006dd8  2**0
                  CONTENTS
307 .inttab_tc1_01F 00000000  805fe3e0  805fe3e0  00006dd8  2**0
                  CONTENTS
308 .inttab_tc1_020 00000000  805fe400  805fe400  00006dd8  2**0
                  CONTENTS
309 .inttab_tc1_021 00000000  805fe420  805fe420  00006dd8  2**0
                  CONTENTS
310 .inttab_tc1_022 00000000  805fe440  805fe440  00006dd8  2**0
                  CONTENTS
311 .inttab_tc1_023 00000000  805fe460  805fe460  00006dd8  2**0
                  CONTENTS
312 .inttab_tc1_024 00000000  805fe480  805fe480  00006dd8  2**0
                  CONTENTS
313 .inttab_tc1_025 00000000  805fe4a0  805fe4a0  00006dd8  2**0
                  CONTENTS
314 .inttab_tc1_026 00000000  805fe4c0  805fe4c0  00006dd8  2**0
                  CONTENTS
315 .inttab_tc1_027 00000000  805fe4e0  805fe4e0  00006dd8  2**0
                  CONTENTS
316 .inttab_tc1_028 00000000  805fe500  805fe500  00006dd8  2**0
                  CONTENTS
317 .inttab_tc1_029 00000000  805fe520  805fe520  00006dd8  2**0
                  CONTENTS
318 .inttab_tc1_02A 00000000  805fe540  805fe540  00006dd8  2**0
                  CONTENTS
319 .inttab_tc1_02B 00000000  805fe560  805fe560  00006dd8  2**0
                  CONTENTS
320 .inttab_tc1_02C 00000000  805fe580  805fe580  00006dd8  2**0
                  CONTENTS
321 .inttab_tc1_02D 00000000  805fe5a0  805fe5a0  00006dd8  2**0
                  CONTENTS
322 .inttab_tc1_02E 00000000  805fe5c0  805fe5c0  00006dd8  2**0
                  CONTENTS
323 .inttab_tc1_02F 00000000  805fe5e0  805fe5e0  00006dd8  2**0
                  CONTENTS
324 .inttab_tc1_030 00000000  805fe600  805fe600  00006dd8  2**0
                  CONTENTS
325 .inttab_tc1_031 00000000  805fe620  805fe620  00006dd8  2**0
                  CONTENTS
326 .inttab_tc1_032 00000000  805fe640  805fe640  00006dd8  2**0
                  CONTENTS
327 .inttab_tc1_033 00000000  805fe660  805fe660  00006dd8  2**0
                  CONTENTS
328 .inttab_tc1_034 00000000  805fe680  805fe680  00006dd8  2**0
                  CONTENTS
329 .inttab_tc1_035 00000000  805fe6a0  805fe6a0  00006dd8  2**0
                  CONTENTS
330 .inttab_tc1_036 00000000  805fe6c0  805fe6c0  00006dd8  2**0
                  CONTENTS
331 .inttab_tc1_037 00000000  805fe6e0  805fe6e0  00006dd8  2**0
                  CONTENTS
332 .inttab_tc1_038 00000000  805fe700  805fe700  00006dd8  2**0
                  CONTENTS
333 .inttab_tc1_039 00000000  805fe720  805fe720  00006dd8  2**0
                  CONTENTS
334 .inttab_tc1_03A 00000000  805fe740  805fe740  00006dd8  2**0
                  CONTENTS
335 .inttab_tc1_03B 00000000  805fe760  805fe760  00006dd8  2**0
                  CONTENTS
336 .inttab_tc1_03C 00000000  805fe780  805fe780  00006dd8  2**0
                  CONTENTS
337 .inttab_tc1_03D 00000000  805fe7a0  805fe7a0  00006dd8  2**0
                  CONTENTS
338 .inttab_tc1_03E 00000000  805fe7c0  805fe7c0  00006dd8  2**0
                  CONTENTS
339 .inttab_tc1_03F 00000000  805fe7e0  805fe7e0  00006dd8  2**0
                  CONTENTS
340 .inttab_tc1_040 00000000  805fe800  805fe800  00006dd8  2**0
                  CONTENTS
341 .inttab_tc1_041 00000000  805fe820  805fe820  00006dd8  2**0
                  CONTENTS
342 .inttab_tc1_042 00000000  805fe840  805fe840  00006dd8  2**0
                  CONTENTS
343 .inttab_tc1_043 00000000  805fe860  805fe860  00006dd8  2**0
                  CONTENTS
344 .inttab_tc1_044 00000000  805fe880  805fe880  00006dd8  2**0
                  CONTENTS
345 .inttab_tc1_045 00000000  805fe8a0  805fe8a0  00006dd8  2**0
                  CONTENTS
346 .inttab_tc1_046 00000000  805fe8c0  805fe8c0  00006dd8  2**0
                  CONTENTS
347 .inttab_tc1_047 00000000  805fe8e0  805fe8e0  00006dd8  2**0
                  CONTENTS
348 .inttab_tc1_048 00000000  805fe900  805fe900  00006dd8  2**0
                  CONTENTS
349 .inttab_tc1_049 00000000  805fe920  805fe920  00006dd8  2**0
                  CONTENTS
350 .inttab_tc1_04A 00000000  805fe940  805fe940  00006dd8  2**0
                  CONTENTS
351 .inttab_tc1_04B 00000000  805fe960  805fe960  00006dd8  2**0
                  CONTENTS
352 .inttab_tc1_04C 00000000  805fe980  805fe980  00006dd8  2**0
                  CONTENTS
353 .inttab_tc1_04D 00000000  805fe9a0  805fe9a0  00006dd8  2**0
                  CONTENTS
354 .inttab_tc1_04E 00000000  805fe9c0  805fe9c0  00006dd8  2**0
                  CONTENTS
355 .inttab_tc1_04F 00000000  805fe9e0  805fe9e0  00006dd8  2**0
                  CONTENTS
356 .inttab_tc1_050 00000000  805fea00  805fea00  00006dd8  2**0
                  CONTENTS
357 .inttab_tc1_051 00000000  805fea20  805fea20  00006dd8  2**0
                  CONTENTS
358 .inttab_tc1_052 00000000  805fea40  805fea40  00006dd8  2**0
                  CONTENTS
359 .inttab_tc1_053 00000000  805fea60  805fea60  00006dd8  2**0
                  CONTENTS
360 .inttab_tc1_054 00000000  805fea80  805fea80  00006dd8  2**0
                  CONTENTS
361 .inttab_tc1_055 00000000  805feaa0  805feaa0  00006dd8  2**0
                  CONTENTS
362 .inttab_tc1_056 00000000  805feac0  805feac0  00006dd8  2**0
                  CONTENTS
363 .inttab_tc1_057 00000000  805feae0  805feae0  00006dd8  2**0
                  CONTENTS
364 .inttab_tc1_058 00000000  805feb00  805feb00  00006dd8  2**0
                  CONTENTS
365 .inttab_tc1_059 00000000  805feb20  805feb20  00006dd8  2**0
                  CONTENTS
366 .inttab_tc1_05A 00000000  805feb40  805feb40  00006dd8  2**0
                  CONTENTS
367 .inttab_tc1_05B 00000000  805feb60  805feb60  00006dd8  2**0
                  CONTENTS
368 .inttab_tc1_05C 00000000  805feb80  805feb80  00006dd8  2**0
                  CONTENTS
369 .inttab_tc1_05D 00000000  805feba0  805feba0  00006dd8  2**0
                  CONTENTS
370 .inttab_tc1_05E 00000000  805febc0  805febc0  00006dd8  2**0
                  CONTENTS
371 .inttab_tc1_05F 00000000  805febe0  805febe0  00006dd8  2**0
                  CONTENTS
372 .inttab_tc1_060 00000000  805fec00  805fec00  00006dd8  2**0
                  CONTENTS
373 .inttab_tc1_061 00000000  805fec20  805fec20  00006dd8  2**0
                  CONTENTS
374 .inttab_tc1_062 00000000  805fec40  805fec40  00006dd8  2**0
                  CONTENTS
375 .inttab_tc1_063 00000000  805fec60  805fec60  00006dd8  2**0
                  CONTENTS
376 .inttab_tc1_064 00000000  805fec80  805fec80  00006dd8  2**0
                  CONTENTS
377 .inttab_tc1_065 00000000  805feca0  805feca0  00006dd8  2**0
                  CONTENTS
378 .inttab_tc1_066 00000000  805fecc0  805fecc0  00006dd8  2**0
                  CONTENTS
379 .inttab_tc1_067 00000000  805fece0  805fece0  00006dd8  2**0
                  CONTENTS
380 .inttab_tc1_068 00000000  805fed00  805fed00  00006dd8  2**0
                  CONTENTS
381 .inttab_tc1_069 00000000  805fed20  805fed20  00006dd8  2**0
                  CONTENTS
382 .inttab_tc1_06A 00000000  805fed40  805fed40  00006dd8  2**0
                  CONTENTS
383 .inttab_tc1_06B 00000000  805fed60  805fed60  00006dd8  2**0
                  CONTENTS
384 .inttab_tc1_06C 00000000  805fed80  805fed80  00006dd8  2**0
                  CONTENTS
385 .inttab_tc1_06D 00000000  805feda0  805feda0  00006dd8  2**0
                  CONTENTS
386 .inttab_tc1_06E 00000000  805fedc0  805fedc0  00006dd8  2**0
                  CONTENTS
387 .inttab_tc1_06F 00000000  805fede0  805fede0  00006dd8  2**0
                  CONTENTS
388 .inttab_tc1_070 00000000  805fee00  805fee00  00006dd8  2**0
                  CONTENTS
389 .inttab_tc1_071 00000000  805fee20  805fee20  00006dd8  2**0
                  CONTENTS
390 .inttab_tc1_072 00000000  805fee40  805fee40  00006dd8  2**0
                  CONTENTS
391 .inttab_tc1_073 00000000  805fee60  805fee60  00006dd8  2**0
                  CONTENTS
392 .inttab_tc1_074 00000000  805fee80  805fee80  00006dd8  2**0
                  CONTENTS
393 .inttab_tc1_075 00000000  805feea0  805feea0  00006dd8  2**0
                  CONTENTS
394 .inttab_tc1_076 00000000  805feec0  805feec0  00006dd8  2**0
                  CONTENTS
395 .inttab_tc1_077 00000000  805feee0  805feee0  00006dd8  2**0
                  CONTENTS
396 .inttab_tc1_078 00000000  805fef00  805fef00  00006dd8  2**0
                  CONTENTS
397 .inttab_tc1_079 00000000  805fef20  805fef20  00006dd8  2**0
                  CONTENTS
398 .inttab_tc1_07A 00000000  805fef40  805fef40  00006dd8  2**0
                  CONTENTS
399 .inttab_tc1_07B 00000000  805fef60  805fef60  00006dd8  2**0
                  CONTENTS
400 .inttab_tc1_07C 00000000  805fef80  805fef80  00006dd8  2**0
                  CONTENTS
401 .inttab_tc1_07D 00000000  805fefa0  805fefa0  00006dd8  2**0
                  CONTENTS
402 .inttab_tc1_07E 00000000  805fefc0  805fefc0  00006dd8  2**0
                  CONTENTS
403 .inttab_tc1_07F 00000000  805fefe0  805fefe0  00006dd8  2**0
                  CONTENTS
404 .inttab_tc1_080 00000000  805ff000  805ff000  00006dd8  2**0
                  CONTENTS
405 .inttab_tc1_081 00000000  805ff020  805ff020  00006dd8  2**0
                  CONTENTS
406 .inttab_tc1_082 00000000  805ff040  805ff040  00006dd8  2**0
                  CONTENTS
407 .inttab_tc1_083 00000000  805ff060  805ff060  00006dd8  2**0
                  CONTENTS
408 .inttab_tc1_084 00000000  805ff080  805ff080  00006dd8  2**0
                  CONTENTS
409 .inttab_tc1_085 00000000  805ff0a0  805ff0a0  00006dd8  2**0
                  CONTENTS
410 .inttab_tc1_086 00000000  805ff0c0  805ff0c0  00006dd8  2**0
                  CONTENTS
411 .inttab_tc1_087 00000000  805ff0e0  805ff0e0  00006dd8  2**0
                  CONTENTS
412 .inttab_tc1_088 00000000  805ff100  805ff100  00006dd8  2**0
                  CONTENTS
413 .inttab_tc1_089 00000000  805ff120  805ff120  00006dd8  2**0
                  CONTENTS
414 .inttab_tc1_08A 00000000  805ff140  805ff140  00006dd8  2**0
                  CONTENTS
415 .inttab_tc1_08B 00000000  805ff160  805ff160  00006dd8  2**0
                  CONTENTS
416 .inttab_tc1_08C 00000000  805ff180  805ff180  00006dd8  2**0
                  CONTENTS
417 .inttab_tc1_08D 00000000  805ff1a0  805ff1a0  00006dd8  2**0
                  CONTENTS
418 .inttab_tc1_08E 00000000  805ff1c0  805ff1c0  00006dd8  2**0
                  CONTENTS
419 .inttab_tc1_08F 00000000  805ff1e0  805ff1e0  00006dd8  2**0
                  CONTENTS
420 .inttab_tc1_090 00000000  805ff200  805ff200  00006dd8  2**0
                  CONTENTS
421 .inttab_tc1_091 00000000  805ff220  805ff220  00006dd8  2**0
                  CONTENTS
422 .inttab_tc1_092 00000000  805ff240  805ff240  00006dd8  2**0
                  CONTENTS
423 .inttab_tc1_093 00000000  805ff260  805ff260  00006dd8  2**0
                  CONTENTS
424 .inttab_tc1_094 00000000  805ff280  805ff280  00006dd8  2**0
                  CONTENTS
425 .inttab_tc1_095 00000000  805ff2a0  805ff2a0  00006dd8  2**0
                  CONTENTS
426 .inttab_tc1_096 00000000  805ff2c0  805ff2c0  00006dd8  2**0
                  CONTENTS
427 .inttab_tc1_097 00000000  805ff2e0  805ff2e0  00006dd8  2**0
                  CONTENTS
428 .inttab_tc1_098 00000000  805ff300  805ff300  00006dd8  2**0
                  CONTENTS
429 .inttab_tc1_099 00000000  805ff320  805ff320  00006dd8  2**0
                  CONTENTS
430 .inttab_tc1_09A 00000000  805ff340  805ff340  00006dd8  2**0
                  CONTENTS
431 .inttab_tc1_09B 00000000  805ff360  805ff360  00006dd8  2**0
                  CONTENTS
432 .inttab_tc1_09C 00000000  805ff380  805ff380  00006dd8  2**0
                  CONTENTS
433 .inttab_tc1_09D 00000000  805ff3a0  805ff3a0  00006dd8  2**0
                  CONTENTS
434 .inttab_tc1_09E 00000000  805ff3c0  805ff3c0  00006dd8  2**0
                  CONTENTS
435 .inttab_tc1_09F 00000000  805ff3e0  805ff3e0  00006dd8  2**0
                  CONTENTS
436 .inttab_tc1_0A0 00000000  805ff400  805ff400  00006dd8  2**0
                  CONTENTS
437 .inttab_tc1_0A1 00000000  805ff420  805ff420  00006dd8  2**0
                  CONTENTS
438 .inttab_tc1_0A2 00000000  805ff440  805ff440  00006dd8  2**0
                  CONTENTS
439 .inttab_tc1_0A3 00000000  805ff460  805ff460  00006dd8  2**0
                  CONTENTS
440 .inttab_tc1_0A4 00000000  805ff480  805ff480  00006dd8  2**0
                  CONTENTS
441 .inttab_tc1_0A5 00000000  805ff4a0  805ff4a0  00006dd8  2**0
                  CONTENTS
442 .inttab_tc1_0A6 00000000  805ff4c0  805ff4c0  00006dd8  2**0
                  CONTENTS
443 .inttab_tc1_0A7 00000000  805ff4e0  805ff4e0  00006dd8  2**0
                  CONTENTS
444 .inttab_tc1_0A8 00000000  805ff500  805ff500  00006dd8  2**0
                  CONTENTS
445 .inttab_tc1_0A9 00000000  805ff520  805ff520  00006dd8  2**0
                  CONTENTS
446 .inttab_tc1_0AA 00000000  805ff540  805ff540  00006dd8  2**0
                  CONTENTS
447 .inttab_tc1_0AB 00000000  805ff560  805ff560  00006dd8  2**0
                  CONTENTS
448 .inttab_tc1_0AC 00000000  805ff580  805ff580  00006dd8  2**0
                  CONTENTS
449 .inttab_tc1_0AD 00000000  805ff5a0  805ff5a0  00006dd8  2**0
                  CONTENTS
450 .inttab_tc1_0AE 00000000  805ff5c0  805ff5c0  00006dd8  2**0
                  CONTENTS
451 .inttab_tc1_0AF 00000000  805ff5e0  805ff5e0  00006dd8  2**0
                  CONTENTS
452 .inttab_tc1_0B0 00000000  805ff600  805ff600  00006dd8  2**0
                  CONTENTS
453 .inttab_tc1_0B1 00000000  805ff620  805ff620  00006dd8  2**0
                  CONTENTS
454 .inttab_tc1_0B2 00000000  805ff640  805ff640  00006dd8  2**0
                  CONTENTS
455 .inttab_tc1_0B3 00000000  805ff660  805ff660  00006dd8  2**0
                  CONTENTS
456 .inttab_tc1_0B4 00000000  805ff680  805ff680  00006dd8  2**0
                  CONTENTS
457 .inttab_tc1_0B5 00000000  805ff6a0  805ff6a0  00006dd8  2**0
                  CONTENTS
458 .inttab_tc1_0B6 00000000  805ff6c0  805ff6c0  00006dd8  2**0
                  CONTENTS
459 .inttab_tc1_0B7 00000000  805ff6e0  805ff6e0  00006dd8  2**0
                  CONTENTS
460 .inttab_tc1_0B8 00000000  805ff700  805ff700  00006dd8  2**0
                  CONTENTS
461 .inttab_tc1_0B9 00000000  805ff720  805ff720  00006dd8  2**0
                  CONTENTS
462 .inttab_tc1_0BA 00000000  805ff740  805ff740  00006dd8  2**0
                  CONTENTS
463 .inttab_tc1_0BB 00000000  805ff760  805ff760  00006dd8  2**0
                  CONTENTS
464 .inttab_tc1_0BC 00000000  805ff780  805ff780  00006dd8  2**0
                  CONTENTS
465 .inttab_tc1_0BD 00000000  805ff7a0  805ff7a0  00006dd8  2**0
                  CONTENTS
466 .inttab_tc1_0BE 00000000  805ff7c0  805ff7c0  00006dd8  2**0
                  CONTENTS
467 .inttab_tc1_0BF 00000000  805ff7e0  805ff7e0  00006dd8  2**0
                  CONTENTS
468 .inttab_tc1_0C0 00000000  805ff800  805ff800  00006dd8  2**0
                  CONTENTS
469 .inttab_tc1_0C1 00000000  805ff820  805ff820  00006dd8  2**0
                  CONTENTS
470 .inttab_tc1_0C2 00000000  805ff840  805ff840  00006dd8  2**0
                  CONTENTS
471 .inttab_tc1_0C3 00000000  805ff860  805ff860  00006dd8  2**0
                  CONTENTS
472 .inttab_tc1_0C4 00000000  805ff880  805ff880  00006dd8  2**0
                  CONTENTS
473 .inttab_tc1_0C5 00000000  805ff8a0  805ff8a0  00006dd8  2**0
                  CONTENTS
474 .inttab_tc1_0C6 00000000  805ff8c0  805ff8c0  00006dd8  2**0
                  CONTENTS
475 .inttab_tc1_0C7 00000000  805ff8e0  805ff8e0  00006dd8  2**0
                  CONTENTS
476 .inttab_tc1_0C8 00000000  805ff900  805ff900  00006dd8  2**0
                  CONTENTS
477 .inttab_tc1_0C9 00000000  805ff920  805ff920  00006dd8  2**0
                  CONTENTS
478 .inttab_tc1_0CA 00000000  805ff940  805ff940  00006dd8  2**0
                  CONTENTS
479 .inttab_tc1_0CB 00000000  805ff960  805ff960  00006dd8  2**0
                  CONTENTS
480 .inttab_tc1_0CC 00000000  805ff980  805ff980  00006dd8  2**0
                  CONTENTS
481 .inttab_tc1_0CD 00000000  805ff9a0  805ff9a0  00006dd8  2**0
                  CONTENTS
482 .inttab_tc1_0CE 00000000  805ff9c0  805ff9c0  00006dd8  2**0
                  CONTENTS
483 .inttab_tc1_0CF 00000000  805ff9e0  805ff9e0  00006dd8  2**0
                  CONTENTS
484 .inttab_tc1_0D0 00000000  805ffa00  805ffa00  00006dd8  2**0
                  CONTENTS
485 .inttab_tc1_0D1 00000000  805ffa20  805ffa20  00006dd8  2**0
                  CONTENTS
486 .inttab_tc1_0D2 00000000  805ffa40  805ffa40  00006dd8  2**0
                  CONTENTS
487 .inttab_tc1_0D3 00000000  805ffa60  805ffa60  00006dd8  2**0
                  CONTENTS
488 .inttab_tc1_0D4 00000000  805ffa80  805ffa80  00006dd8  2**0
                  CONTENTS
489 .inttab_tc1_0D5 00000000  805ffaa0  805ffaa0  00006dd8  2**0
                  CONTENTS
490 .inttab_tc1_0D6 00000000  805ffac0  805ffac0  00006dd8  2**0
                  CONTENTS
491 .inttab_tc1_0D7 00000000  805ffae0  805ffae0  00006dd8  2**0
                  CONTENTS
492 .inttab_tc1_0D8 00000000  805ffb00  805ffb00  00006dd8  2**0
                  CONTENTS
493 .inttab_tc1_0D9 00000000  805ffb20  805ffb20  00006dd8  2**0
                  CONTENTS
494 .inttab_tc1_0DA 00000000  805ffb40  805ffb40  00006dd8  2**0
                  CONTENTS
495 .inttab_tc1_0DB 00000000  805ffb60  805ffb60  00006dd8  2**0
                  CONTENTS
496 .inttab_tc1_0DC 00000000  805ffb80  805ffb80  00006dd8  2**0
                  CONTENTS
497 .inttab_tc1_0DD 00000000  805ffba0  805ffba0  00006dd8  2**0
                  CONTENTS
498 .inttab_tc1_0DE 00000000  805ffbc0  805ffbc0  00006dd8  2**0
                  CONTENTS
499 .inttab_tc1_0DF 00000000  805ffbe0  805ffbe0  00006dd8  2**0
                  CONTENTS
500 .inttab_tc1_0E0 00000000  805ffc00  805ffc00  00006dd8  2**0
                  CONTENTS
501 .inttab_tc1_0E1 00000000  805ffc20  805ffc20  00006dd8  2**0
                  CONTENTS
502 .inttab_tc1_0E2 00000000  805ffc40  805ffc40  00006dd8  2**0
                  CONTENTS
503 .inttab_tc1_0E3 00000000  805ffc60  805ffc60  00006dd8  2**0
                  CONTENTS
504 .inttab_tc1_0E4 00000000  805ffc80  805ffc80  00006dd8  2**0
                  CONTENTS
505 .inttab_tc1_0E5 00000000  805ffca0  805ffca0  00006dd8  2**0
                  CONTENTS
506 .inttab_tc1_0E6 00000000  805ffcc0  805ffcc0  00006dd8  2**0
                  CONTENTS
507 .inttab_tc1_0E7 00000000  805ffce0  805ffce0  00006dd8  2**0
                  CONTENTS
508 .inttab_tc1_0E8 00000000  805ffd00  805ffd00  00006dd8  2**0
                  CONTENTS
509 .inttab_tc1_0E9 00000000  805ffd20  805ffd20  00006dd8  2**0
                  CONTENTS
510 .inttab_tc1_0EA 00000000  805ffd40  805ffd40  00006dd8  2**0
                  CONTENTS
511 .inttab_tc1_0EB 00000000  805ffd60  805ffd60  00006dd8  2**0
                  CONTENTS
512 .inttab_tc1_0EC 00000000  805ffd80  805ffd80  00006dd8  2**0
                  CONTENTS
513 .inttab_tc1_0ED 00000000  805ffda0  805ffda0  00006dd8  2**0
                  CONTENTS
514 .inttab_tc1_0EE 00000000  805ffdc0  805ffdc0  00006dd8  2**0
                  CONTENTS
515 .inttab_tc1_0EF 00000000  805ffde0  805ffde0  00006dd8  2**0
                  CONTENTS
516 .inttab_tc1_0F0 00000000  805ffe00  805ffe00  00006dd8  2**0
                  CONTENTS
517 .inttab_tc1_0F1 00000000  805ffe20  805ffe20  00006dd8  2**0
                  CONTENTS
518 .inttab_tc1_0F2 00000000  805ffe40  805ffe40  00006dd8  2**0
                  CONTENTS
519 .inttab_tc1_0F3 00000000  805ffe60  805ffe60  00006dd8  2**0
                  CONTENTS
520 .inttab_tc1_0F4 00000000  805ffe80  805ffe80  00006dd8  2**0
                  CONTENTS
521 .inttab_tc1_0F5 00000000  805ffea0  805ffea0  00006dd8  2**0
                  CONTENTS
522 .inttab_tc1_0F6 00000000  805ffec0  805ffec0  00006dd8  2**0
                  CONTENTS
523 .inttab_tc1_0F7 00000000  805ffee0  805ffee0  00006dd8  2**0
                  CONTENTS
524 .inttab_tc1_0F8 00000000  805fff00  805fff00  00006dd8  2**0
                  CONTENTS
525 .inttab_tc1_0F9 00000000  805fff20  805fff20  00006dd8  2**0
                  CONTENTS
526 .inttab_tc1_0FA 00000000  805fff40  805fff40  00006dd8  2**0
                  CONTENTS
527 .inttab_tc1_0FB 00000000  805fff60  805fff60  00006dd8  2**0
                  CONTENTS
528 .inttab_tc1_0FC 00000000  805fff80  805fff80  00006dd8  2**0
                  CONTENTS
529 .inttab_tc1_0FD 00000000  805fffa0  805fffa0  00006dd8  2**0
                  CONTENTS
530 .inttab_tc1_0FE 00000000  805fffc0  805fffc0  00006dd8  2**0
                  CONTENTS
531 .inttab_tc1_0FF 00000000  805fffe0  805fffe0  00006dd8  2**0
                  CONTENTS
532 .inttab_tc2_000 00000000  808fe000  808fe000  00006dd8  2**0
                  CONTENTS
533 .inttab_tc2_001 00000000  808fe020  808fe020  00006dd8  2**0
                  CONTENTS
534 .inttab_tc2_002 00000000  808fe040  808fe040  00006dd8  2**0
                  CONTENTS
535 .inttab_tc2_003 00000000  808fe060  808fe060  00006dd8  2**0
                  CONTENTS
536 .inttab_tc2_004 00000000  808fe080  808fe080  00006dd8  2**0
                  CONTENTS
537 .inttab_tc2_005 00000000  808fe0a0  808fe0a0  00006dd8  2**0
                  CONTENTS
538 .inttab_tc2_006 00000000  808fe0c0  808fe0c0  00006dd8  2**0
                  CONTENTS
539 .inttab_tc2_007 00000000  808fe0e0  808fe0e0  00006dd8  2**0
                  CONTENTS
540 .inttab_tc2_008 00000000  808fe100  808fe100  00006dd8  2**0
                  CONTENTS
541 .inttab_tc2_009 00000000  808fe120  808fe120  00006dd8  2**0
                  CONTENTS
542 .inttab_tc2_00A 00000000  808fe140  808fe140  00006dd8  2**0
                  CONTENTS
543 .inttab_tc2_00B 00000000  808fe160  808fe160  00006dd8  2**0
                  CONTENTS
544 .inttab_tc2_00C 00000000  808fe180  808fe180  00006dd8  2**0
                  CONTENTS
545 .inttab_tc2_00D 00000000  808fe1a0  808fe1a0  00006dd8  2**0
                  CONTENTS
546 .inttab_tc2_00E 00000000  808fe1c0  808fe1c0  00006dd8  2**0
                  CONTENTS
547 .inttab_tc2_00F 00000000  808fe1e0  808fe1e0  00006dd8  2**0
                  CONTENTS
548 .inttab_tc2_010 00000000  808fe200  808fe200  00006dd8  2**0
                  CONTENTS
549 .inttab_tc2_011 00000000  808fe220  808fe220  00006dd8  2**0
                  CONTENTS
550 .inttab_tc2_012 00000000  808fe240  808fe240  00006dd8  2**0
                  CONTENTS
551 .inttab_tc2_013 00000000  808fe260  808fe260  00006dd8  2**0
                  CONTENTS
552 .inttab_tc2_014 00000000  808fe280  808fe280  00006dd8  2**0
                  CONTENTS
553 .inttab_tc2_015 00000000  808fe2a0  808fe2a0  00006dd8  2**0
                  CONTENTS
554 .inttab_tc2_016 00000000  808fe2c0  808fe2c0  00006dd8  2**0
                  CONTENTS
555 .inttab_tc2_017 00000000  808fe2e0  808fe2e0  00006dd8  2**0
                  CONTENTS
556 .inttab_tc2_018 00000000  808fe300  808fe300  00006dd8  2**0
                  CONTENTS
557 .inttab_tc2_019 00000000  808fe320  808fe320  00006dd8  2**0
                  CONTENTS
558 .inttab_tc2_01A 00000000  808fe340  808fe340  00006dd8  2**0
                  CONTENTS
559 .inttab_tc2_01B 00000000  808fe360  808fe360  00006dd8  2**0
                  CONTENTS
560 .inttab_tc2_01C 00000000  808fe380  808fe380  00006dd8  2**0
                  CONTENTS
561 .inttab_tc2_01D 00000000  808fe3a0  808fe3a0  00006dd8  2**0
                  CONTENTS
562 .inttab_tc2_01E 00000000  808fe3c0  808fe3c0  00006dd8  2**0
                  CONTENTS
563 .inttab_tc2_01F 00000000  808fe3e0  808fe3e0  00006dd8  2**0
                  CONTENTS
564 .inttab_tc2_020 00000000  808fe400  808fe400  00006dd8  2**0
                  CONTENTS
565 .inttab_tc2_021 00000000  808fe420  808fe420  00006dd8  2**0
                  CONTENTS
566 .inttab_tc2_022 00000000  808fe440  808fe440  00006dd8  2**0
                  CONTENTS
567 .inttab_tc2_023 00000000  808fe460  808fe460  00006dd8  2**0
                  CONTENTS
568 .inttab_tc2_024 00000000  808fe480  808fe480  00006dd8  2**0
                  CONTENTS
569 .inttab_tc2_025 00000000  808fe4a0  808fe4a0  00006dd8  2**0
                  CONTENTS
570 .inttab_tc2_026 00000000  808fe4c0  808fe4c0  00006dd8  2**0
                  CONTENTS
571 .inttab_tc2_027 00000000  808fe4e0  808fe4e0  00006dd8  2**0
                  CONTENTS
572 .inttab_tc2_028 00000000  808fe500  808fe500  00006dd8  2**0
                  CONTENTS
573 .inttab_tc2_029 00000000  808fe520  808fe520  00006dd8  2**0
                  CONTENTS
574 .inttab_tc2_02A 00000000  808fe540  808fe540  00006dd8  2**0
                  CONTENTS
575 .inttab_tc2_02B 00000000  808fe560  808fe560  00006dd8  2**0
                  CONTENTS
576 .inttab_tc2_02C 00000000  808fe580  808fe580  00006dd8  2**0
                  CONTENTS
577 .inttab_tc2_02D 00000000  808fe5a0  808fe5a0  00006dd8  2**0
                  CONTENTS
578 .inttab_tc2_02E 00000000  808fe5c0  808fe5c0  00006dd8  2**0
                  CONTENTS
579 .inttab_tc2_02F 00000000  808fe5e0  808fe5e0  00006dd8  2**0
                  CONTENTS
580 .inttab_tc2_030 00000000  808fe600  808fe600  00006dd8  2**0
                  CONTENTS
581 .inttab_tc2_031 00000000  808fe620  808fe620  00006dd8  2**0
                  CONTENTS
582 .inttab_tc2_032 00000000  808fe640  808fe640  00006dd8  2**0
                  CONTENTS
583 .inttab_tc2_033 00000000  808fe660  808fe660  00006dd8  2**0
                  CONTENTS
584 .inttab_tc2_034 00000000  808fe680  808fe680  00006dd8  2**0
                  CONTENTS
585 .inttab_tc2_035 00000000  808fe6a0  808fe6a0  00006dd8  2**0
                  CONTENTS
586 .inttab_tc2_036 00000000  808fe6c0  808fe6c0  00006dd8  2**0
                  CONTENTS
587 .inttab_tc2_037 00000000  808fe6e0  808fe6e0  00006dd8  2**0
                  CONTENTS
588 .inttab_tc2_038 00000000  808fe700  808fe700  00006dd8  2**0
                  CONTENTS
589 .inttab_tc2_039 00000000  808fe720  808fe720  00006dd8  2**0
                  CONTENTS
590 .inttab_tc2_03A 00000000  808fe740  808fe740  00006dd8  2**0
                  CONTENTS
591 .inttab_tc2_03B 00000000  808fe760  808fe760  00006dd8  2**0
                  CONTENTS
592 .inttab_tc2_03C 00000000  808fe780  808fe780  00006dd8  2**0
                  CONTENTS
593 .inttab_tc2_03D 00000000  808fe7a0  808fe7a0  00006dd8  2**0
                  CONTENTS
594 .inttab_tc2_03E 00000000  808fe7c0  808fe7c0  00006dd8  2**0
                  CONTENTS
595 .inttab_tc2_03F 00000000  808fe7e0  808fe7e0  00006dd8  2**0
                  CONTENTS
596 .inttab_tc2_040 00000000  808fe800  808fe800  00006dd8  2**0
                  CONTENTS
597 .inttab_tc2_041 00000000  808fe820  808fe820  00006dd8  2**0
                  CONTENTS
598 .inttab_tc2_042 00000000  808fe840  808fe840  00006dd8  2**0
                  CONTENTS
599 .inttab_tc2_043 00000000  808fe860  808fe860  00006dd8  2**0
                  CONTENTS
600 .inttab_tc2_044 00000000  808fe880  808fe880  00006dd8  2**0
                  CONTENTS
601 .inttab_tc2_045 00000000  808fe8a0  808fe8a0  00006dd8  2**0
                  CONTENTS
602 .inttab_tc2_046 00000000  808fe8c0  808fe8c0  00006dd8  2**0
                  CONTENTS
603 .inttab_tc2_047 00000000  808fe8e0  808fe8e0  00006dd8  2**0
                  CONTENTS
604 .inttab_tc2_048 00000000  808fe900  808fe900  00006dd8  2**0
                  CONTENTS
605 .inttab_tc2_049 00000000  808fe920  808fe920  00006dd8  2**0
                  CONTENTS
606 .inttab_tc2_04A 00000000  808fe940  808fe940  00006dd8  2**0
                  CONTENTS
607 .inttab_tc2_04B 00000000  808fe960  808fe960  00006dd8  2**0
                  CONTENTS
608 .inttab_tc2_04C 00000000  808fe980  808fe980  00006dd8  2**0
                  CONTENTS
609 .inttab_tc2_04D 00000000  808fe9a0  808fe9a0  00006dd8  2**0
                  CONTENTS
610 .inttab_tc2_04E 00000000  808fe9c0  808fe9c0  00006dd8  2**0
                  CONTENTS
611 .inttab_tc2_04F 00000000  808fe9e0  808fe9e0  00006dd8  2**0
                  CONTENTS
612 .inttab_tc2_050 00000000  808fea00  808fea00  00006dd8  2**0
                  CONTENTS
613 .inttab_tc2_051 00000000  808fea20  808fea20  00006dd8  2**0
                  CONTENTS
614 .inttab_tc2_052 00000000  808fea40  808fea40  00006dd8  2**0
                  CONTENTS
615 .inttab_tc2_053 00000000  808fea60  808fea60  00006dd8  2**0
                  CONTENTS
616 .inttab_tc2_054 00000000  808fea80  808fea80  00006dd8  2**0
                  CONTENTS
617 .inttab_tc2_055 00000000  808feaa0  808feaa0  00006dd8  2**0
                  CONTENTS
618 .inttab_tc2_056 00000000  808feac0  808feac0  00006dd8  2**0
                  CONTENTS
619 .inttab_tc2_057 00000000  808feae0  808feae0  00006dd8  2**0
                  CONTENTS
620 .inttab_tc2_058 00000000  808feb00  808feb00  00006dd8  2**0
                  CONTENTS
621 .inttab_tc2_059 00000000  808feb20  808feb20  00006dd8  2**0
                  CONTENTS
622 .inttab_tc2_05A 00000000  808feb40  808feb40  00006dd8  2**0
                  CONTENTS
623 .inttab_tc2_05B 00000000  808feb60  808feb60  00006dd8  2**0
                  CONTENTS
624 .inttab_tc2_05C 00000000  808feb80  808feb80  00006dd8  2**0
                  CONTENTS
625 .inttab_tc2_05D 00000000  808feba0  808feba0  00006dd8  2**0
                  CONTENTS
626 .inttab_tc2_05E 00000000  808febc0  808febc0  00006dd8  2**0
                  CONTENTS
627 .inttab_tc2_05F 00000000  808febe0  808febe0  00006dd8  2**0
                  CONTENTS
628 .inttab_tc2_060 00000000  808fec00  808fec00  00006dd8  2**0
                  CONTENTS
629 .inttab_tc2_061 00000000  808fec20  808fec20  00006dd8  2**0
                  CONTENTS
630 .inttab_tc2_062 00000000  808fec40  808fec40  00006dd8  2**0
                  CONTENTS
631 .inttab_tc2_063 00000000  808fec60  808fec60  00006dd8  2**0
                  CONTENTS
632 .inttab_tc2_064 00000000  808fec80  808fec80  00006dd8  2**0
                  CONTENTS
633 .inttab_tc2_065 00000000  808feca0  808feca0  00006dd8  2**0
                  CONTENTS
634 .inttab_tc2_066 00000000  808fecc0  808fecc0  00006dd8  2**0
                  CONTENTS
635 .inttab_tc2_067 00000000  808fece0  808fece0  00006dd8  2**0
                  CONTENTS
636 .inttab_tc2_068 00000000  808fed00  808fed00  00006dd8  2**0
                  CONTENTS
637 .inttab_tc2_069 00000000  808fed20  808fed20  00006dd8  2**0
                  CONTENTS
638 .inttab_tc2_06A 00000000  808fed40  808fed40  00006dd8  2**0
                  CONTENTS
639 .inttab_tc2_06B 00000000  808fed60  808fed60  00006dd8  2**0
                  CONTENTS
640 .inttab_tc2_06C 00000000  808fed80  808fed80  00006dd8  2**0
                  CONTENTS
641 .inttab_tc2_06D 00000000  808feda0  808feda0  00006dd8  2**0
                  CONTENTS
642 .inttab_tc2_06E 00000000  808fedc0  808fedc0  00006dd8  2**0
                  CONTENTS
643 .inttab_tc2_06F 00000000  808fede0  808fede0  00006dd8  2**0
                  CONTENTS
644 .inttab_tc2_070 00000000  808fee00  808fee00  00006dd8  2**0
                  CONTENTS
645 .inttab_tc2_071 00000000  808fee20  808fee20  00006dd8  2**0
                  CONTENTS
646 .inttab_tc2_072 00000000  808fee40  808fee40  00006dd8  2**0
                  CONTENTS
647 .inttab_tc2_073 00000000  808fee60  808fee60  00006dd8  2**0
                  CONTENTS
648 .inttab_tc2_074 00000000  808fee80  808fee80  00006dd8  2**0
                  CONTENTS
649 .inttab_tc2_075 00000000  808feea0  808feea0  00006dd8  2**0
                  CONTENTS
650 .inttab_tc2_076 00000000  808feec0  808feec0  00006dd8  2**0
                  CONTENTS
651 .inttab_tc2_077 00000000  808feee0  808feee0  00006dd8  2**0
                  CONTENTS
652 .inttab_tc2_078 00000000  808fef00  808fef00  00006dd8  2**0
                  CONTENTS
653 .inttab_tc2_079 00000000  808fef20  808fef20  00006dd8  2**0
                  CONTENTS
654 .inttab_tc2_07A 00000000  808fef40  808fef40  00006dd8  2**0
                  CONTENTS
655 .inttab_tc2_07B 00000000  808fef60  808fef60  00006dd8  2**0
                  CONTENTS
656 .inttab_tc2_07C 00000000  808fef80  808fef80  00006dd8  2**0
                  CONTENTS
657 .inttab_tc2_07D 00000000  808fefa0  808fefa0  00006dd8  2**0
                  CONTENTS
658 .inttab_tc2_07E 00000000  808fefc0  808fefc0  00006dd8  2**0
                  CONTENTS
659 .inttab_tc2_07F 00000000  808fefe0  808fefe0  00006dd8  2**0
                  CONTENTS
660 .inttab_tc2_080 00000000  808ff000  808ff000  00006dd8  2**0
                  CONTENTS
661 .inttab_tc2_081 00000000  808ff020  808ff020  00006dd8  2**0
                  CONTENTS
662 .inttab_tc2_082 00000000  808ff040  808ff040  00006dd8  2**0
                  CONTENTS
663 .inttab_tc2_083 00000000  808ff060  808ff060  00006dd8  2**0
                  CONTENTS
664 .inttab_tc2_084 00000000  808ff080  808ff080  00006dd8  2**0
                  CONTENTS
665 .inttab_tc2_085 00000000  808ff0a0  808ff0a0  00006dd8  2**0
                  CONTENTS
666 .inttab_tc2_086 00000000  808ff0c0  808ff0c0  00006dd8  2**0
                  CONTENTS
667 .inttab_tc2_087 00000000  808ff0e0  808ff0e0  00006dd8  2**0
                  CONTENTS
668 .inttab_tc2_088 00000000  808ff100  808ff100  00006dd8  2**0
                  CONTENTS
669 .inttab_tc2_089 00000000  808ff120  808ff120  00006dd8  2**0
                  CONTENTS
670 .inttab_tc2_08A 00000000  808ff140  808ff140  00006dd8  2**0
                  CONTENTS
671 .inttab_tc2_08B 00000000  808ff160  808ff160  00006dd8  2**0
                  CONTENTS
672 .inttab_tc2_08C 00000000  808ff180  808ff180  00006dd8  2**0
                  CONTENTS
673 .inttab_tc2_08D 00000000  808ff1a0  808ff1a0  00006dd8  2**0
                  CONTENTS
674 .inttab_tc2_08E 00000000  808ff1c0  808ff1c0  00006dd8  2**0
                  CONTENTS
675 .inttab_tc2_08F 00000000  808ff1e0  808ff1e0  00006dd8  2**0
                  CONTENTS
676 .inttab_tc2_090 00000000  808ff200  808ff200  00006dd8  2**0
                  CONTENTS
677 .inttab_tc2_091 00000000  808ff220  808ff220  00006dd8  2**0
                  CONTENTS
678 .inttab_tc2_092 00000000  808ff240  808ff240  00006dd8  2**0
                  CONTENTS
679 .inttab_tc2_093 00000000  808ff260  808ff260  00006dd8  2**0
                  CONTENTS
680 .inttab_tc2_094 00000000  808ff280  808ff280  00006dd8  2**0
                  CONTENTS
681 .inttab_tc2_095 00000000  808ff2a0  808ff2a0  00006dd8  2**0
                  CONTENTS
682 .inttab_tc2_096 00000000  808ff2c0  808ff2c0  00006dd8  2**0
                  CONTENTS
683 .inttab_tc2_097 00000000  808ff2e0  808ff2e0  00006dd8  2**0
                  CONTENTS
684 .inttab_tc2_098 00000000  808ff300  808ff300  00006dd8  2**0
                  CONTENTS
685 .inttab_tc2_099 00000000  808ff320  808ff320  00006dd8  2**0
                  CONTENTS
686 .inttab_tc2_09A 00000000  808ff340  808ff340  00006dd8  2**0
                  CONTENTS
687 .inttab_tc2_09B 00000000  808ff360  808ff360  00006dd8  2**0
                  CONTENTS
688 .inttab_tc2_09C 00000000  808ff380  808ff380  00006dd8  2**0
                  CONTENTS
689 .inttab_tc2_09D 00000000  808ff3a0  808ff3a0  00006dd8  2**0
                  CONTENTS
690 .inttab_tc2_09E 00000000  808ff3c0  808ff3c0  00006dd8  2**0
                  CONTENTS
691 .inttab_tc2_09F 00000000  808ff3e0  808ff3e0  00006dd8  2**0
                  CONTENTS
692 .inttab_tc2_0A0 00000000  808ff400  808ff400  00006dd8  2**0
                  CONTENTS
693 .inttab_tc2_0A1 00000000  808ff420  808ff420  00006dd8  2**0
                  CONTENTS
694 .inttab_tc2_0A2 00000000  808ff440  808ff440  00006dd8  2**0
                  CONTENTS
695 .inttab_tc2_0A3 00000000  808ff460  808ff460  00006dd8  2**0
                  CONTENTS
696 .inttab_tc2_0A4 00000000  808ff480  808ff480  00006dd8  2**0
                  CONTENTS
697 .inttab_tc2_0A5 00000000  808ff4a0  808ff4a0  00006dd8  2**0
                  CONTENTS
698 .inttab_tc2_0A6 00000000  808ff4c0  808ff4c0  00006dd8  2**0
                  CONTENTS
699 .inttab_tc2_0A7 00000000  808ff4e0  808ff4e0  00006dd8  2**0
                  CONTENTS
700 .inttab_tc2_0A8 00000000  808ff500  808ff500  00006dd8  2**0
                  CONTENTS
701 .inttab_tc2_0A9 00000000  808ff520  808ff520  00006dd8  2**0
                  CONTENTS
702 .inttab_tc2_0AA 00000000  808ff540  808ff540  00006dd8  2**0
                  CONTENTS
703 .inttab_tc2_0AB 00000000  808ff560  808ff560  00006dd8  2**0
                  CONTENTS
704 .inttab_tc2_0AC 00000000  808ff580  808ff580  00006dd8  2**0
                  CONTENTS
705 .inttab_tc2_0AD 00000000  808ff5a0  808ff5a0  00006dd8  2**0
                  CONTENTS
706 .inttab_tc2_0AE 00000000  808ff5c0  808ff5c0  00006dd8  2**0
                  CONTENTS
707 .inttab_tc2_0AF 00000000  808ff5e0  808ff5e0  00006dd8  2**0
                  CONTENTS
708 .inttab_tc2_0B0 00000000  808ff600  808ff600  00006dd8  2**0
                  CONTENTS
709 .inttab_tc2_0B1 00000000  808ff620  808ff620  00006dd8  2**0
                  CONTENTS
710 .inttab_tc2_0B2 00000000  808ff640  808ff640  00006dd8  2**0
                  CONTENTS
711 .inttab_tc2_0B3 00000000  808ff660  808ff660  00006dd8  2**0
                  CONTENTS
712 .inttab_tc2_0B4 00000000  808ff680  808ff680  00006dd8  2**0
                  CONTENTS
713 .inttab_tc2_0B5 00000000  808ff6a0  808ff6a0  00006dd8  2**0
                  CONTENTS
714 .inttab_tc2_0B6 00000000  808ff6c0  808ff6c0  00006dd8  2**0
                  CONTENTS
715 .inttab_tc2_0B7 00000000  808ff6e0  808ff6e0  00006dd8  2**0
                  CONTENTS
716 .inttab_tc2_0B8 00000000  808ff700  808ff700  00006dd8  2**0
                  CONTENTS
717 .inttab_tc2_0B9 00000000  808ff720  808ff720  00006dd8  2**0
                  CONTENTS
718 .inttab_tc2_0BA 00000000  808ff740  808ff740  00006dd8  2**0
                  CONTENTS
719 .inttab_tc2_0BB 00000000  808ff760  808ff760  00006dd8  2**0
                  CONTENTS
720 .inttab_tc2_0BC 00000000  808ff780  808ff780  00006dd8  2**0
                  CONTENTS
721 .inttab_tc2_0BD 00000000  808ff7a0  808ff7a0  00006dd8  2**0
                  CONTENTS
722 .inttab_tc2_0BE 00000000  808ff7c0  808ff7c0  00006dd8  2**0
                  CONTENTS
723 .inttab_tc2_0BF 00000000  808ff7e0  808ff7e0  00006dd8  2**0
                  CONTENTS
724 .inttab_tc2_0C0 00000000  808ff800  808ff800  00006dd8  2**0
                  CONTENTS
725 .inttab_tc2_0C1 00000000  808ff820  808ff820  00006dd8  2**0
                  CONTENTS
726 .inttab_tc2_0C2 00000000  808ff840  808ff840  00006dd8  2**0
                  CONTENTS
727 .inttab_tc2_0C3 00000000  808ff860  808ff860  00006dd8  2**0
                  CONTENTS
728 .inttab_tc2_0C4 00000000  808ff880  808ff880  00006dd8  2**0
                  CONTENTS
729 .inttab_tc2_0C5 00000000  808ff8a0  808ff8a0  00006dd8  2**0
                  CONTENTS
730 .inttab_tc2_0C6 00000000  808ff8c0  808ff8c0  00006dd8  2**0
                  CONTENTS
731 .inttab_tc2_0C7 00000000  808ff8e0  808ff8e0  00006dd8  2**0
                  CONTENTS
732 .inttab_tc2_0C8 00000000  808ff900  808ff900  00006dd8  2**0
                  CONTENTS
733 .inttab_tc2_0C9 00000000  808ff920  808ff920  00006dd8  2**0
                  CONTENTS
734 .inttab_tc2_0CA 00000000  808ff940  808ff940  00006dd8  2**0
                  CONTENTS
735 .inttab_tc2_0CB 00000000  808ff960  808ff960  00006dd8  2**0
                  CONTENTS
736 .inttab_tc2_0CC 00000000  808ff980  808ff980  00006dd8  2**0
                  CONTENTS
737 .inttab_tc2_0CD 00000000  808ff9a0  808ff9a0  00006dd8  2**0
                  CONTENTS
738 .inttab_tc2_0CE 00000000  808ff9c0  808ff9c0  00006dd8  2**0
                  CONTENTS
739 .inttab_tc2_0CF 00000000  808ff9e0  808ff9e0  00006dd8  2**0
                  CONTENTS
740 .inttab_tc2_0D0 00000000  808ffa00  808ffa00  00006dd8  2**0
                  CONTENTS
741 .inttab_tc2_0D1 00000000  808ffa20  808ffa20  00006dd8  2**0
                  CONTENTS
742 .inttab_tc2_0D2 00000000  808ffa40  808ffa40  00006dd8  2**0
                  CONTENTS
743 .inttab_tc2_0D3 00000000  808ffa60  808ffa60  00006dd8  2**0
                  CONTENTS
744 .inttab_tc2_0D4 00000000  808ffa80  808ffa80  00006dd8  2**0
                  CONTENTS
745 .inttab_tc2_0D5 00000000  808ffaa0  808ffaa0  00006dd8  2**0
                  CONTENTS
746 .inttab_tc2_0D6 00000000  808ffac0  808ffac0  00006dd8  2**0
                  CONTENTS
747 .inttab_tc2_0D7 00000000  808ffae0  808ffae0  00006dd8  2**0
                  CONTENTS
748 .inttab_tc2_0D8 00000000  808ffb00  808ffb00  00006dd8  2**0
                  CONTENTS
749 .inttab_tc2_0D9 00000000  808ffb20  808ffb20  00006dd8  2**0
                  CONTENTS
750 .inttab_tc2_0DA 00000000  808ffb40  808ffb40  00006dd8  2**0
                  CONTENTS
751 .inttab_tc2_0DB 00000000  808ffb60  808ffb60  00006dd8  2**0
                  CONTENTS
752 .inttab_tc2_0DC 00000000  808ffb80  808ffb80  00006dd8  2**0
                  CONTENTS
753 .inttab_tc2_0DD 00000000  808ffba0  808ffba0  00006dd8  2**0
                  CONTENTS
754 .inttab_tc2_0DE 00000000  808ffbc0  808ffbc0  00006dd8  2**0
                  CONTENTS
755 .inttab_tc2_0DF 00000000  808ffbe0  808ffbe0  00006dd8  2**0
                  CONTENTS
756 .inttab_tc2_0E0 00000000  808ffc00  808ffc00  00006dd8  2**0
                  CONTENTS
757 .inttab_tc2_0E1 00000000  808ffc20  808ffc20  00006dd8  2**0
                  CONTENTS
758 .inttab_tc2_0E2 00000000  808ffc40  808ffc40  00006dd8  2**0
                  CONTENTS
759 .inttab_tc2_0E3 00000000  808ffc60  808ffc60  00006dd8  2**0
                  CONTENTS
760 .inttab_tc2_0E4 00000000  808ffc80  808ffc80  00006dd8  2**0
                  CONTENTS
761 .inttab_tc2_0E5 00000000  808ffca0  808ffca0  00006dd8  2**0
                  CONTENTS
762 .inttab_tc2_0E6 00000000  808ffcc0  808ffcc0  00006dd8  2**0
                  CONTENTS
763 .inttab_tc2_0E7 00000000  808ffce0  808ffce0  00006dd8  2**0
                  CONTENTS
764 .inttab_tc2_0E8 00000000  808ffd00  808ffd00  00006dd8  2**0
                  CONTENTS
765 .inttab_tc2_0E9 00000000  808ffd20  808ffd20  00006dd8  2**0
                  CONTENTS
766 .inttab_tc2_0EA 00000000  808ffd40  808ffd40  00006dd8  2**0
                  CONTENTS
767 .inttab_tc2_0EB 00000000  808ffd60  808ffd60  00006dd8  2**0
                  CONTENTS
768 .inttab_tc2_0EC 00000000  808ffd80  808ffd80  00006dd8  2**0
                  CONTENTS
769 .inttab_tc2_0ED 00000000  808ffda0  808ffda0  00006dd8  2**0
                  CONTENTS
770 .inttab_tc2_0EE 00000000  808ffdc0  808ffdc0  00006dd8  2**0
                  CONTENTS
771 .inttab_tc2_0EF 00000000  808ffde0  808ffde0  00006dd8  2**0
                  CONTENTS
772 .inttab_tc2_0F0 00000000  808ffe00  808ffe00  00006dd8  2**0
                  CONTENTS
773 .inttab_tc2_0F1 00000000  808ffe20  808ffe20  00006dd8  2**0
                  CONTENTS
774 .inttab_tc2_0F2 00000000  808ffe40  808ffe40  00006dd8  2**0
                  CONTENTS
775 .inttab_tc2_0F3 00000000  808ffe60  808ffe60  00006dd8  2**0
                  CONTENTS
776 .inttab_tc2_0F4 00000000  808ffe80  808ffe80  00006dd8  2**0
                  CONTENTS
777 .inttab_tc2_0F5 00000000  808ffea0  808ffea0  00006dd8  2**0
                  CONTENTS
778 .inttab_tc2_0F6 00000000  808ffec0  808ffec0  00006dd8  2**0
                  CONTENTS
779 .inttab_tc2_0F7 00000000  808ffee0  808ffee0  00006dd8  2**0
                  CONTENTS
780 .inttab_tc2_0F8 00000000  808fff00  808fff00  00006dd8  2**0
                  CONTENTS
781 .inttab_tc2_0F9 00000000  808fff20  808fff20  00006dd8  2**0
                  CONTENTS
782 .inttab_tc2_0FA 00000000  808fff40  808fff40  00006dd8  2**0
                  CONTENTS
783 .inttab_tc2_0FB 00000000  808fff60  808fff60  00006dd8  2**0
                  CONTENTS
784 .inttab_tc2_0FC 00000000  808fff80  808fff80  00006dd8  2**0
                  CONTENTS
785 .inttab_tc2_0FD 00000000  808fffa0  808fffa0  00006dd8  2**0
                  CONTENTS
786 .inttab_tc2_0FE 00000000  808fffc0  808fffc0  00006dd8  2**0
                  CONTENTS
787 .inttab_tc2_0FF 00000000  808fffe0  808fffe0  00006dd8  2**0
                  CONTENTS
788 .inttab_tc3_000 00000000  809fe000  809fe000  00006dd8  2**0
                  CONTENTS
789 .inttab_tc3_001 00000000  809fe020  809fe020  00006dd8  2**0
                  CONTENTS
790 .inttab_tc3_002 00000000  809fe040  809fe040  00006dd8  2**0
                  CONTENTS
791 .inttab_tc3_003 00000000  809fe060  809fe060  00006dd8  2**0
                  CONTENTS
792 .inttab_tc3_004 00000000  809fe080  809fe080  00006dd8  2**0
                  CONTENTS
793 .inttab_tc3_005 00000000  809fe0a0  809fe0a0  00006dd8  2**0
                  CONTENTS
794 .inttab_tc3_006 00000000  809fe0c0  809fe0c0  00006dd8  2**0
                  CONTENTS
795 .inttab_tc3_007 00000000  809fe0e0  809fe0e0  00006dd8  2**0
                  CONTENTS
796 .inttab_tc3_008 00000000  809fe100  809fe100  00006dd8  2**0
                  CONTENTS
797 .inttab_tc3_009 00000000  809fe120  809fe120  00006dd8  2**0
                  CONTENTS
798 .inttab_tc3_00A 00000000  809fe140  809fe140  00006dd8  2**0
                  CONTENTS
799 .inttab_tc3_00B 00000000  809fe160  809fe160  00006dd8  2**0
                  CONTENTS
800 .inttab_tc3_00C 00000000  809fe180  809fe180  00006dd8  2**0
                  CONTENTS
801 .inttab_tc3_00D 00000000  809fe1a0  809fe1a0  00006dd8  2**0
                  CONTENTS
802 .inttab_tc3_00E 00000000  809fe1c0  809fe1c0  00006dd8  2**0
                  CONTENTS
803 .inttab_tc3_00F 00000000  809fe1e0  809fe1e0  00006dd8  2**0
                  CONTENTS
804 .inttab_tc3_010 00000000  809fe200  809fe200  00006dd8  2**0
                  CONTENTS
805 .inttab_tc3_011 00000000  809fe220  809fe220  00006dd8  2**0
                  CONTENTS
806 .inttab_tc3_012 00000000  809fe240  809fe240  00006dd8  2**0
                  CONTENTS
807 .inttab_tc3_013 00000000  809fe260  809fe260  00006dd8  2**0
                  CONTENTS
808 .inttab_tc3_014 00000000  809fe280  809fe280  00006dd8  2**0
                  CONTENTS
809 .inttab_tc3_015 00000000  809fe2a0  809fe2a0  00006dd8  2**0
                  CONTENTS
810 .inttab_tc3_016 00000000  809fe2c0  809fe2c0  00006dd8  2**0
                  CONTENTS
811 .inttab_tc3_017 00000000  809fe2e0  809fe2e0  00006dd8  2**0
                  CONTENTS
812 .inttab_tc3_018 00000000  809fe300  809fe300  00006dd8  2**0
                  CONTENTS
813 .inttab_tc3_019 00000000  809fe320  809fe320  00006dd8  2**0
                  CONTENTS
814 .inttab_tc3_01A 00000000  809fe340  809fe340  00006dd8  2**0
                  CONTENTS
815 .inttab_tc3_01B 00000000  809fe360  809fe360  00006dd8  2**0
                  CONTENTS
816 .inttab_tc3_01C 00000000  809fe380  809fe380  00006dd8  2**0
                  CONTENTS
817 .inttab_tc3_01D 00000000  809fe3a0  809fe3a0  00006dd8  2**0
                  CONTENTS
818 .inttab_tc3_01E 00000000  809fe3c0  809fe3c0  00006dd8  2**0
                  CONTENTS
819 .inttab_tc3_01F 00000000  809fe3e0  809fe3e0  00006dd8  2**0
                  CONTENTS
820 .inttab_tc3_020 00000000  809fe400  809fe400  00006dd8  2**0
                  CONTENTS
821 .inttab_tc3_021 00000000  809fe420  809fe420  00006dd8  2**0
                  CONTENTS
822 .inttab_tc3_022 00000000  809fe440  809fe440  00006dd8  2**0
                  CONTENTS
823 .inttab_tc3_023 00000000  809fe460  809fe460  00006dd8  2**0
                  CONTENTS
824 .inttab_tc3_024 00000000  809fe480  809fe480  00006dd8  2**0
                  CONTENTS
825 .inttab_tc3_025 00000000  809fe4a0  809fe4a0  00006dd8  2**0
                  CONTENTS
826 .inttab_tc3_026 00000000  809fe4c0  809fe4c0  00006dd8  2**0
                  CONTENTS
827 .inttab_tc3_027 00000000  809fe4e0  809fe4e0  00006dd8  2**0
                  CONTENTS
828 .inttab_tc3_028 00000000  809fe500  809fe500  00006dd8  2**0
                  CONTENTS
829 .inttab_tc3_029 00000000  809fe520  809fe520  00006dd8  2**0
                  CONTENTS
830 .inttab_tc3_02A 00000000  809fe540  809fe540  00006dd8  2**0
                  CONTENTS
831 .inttab_tc3_02B 00000000  809fe560  809fe560  00006dd8  2**0
                  CONTENTS
832 .inttab_tc3_02C 00000000  809fe580  809fe580  00006dd8  2**0
                  CONTENTS
833 .inttab_tc3_02D 00000000  809fe5a0  809fe5a0  00006dd8  2**0
                  CONTENTS
834 .inttab_tc3_02E 00000000  809fe5c0  809fe5c0  00006dd8  2**0
                  CONTENTS
835 .inttab_tc3_02F 00000000  809fe5e0  809fe5e0  00006dd8  2**0
                  CONTENTS
836 .inttab_tc3_030 00000000  809fe600  809fe600  00006dd8  2**0
                  CONTENTS
837 .inttab_tc3_031 00000000  809fe620  809fe620  00006dd8  2**0
                  CONTENTS
838 .inttab_tc3_032 00000000  809fe640  809fe640  00006dd8  2**0
                  CONTENTS
839 .inttab_tc3_033 00000000  809fe660  809fe660  00006dd8  2**0
                  CONTENTS
840 .inttab_tc3_034 00000000  809fe680  809fe680  00006dd8  2**0
                  CONTENTS
841 .inttab_tc3_035 00000000  809fe6a0  809fe6a0  00006dd8  2**0
                  CONTENTS
842 .inttab_tc3_036 00000000  809fe6c0  809fe6c0  00006dd8  2**0
                  CONTENTS
843 .inttab_tc3_037 00000000  809fe6e0  809fe6e0  00006dd8  2**0
                  CONTENTS
844 .inttab_tc3_038 00000000  809fe700  809fe700  00006dd8  2**0
                  CONTENTS
845 .inttab_tc3_039 00000000  809fe720  809fe720  00006dd8  2**0
                  CONTENTS
846 .inttab_tc3_03A 00000000  809fe740  809fe740  00006dd8  2**0
                  CONTENTS
847 .inttab_tc3_03B 00000000  809fe760  809fe760  00006dd8  2**0
                  CONTENTS
848 .inttab_tc3_03C 00000000  809fe780  809fe780  00006dd8  2**0
                  CONTENTS
849 .inttab_tc3_03D 00000000  809fe7a0  809fe7a0  00006dd8  2**0
                  CONTENTS
850 .inttab_tc3_03E 00000000  809fe7c0  809fe7c0  00006dd8  2**0
                  CONTENTS
851 .inttab_tc3_03F 00000000  809fe7e0  809fe7e0  00006dd8  2**0
                  CONTENTS
852 .inttab_tc3_040 00000000  809fe800  809fe800  00006dd8  2**0
                  CONTENTS
853 .inttab_tc3_041 00000000  809fe820  809fe820  00006dd8  2**0
                  CONTENTS
854 .inttab_tc3_042 00000000  809fe840  809fe840  00006dd8  2**0
                  CONTENTS
855 .inttab_tc3_043 00000000  809fe860  809fe860  00006dd8  2**0
                  CONTENTS
856 .inttab_tc3_044 00000000  809fe880  809fe880  00006dd8  2**0
                  CONTENTS
857 .inttab_tc3_045 00000000  809fe8a0  809fe8a0  00006dd8  2**0
                  CONTENTS
858 .inttab_tc3_046 00000000  809fe8c0  809fe8c0  00006dd8  2**0
                  CONTENTS
859 .inttab_tc3_047 00000000  809fe8e0  809fe8e0  00006dd8  2**0
                  CONTENTS
860 .inttab_tc3_048 00000000  809fe900  809fe900  00006dd8  2**0
                  CONTENTS
861 .inttab_tc3_049 00000000  809fe920  809fe920  00006dd8  2**0
                  CONTENTS
862 .inttab_tc3_04A 00000000  809fe940  809fe940  00006dd8  2**0
                  CONTENTS
863 .inttab_tc3_04B 00000000  809fe960  809fe960  00006dd8  2**0
                  CONTENTS
864 .inttab_tc3_04C 00000000  809fe980  809fe980  00006dd8  2**0
                  CONTENTS
865 .inttab_tc3_04D 00000000  809fe9a0  809fe9a0  00006dd8  2**0
                  CONTENTS
866 .inttab_tc3_04E 00000000  809fe9c0  809fe9c0  00006dd8  2**0
                  CONTENTS
867 .inttab_tc3_04F 00000000  809fe9e0  809fe9e0  00006dd8  2**0
                  CONTENTS
868 .inttab_tc3_050 00000000  809fea00  809fea00  00006dd8  2**0
                  CONTENTS
869 .inttab_tc3_051 00000000  809fea20  809fea20  00006dd8  2**0
                  CONTENTS
870 .inttab_tc3_052 00000000  809fea40  809fea40  00006dd8  2**0
                  CONTENTS
871 .inttab_tc3_053 00000000  809fea60  809fea60  00006dd8  2**0
                  CONTENTS
872 .inttab_tc3_054 00000000  809fea80  809fea80  00006dd8  2**0
                  CONTENTS
873 .inttab_tc3_055 00000000  809feaa0  809feaa0  00006dd8  2**0
                  CONTENTS
874 .inttab_tc3_056 00000000  809feac0  809feac0  00006dd8  2**0
                  CONTENTS
875 .inttab_tc3_057 00000000  809feae0  809feae0  00006dd8  2**0
                  CONTENTS
876 .inttab_tc3_058 00000000  809feb00  809feb00  00006dd8  2**0
                  CONTENTS
877 .inttab_tc3_059 00000000  809feb20  809feb20  00006dd8  2**0
                  CONTENTS
878 .inttab_tc3_05A 00000000  809feb40  809feb40  00006dd8  2**0
                  CONTENTS
879 .inttab_tc3_05B 00000000  809feb60  809feb60  00006dd8  2**0
                  CONTENTS
880 .inttab_tc3_05C 00000000  809feb80  809feb80  00006dd8  2**0
                  CONTENTS
881 .inttab_tc3_05D 00000000  809feba0  809feba0  00006dd8  2**0
                  CONTENTS
882 .inttab_tc3_05E 00000000  809febc0  809febc0  00006dd8  2**0
                  CONTENTS
883 .inttab_tc3_05F 00000000  809febe0  809febe0  00006dd8  2**0
                  CONTENTS
884 .inttab_tc3_060 00000000  809fec00  809fec00  00006dd8  2**0
                  CONTENTS
885 .inttab_tc3_061 00000000  809fec20  809fec20  00006dd8  2**0
                  CONTENTS
886 .inttab_tc3_062 00000000  809fec40  809fec40  00006dd8  2**0
                  CONTENTS
887 .inttab_tc3_063 00000000  809fec60  809fec60  00006dd8  2**0
                  CONTENTS
888 .inttab_tc3_064 00000000  809fec80  809fec80  00006dd8  2**0
                  CONTENTS
889 .inttab_tc3_065 00000000  809feca0  809feca0  00006dd8  2**0
                  CONTENTS
890 .inttab_tc3_066 00000000  809fecc0  809fecc0  00006dd8  2**0
                  CONTENTS
891 .inttab_tc3_067 00000000  809fece0  809fece0  00006dd8  2**0
                  CONTENTS
892 .inttab_tc3_068 00000000  809fed00  809fed00  00006dd8  2**0
                  CONTENTS
893 .inttab_tc3_069 00000000  809fed20  809fed20  00006dd8  2**0
                  CONTENTS
894 .inttab_tc3_06A 00000000  809fed40  809fed40  00006dd8  2**0
                  CONTENTS
895 .inttab_tc3_06B 00000000  809fed60  809fed60  00006dd8  2**0
                  CONTENTS
896 .inttab_tc3_06C 00000000  809fed80  809fed80  00006dd8  2**0
                  CONTENTS
897 .inttab_tc3_06D 00000000  809feda0  809feda0  00006dd8  2**0
                  CONTENTS
898 .inttab_tc3_06E 00000000  809fedc0  809fedc0  00006dd8  2**0
                  CONTENTS
899 .inttab_tc3_06F 00000000  809fede0  809fede0  00006dd8  2**0
                  CONTENTS
900 .inttab_tc3_070 00000000  809fee00  809fee00  00006dd8  2**0
                  CONTENTS
901 .inttab_tc3_071 00000000  809fee20  809fee20  00006dd8  2**0
                  CONTENTS
902 .inttab_tc3_072 00000000  809fee40  809fee40  00006dd8  2**0
                  CONTENTS
903 .inttab_tc3_073 00000000  809fee60  809fee60  00006dd8  2**0
                  CONTENTS
904 .inttab_tc3_074 00000000  809fee80  809fee80  00006dd8  2**0
                  CONTENTS
905 .inttab_tc3_075 00000000  809feea0  809feea0  00006dd8  2**0
                  CONTENTS
906 .inttab_tc3_076 00000000  809feec0  809feec0  00006dd8  2**0
                  CONTENTS
907 .inttab_tc3_077 00000000  809feee0  809feee0  00006dd8  2**0
                  CONTENTS
908 .inttab_tc3_078 00000000  809fef00  809fef00  00006dd8  2**0
                  CONTENTS
909 .inttab_tc3_079 00000000  809fef20  809fef20  00006dd8  2**0
                  CONTENTS
910 .inttab_tc3_07A 00000000  809fef40  809fef40  00006dd8  2**0
                  CONTENTS
911 .inttab_tc3_07B 00000000  809fef60  809fef60  00006dd8  2**0
                  CONTENTS
912 .inttab_tc3_07C 00000000  809fef80  809fef80  00006dd8  2**0
                  CONTENTS
913 .inttab_tc3_07D 00000000  809fefa0  809fefa0  00006dd8  2**0
                  CONTENTS
914 .inttab_tc3_07E 00000000  809fefc0  809fefc0  00006dd8  2**0
                  CONTENTS
915 .inttab_tc3_07F 00000000  809fefe0  809fefe0  00006dd8  2**0
                  CONTENTS
916 .inttab_tc3_080 00000000  809ff000  809ff000  00006dd8  2**0
                  CONTENTS
917 .inttab_tc3_081 00000000  809ff020  809ff020  00006dd8  2**0
                  CONTENTS
918 .inttab_tc3_082 00000000  809ff040  809ff040  00006dd8  2**0
                  CONTENTS
919 .inttab_tc3_083 00000000  809ff060  809ff060  00006dd8  2**0
                  CONTENTS
920 .inttab_tc3_084 00000000  809ff080  809ff080  00006dd8  2**0
                  CONTENTS
921 .inttab_tc3_085 00000000  809ff0a0  809ff0a0  00006dd8  2**0
                  CONTENTS
922 .inttab_tc3_086 00000000  809ff0c0  809ff0c0  00006dd8  2**0
                  CONTENTS
923 .inttab_tc3_087 00000000  809ff0e0  809ff0e0  00006dd8  2**0
                  CONTENTS
924 .inttab_tc3_088 00000000  809ff100  809ff100  00006dd8  2**0
                  CONTENTS
925 .inttab_tc3_089 00000000  809ff120  809ff120  00006dd8  2**0
                  CONTENTS
926 .inttab_tc3_08A 00000000  809ff140  809ff140  00006dd8  2**0
                  CONTENTS
927 .inttab_tc3_08B 00000000  809ff160  809ff160  00006dd8  2**0
                  CONTENTS
928 .inttab_tc3_08C 00000000  809ff180  809ff180  00006dd8  2**0
                  CONTENTS
929 .inttab_tc3_08D 00000000  809ff1a0  809ff1a0  00006dd8  2**0
                  CONTENTS
930 .inttab_tc3_08E 00000000  809ff1c0  809ff1c0  00006dd8  2**0
                  CONTENTS
931 .inttab_tc3_08F 00000000  809ff1e0  809ff1e0  00006dd8  2**0
                  CONTENTS
932 .inttab_tc3_090 00000000  809ff200  809ff200  00006dd8  2**0
                  CONTENTS
933 .inttab_tc3_091 00000000  809ff220  809ff220  00006dd8  2**0
                  CONTENTS
934 .inttab_tc3_092 00000000  809ff240  809ff240  00006dd8  2**0
                  CONTENTS
935 .inttab_tc3_093 00000000  809ff260  809ff260  00006dd8  2**0
                  CONTENTS
936 .inttab_tc3_094 00000000  809ff280  809ff280  00006dd8  2**0
                  CONTENTS
937 .inttab_tc3_095 00000000  809ff2a0  809ff2a0  00006dd8  2**0
                  CONTENTS
938 .inttab_tc3_096 00000000  809ff2c0  809ff2c0  00006dd8  2**0
                  CONTENTS
939 .inttab_tc3_097 00000000  809ff2e0  809ff2e0  00006dd8  2**0
                  CONTENTS
940 .inttab_tc3_098 00000000  809ff300  809ff300  00006dd8  2**0
                  CONTENTS
941 .inttab_tc3_099 00000000  809ff320  809ff320  00006dd8  2**0
                  CONTENTS
942 .inttab_tc3_09A 00000000  809ff340  809ff340  00006dd8  2**0
                  CONTENTS
943 .inttab_tc3_09B 00000000  809ff360  809ff360  00006dd8  2**0
                  CONTENTS
944 .inttab_tc3_09C 00000000  809ff380  809ff380  00006dd8  2**0
                  CONTENTS
945 .inttab_tc3_09D 00000000  809ff3a0  809ff3a0  00006dd8  2**0
                  CONTENTS
946 .inttab_tc3_09E 00000000  809ff3c0  809ff3c0  00006dd8  2**0
                  CONTENTS
947 .inttab_tc3_09F 00000000  809ff3e0  809ff3e0  00006dd8  2**0
                  CONTENTS
948 .inttab_tc3_0A0 00000000  809ff400  809ff400  00006dd8  2**0
                  CONTENTS
949 .inttab_tc3_0A1 00000000  809ff420  809ff420  00006dd8  2**0
                  CONTENTS
950 .inttab_tc3_0A2 00000000  809ff440  809ff440  00006dd8  2**0
                  CONTENTS
951 .inttab_tc3_0A3 00000000  809ff460  809ff460  00006dd8  2**0
                  CONTENTS
952 .inttab_tc3_0A4 00000000  809ff480  809ff480  00006dd8  2**0
                  CONTENTS
953 .inttab_tc3_0A5 00000000  809ff4a0  809ff4a0  00006dd8  2**0
                  CONTENTS
954 .inttab_tc3_0A6 00000000  809ff4c0  809ff4c0  00006dd8  2**0
                  CONTENTS
955 .inttab_tc3_0A7 00000000  809ff4e0  809ff4e0  00006dd8  2**0
                  CONTENTS
956 .inttab_tc3_0A8 00000000  809ff500  809ff500  00006dd8  2**0
                  CONTENTS
957 .inttab_tc3_0A9 00000000  809ff520  809ff520  00006dd8  2**0
                  CONTENTS
958 .inttab_tc3_0AA 00000000  809ff540  809ff540  00006dd8  2**0
                  CONTENTS
959 .inttab_tc3_0AB 00000000  809ff560  809ff560  00006dd8  2**0
                  CONTENTS
960 .inttab_tc3_0AC 00000000  809ff580  809ff580  00006dd8  2**0
                  CONTENTS
961 .inttab_tc3_0AD 00000000  809ff5a0  809ff5a0  00006dd8  2**0
                  CONTENTS
962 .inttab_tc3_0AE 00000000  809ff5c0  809ff5c0  00006dd8  2**0
                  CONTENTS
963 .inttab_tc3_0AF 00000000  809ff5e0  809ff5e0  00006dd8  2**0
                  CONTENTS
964 .inttab_tc3_0B0 00000000  809ff600  809ff600  00006dd8  2**0
                  CONTENTS
965 .inttab_tc3_0B1 00000000  809ff620  809ff620  00006dd8  2**0
                  CONTENTS
966 .inttab_tc3_0B2 00000000  809ff640  809ff640  00006dd8  2**0
                  CONTENTS
967 .inttab_tc3_0B3 00000000  809ff660  809ff660  00006dd8  2**0
                  CONTENTS
968 .inttab_tc3_0B4 00000000  809ff680  809ff680  00006dd8  2**0
                  CONTENTS
969 .inttab_tc3_0B5 00000000  809ff6a0  809ff6a0  00006dd8  2**0
                  CONTENTS
970 .inttab_tc3_0B6 00000000  809ff6c0  809ff6c0  00006dd8  2**0
                  CONTENTS
971 .inttab_tc3_0B7 00000000  809ff6e0  809ff6e0  00006dd8  2**0
                  CONTENTS
972 .inttab_tc3_0B8 00000000  809ff700  809ff700  00006dd8  2**0
                  CONTENTS
973 .inttab_tc3_0B9 00000000  809ff720  809ff720  00006dd8  2**0
                  CONTENTS
974 .inttab_tc3_0BA 00000000  809ff740  809ff740  00006dd8  2**0
                  CONTENTS
975 .inttab_tc3_0BB 00000000  809ff760  809ff760  00006dd8  2**0
                  CONTENTS
976 .inttab_tc3_0BC 00000000  809ff780  809ff780  00006dd8  2**0
                  CONTENTS
977 .inttab_tc3_0BD 00000000  809ff7a0  809ff7a0  00006dd8  2**0
                  CONTENTS
978 .inttab_tc3_0BE 00000000  809ff7c0  809ff7c0  00006dd8  2**0
                  CONTENTS
979 .inttab_tc3_0BF 00000000  809ff7e0  809ff7e0  00006dd8  2**0
                  CONTENTS
980 .inttab_tc3_0C0 00000000  809ff800  809ff800  00006dd8  2**0
                  CONTENTS
981 .inttab_tc3_0C1 00000000  809ff820  809ff820  00006dd8  2**0
                  CONTENTS
982 .inttab_tc3_0C2 00000000  809ff840  809ff840  00006dd8  2**0
                  CONTENTS
983 .inttab_tc3_0C3 00000000  809ff860  809ff860  00006dd8  2**0
                  CONTENTS
984 .inttab_tc3_0C4 00000000  809ff880  809ff880  00006dd8  2**0
                  CONTENTS
985 .inttab_tc3_0C5 00000000  809ff8a0  809ff8a0  00006dd8  2**0
                  CONTENTS
986 .inttab_tc3_0C6 00000000  809ff8c0  809ff8c0  00006dd8  2**0
                  CONTENTS
987 .inttab_tc3_0C7 00000000  809ff8e0  809ff8e0  00006dd8  2**0
                  CONTENTS
988 .inttab_tc3_0C8 00000000  809ff900  809ff900  00006dd8  2**0
                  CONTENTS
989 .inttab_tc3_0C9 00000000  809ff920  809ff920  00006dd8  2**0
                  CONTENTS
990 .inttab_tc3_0CA 00000000  809ff940  809ff940  00006dd8  2**0
                  CONTENTS
991 .inttab_tc3_0CB 00000000  809ff960  809ff960  00006dd8  2**0
                  CONTENTS
992 .inttab_tc3_0CC 00000000  809ff980  809ff980  00006dd8  2**0
                  CONTENTS
993 .inttab_tc3_0CD 00000000  809ff9a0  809ff9a0  00006dd8  2**0
                  CONTENTS
994 .inttab_tc3_0CE 00000000  809ff9c0  809ff9c0  00006dd8  2**0
                  CONTENTS
995 .inttab_tc3_0CF 00000000  809ff9e0  809ff9e0  00006dd8  2**0
                  CONTENTS
996 .inttab_tc3_0D0 00000000  809ffa00  809ffa00  00006dd8  2**0
                  CONTENTS
997 .inttab_tc3_0D1 00000000  809ffa20  809ffa20  00006dd8  2**0
                  CONTENTS
998 .inttab_tc3_0D2 00000000  809ffa40  809ffa40  00006dd8  2**0
                  CONTENTS
999 .inttab_tc3_0D3 00000000  809ffa60  809ffa60  00006dd8  2**0
                  CONTENTS
1000 .inttab_tc3_0D4 00000000  809ffa80  809ffa80  00006dd8  2**0
                  CONTENTS
1001 .inttab_tc3_0D5 00000000  809ffaa0  809ffaa0  00006dd8  2**0
                  CONTENTS
1002 .inttab_tc3_0D6 00000000  809ffac0  809ffac0  00006dd8  2**0
                  CONTENTS
1003 .inttab_tc3_0D7 00000000  809ffae0  809ffae0  00006dd8  2**0
                  CONTENTS
1004 .inttab_tc3_0D8 00000000  809ffb00  809ffb00  00006dd8  2**0
                  CONTENTS
1005 .inttab_tc3_0D9 00000000  809ffb20  809ffb20  00006dd8  2**0
                  CONTENTS
1006 .inttab_tc3_0DA 00000000  809ffb40  809ffb40  00006dd8  2**0
                  CONTENTS
1007 .inttab_tc3_0DB 00000000  809ffb60  809ffb60  00006dd8  2**0
                  CONTENTS
1008 .inttab_tc3_0DC 00000000  809ffb80  809ffb80  00006dd8  2**0
                  CONTENTS
1009 .inttab_tc3_0DD 00000000  809ffba0  809ffba0  00006dd8  2**0
                  CONTENTS
1010 .inttab_tc3_0DE 00000000  809ffbc0  809ffbc0  00006dd8  2**0
                  CONTENTS
1011 .inttab_tc3_0DF 00000000  809ffbe0  809ffbe0  00006dd8  2**0
                  CONTENTS
1012 .inttab_tc3_0E0 00000000  809ffc00  809ffc00  00006dd8  2**0
                  CONTENTS
1013 .inttab_tc3_0E1 00000000  809ffc20  809ffc20  00006dd8  2**0
                  CONTENTS
1014 .inttab_tc3_0E2 00000000  809ffc40  809ffc40  00006dd8  2**0
                  CONTENTS
1015 .inttab_tc3_0E3 00000000  809ffc60  809ffc60  00006dd8  2**0
                  CONTENTS
1016 .inttab_tc3_0E4 00000000  809ffc80  809ffc80  00006dd8  2**0
                  CONTENTS
1017 .inttab_tc3_0E5 00000000  809ffca0  809ffca0  00006dd8  2**0
                  CONTENTS
1018 .inttab_tc3_0E6 00000000  809ffcc0  809ffcc0  00006dd8  2**0
                  CONTENTS
1019 .inttab_tc3_0E7 00000000  809ffce0  809ffce0  00006dd8  2**0
                  CONTENTS
1020 .inttab_tc3_0E8 00000000  809ffd00  809ffd00  00006dd8  2**0
                  CONTENTS
1021 .inttab_tc3_0E9 00000000  809ffd20  809ffd20  00006dd8  2**0
                  CONTENTS
1022 .inttab_tc3_0EA 00000000  809ffd40  809ffd40  00006dd8  2**0
                  CONTENTS
1023 .inttab_tc3_0EB 00000000  809ffd60  809ffd60  00006dd8  2**0
                  CONTENTS
1024 .inttab_tc3_0EC 00000000  809ffd80  809ffd80  00006dd8  2**0
                  CONTENTS
1025 .inttab_tc3_0ED 00000000  809ffda0  809ffda0  00006dd8  2**0
                  CONTENTS
1026 .inttab_tc3_0EE 00000000  809ffdc0  809ffdc0  00006dd8  2**0
                  CONTENTS
1027 .inttab_tc3_0EF 00000000  809ffde0  809ffde0  00006dd8  2**0
                  CONTENTS
1028 .inttab_tc3_0F0 00000000  809ffe00  809ffe00  00006dd8  2**0
                  CONTENTS
1029 .inttab_tc3_0F1 00000000  809ffe20  809ffe20  00006dd8  2**0
                  CONTENTS
1030 .inttab_tc3_0F2 00000000  809ffe40  809ffe40  00006dd8  2**0
                  CONTENTS
1031 .inttab_tc3_0F3 00000000  809ffe60  809ffe60  00006dd8  2**0
                  CONTENTS
1032 .inttab_tc3_0F4 00000000  809ffe80  809ffe80  00006dd8  2**0
                  CONTENTS
1033 .inttab_tc3_0F5 00000000  809ffea0  809ffea0  00006dd8  2**0
                  CONTENTS
1034 .inttab_tc3_0F6 00000000  809ffec0  809ffec0  00006dd8  2**0
                  CONTENTS
1035 .inttab_tc3_0F7 00000000  809ffee0  809ffee0  00006dd8  2**0
                  CONTENTS
1036 .inttab_tc3_0F8 00000000  809fff00  809fff00  00006dd8  2**0
                  CONTENTS
1037 .inttab_tc3_0F9 00000000  809fff20  809fff20  00006dd8  2**0
                  CONTENTS
1038 .inttab_tc3_0FA 00000000  809fff40  809fff40  00006dd8  2**0
                  CONTENTS
1039 .inttab_tc3_0FB 00000000  809fff60  809fff60  00006dd8  2**0
                  CONTENTS
1040 .inttab_tc3_0FC 00000000  809fff80  809fff80  00006dd8  2**0
                  CONTENTS
1041 .inttab_tc3_0FD 00000000  809fffa0  809fffa0  00006dd8  2**0
                  CONTENTS
1042 .inttab_tc3_0FE 00000000  809fffc0  809fffc0  00006dd8  2**0
                  CONTENTS
1043 .inttab_tc3_0FF 00000000  809fffe0  809fffe0  00006dd8  2**0
                  CONTENTS
1044 .bmhd_0_org   000001f4  af400000  af400000  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1045 .bmhd_1_org   000001f4  af400200  af400200  0000602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1046 .bmhd_2_org   000001f4  af400400  af400400  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1047 .bmhd_3_org   000001f4  af400600  af400600  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1048 .bmhd_0_copy  000001f4  af401000  af401000  00006608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1049 .bmhd_1_copy  000001f4  af401200  af401200  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1050 .bmhd_2_copy  000001f4  af401400  af401400  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1051 .bmhd_3_copy  000001f4  af401600  af401600  00006be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1052 .CPU3.zdata   00000000  40000000  40000000  00006dd8  2**0
                  CONTENTS
1053 .CPU2.zdata   00000000  50000000  50000000  00006dd8  2**0
                  CONTENTS
1054 .CPU1.zdata   00000000  60000000  60000000  00006dd8  2**0
                  CONTENTS
1055 .CPU0.zdata   00000000  70000000  70000000  00006dd8  2**0
                  CONTENTS
1056 .zdata_powerOn 00000000  70000000  70000000  00006dd8  2**0
                  CONTENTS
1057 .zdata        00000000  70000000  70000000  00006dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
1058 .lmuzdata     00000000  90000000  90000000  00006dd8  2**0
                  CONTENTS
1059 .sdata        00000000  70000000  70000000  00006dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
1060 .sdata4       00000000  90040000  90040000  00006dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
1061 .CPU3.data    00000000  40000000  40000000  00006dd8  2**0
                  CONTENTS
1062 .CPU3.lmudata 00000000  90030000  90030000  00006dd8  2**0
                  CONTENTS
1063 .CPU2.data    00000000  50000000  50000000  00006dd8  2**0
                  CONTENTS
1064 .CPU2.lmudata 00000000  90020000  90020000  00006dd8  2**0
                  CONTENTS
1065 .CPU1.data    00000000  60000000  60000000  00006dd8  2**0
                  CONTENTS
1066 .CPU1.lmudata 00000000  90010000  90010000  00006dd8  2**0
                  CONTENTS
1067 .CPU0.data    00000000  70000000  70000000  00006dd8  2**0
                  CONTENTS
1068 .CPU0.lmudata 00000000  90000000  90000000  00006dd8  2**0
                  CONTENTS
1069 .data         00000010  70000000  80000200  00000680  2**3
                  CONTENTS, ALLOC, LOAD, DATA
1070 .bss          00000678  70000010  80000210  00000690  2**3
                  ALLOC
1071 .heap         00001000  70000688  80000210  00000690  2**0
                  ALLOC
1072 .lmudata      00000000  90040000  90040000  00006dd8  2**0
                  CONTENTS
1073 .rodata       00000598  80000210  80000210  00000690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1074 .CPU0.psram_text 00000000  70100000  70100000  00006dd8  2**0
                  CONTENTS
1075 .CPU1.psram_text 00000000  60100000  60100000  00006dd8  2**0
                  CONTENTS
1076 .CPU2.psram_text 00000000  50100000  50100000  00006dd8  2**0
                  CONTENTS
1077 .CPU3.psram_text 00000000  40100000  40100000  00006dd8  2**0
                  CONTENTS
1078 .CPU0.text    000003f4  800007a8  800007a8  00000c28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1079 .init         0000000c  80000b9c  80000b9c  0000101c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1080 .fini         00000008  80000ba8  80000ba8  00001028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1081 .CPU1.text    000001f8  8030010c  8030010c  00005620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1082 .CPU2.text    000001f8  8060010c  8060010c  00005920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1083 .CPU3.text    000001e6  8090010c  8090010c  00005c20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1084 .text         00004474  80000bb0  80000bb0  00001030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1085 .eh_frame     00000004  80005024  80005024  000054a4  2**0
                  ALLOC
1086 .ctors        00000010  80005028  80005028  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
1087 .dtors        00000010  80005038  80005038  000054b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
1088 .comment      00000082  00000000  00000000  00006dd8  2**0
                  CONTENTS, READONLY
1089 .debug_aranges 00000af8  00000000  00000000  00006e60  2**3
                  CONTENTS, READONLY, DEBUGGING
1090 .debug_info   000c6967  00000000  00000000  00007958  2**0
                  CONTENTS, READONLY, DEBUGGING
1091 .debug_abbrev 00005422  00000000  00000000  000ce2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
1092 .debug_line   00011ff5  00000000  00000000  000d36e1  2**0
                  CONTENTS, READONLY, DEBUGGING
1093 .debug_frame  00001788  00000000  00000000  000e56d8  2**2
                  CONTENTS, READONLY, DEBUGGING
1094 .debug_str    000026a3  00000000  00000000  000e6e60  2**0
                  CONTENTS, READONLY, DEBUGGING
1095 .debug_loc    00009e02  00000000  00000000  000e9503  2**0
                  CONTENTS, READONLY, DEBUGGING
1096 .debug_ranges 00000ed0  00000000  00000000  000f3308  2**3
                  CONTENTS, READONLY, DEBUGGING
1097 .debug_macro  0003c66a  00000000  00000000  000f41d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0000000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0000000:	91 00 00 28 	movh.a %a2,32768
a0000004:	d9 22 90 60 	lea %a2,[%a2]2448 <80000990 <__StartUpSoftware>>
a0000008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a000000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 a6 f1 	lea %a2,[%a2]7142 <80001be6 <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 d4 01 	lea %a2,[%a2]7188 <80001c14 <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 c2 11 	lea %a2,[%a2]7234 <80001c42 <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 f0 11 	lea %a2,[%a2]7280 <80001c70 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 de 21 	lea %a2,[%a2]7326 <80001c9e <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 cc 31 	lea %a2,[%a2]7372 <80001ccc <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 c0 41 	lea %a2,[%a2]7424 <80001d00 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 f0 61 	lea %a2,[%a2]7600 <80001db0 <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300000 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300000:	0d 00 00 02 	svlcx 
80300004:	02 f4       	mov %d4,%d15
80300006:	91 00 00 28 	movh.a %a2,32768
8030000a:	d9 22 a6 f1 	lea %a2,[%a2]7142 <80001be6 <IfxCpu_Trap_memoryManagementError>>
8030000e:	dc 02       	ji %a2
80300010:	00 80       	rfe 
	...
8030001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300020:	0d 00 00 02 	svlcx 
80300024:	02 f4       	mov %d4,%d15
80300026:	91 00 00 28 	movh.a %a2,32768
8030002a:	d9 22 d4 01 	lea %a2,[%a2]7188 <80001c14 <IfxCpu_Trap_internalProtectionError>>
8030002e:	dc 02       	ji %a2
80300030:	00 80       	rfe 
	...
8030003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300040:	0d 00 00 02 	svlcx 
80300044:	02 f4       	mov %d4,%d15
80300046:	91 00 00 28 	movh.a %a2,32768
8030004a:	d9 22 c2 11 	lea %a2,[%a2]7234 <80001c42 <IfxCpu_Trap_instructionError>>
8030004e:	dc 02       	ji %a2
80300050:	00 80       	rfe 
	...
8030005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300060:	02 f4       	mov %d4,%d15
80300062:	91 00 00 28 	movh.a %a2,32768
80300066:	d9 22 f0 11 	lea %a2,[%a2]7280 <80001c70 <IfxCpu_Trap_contextManagementError>>
8030006a:	dc 02       	ji %a2
8030006c:	00 80       	rfe 
	...
8030007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300080:	0d 00 00 02 	svlcx 
80300084:	02 f4       	mov %d4,%d15
80300086:	91 00 00 28 	movh.a %a2,32768
8030008a:	d9 22 de 21 	lea %a2,[%a2]7326 <80001c9e <IfxCpu_Trap_busError>>
8030008e:	dc 02       	ji %a2
80300090:	00 80       	rfe 
	...
8030009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803000a0:	0d 00 00 02 	svlcx 
803000a4:	02 f4       	mov %d4,%d15
803000a6:	91 00 00 28 	movh.a %a2,32768
803000aa:	d9 22 cc 31 	lea %a2,[%a2]7372 <80001ccc <IfxCpu_Trap_assertion>>
803000ae:	dc 02       	ji %a2
803000b0:	00 80       	rfe 
	...
803000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803000c0:	0d 00 00 02 	svlcx 
803000c4:	02 f4       	mov %d4,%d15
803000c6:	91 00 00 28 	movh.a %a2,32768
803000ca:	d9 22 ec 41 	lea %a2,[%a2]7468 <80001d2c <IfxCpu_Trap_systemCall_Cpu1>>
803000ce:	dc 02       	ji %a2
803000d0:	00 80       	rfe 
	...
803000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803000e0:	0d 00 00 02 	svlcx 
803000e4:	02 f4       	mov %d4,%d15
803000e6:	91 00 00 28 	movh.a %a2,32768
803000ea:	d9 22 f0 61 	lea %a2,[%a2]7600 <80001db0 <IfxCpu_Trap_nonMaskableInterrupt>>
803000ee:	dc 02       	ji %a2
803000f0:	00 80       	rfe 
}
803000f2:	00 90       	ret 

803000f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80600000 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80600000:	0d 00 00 02 	svlcx 
80600004:	02 f4       	mov %d4,%d15
80600006:	91 00 00 28 	movh.a %a2,32768
8060000a:	d9 22 a6 f1 	lea %a2,[%a2]7142 <80001be6 <IfxCpu_Trap_memoryManagementError>>
8060000e:	dc 02       	ji %a2
80600010:	00 80       	rfe 
	...
8060001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80600020:	0d 00 00 02 	svlcx 
80600024:	02 f4       	mov %d4,%d15
80600026:	91 00 00 28 	movh.a %a2,32768
8060002a:	d9 22 d4 01 	lea %a2,[%a2]7188 <80001c14 <IfxCpu_Trap_internalProtectionError>>
8060002e:	dc 02       	ji %a2
80600030:	00 80       	rfe 
	...
8060003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80600040:	0d 00 00 02 	svlcx 
80600044:	02 f4       	mov %d4,%d15
80600046:	91 00 00 28 	movh.a %a2,32768
8060004a:	d9 22 c2 11 	lea %a2,[%a2]7234 <80001c42 <IfxCpu_Trap_instructionError>>
8060004e:	dc 02       	ji %a2
80600050:	00 80       	rfe 
	...
8060005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80600060:	02 f4       	mov %d4,%d15
80600062:	91 00 00 28 	movh.a %a2,32768
80600066:	d9 22 f0 11 	lea %a2,[%a2]7280 <80001c70 <IfxCpu_Trap_contextManagementError>>
8060006a:	dc 02       	ji %a2
8060006c:	00 80       	rfe 
	...
8060007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80600080:	0d 00 00 02 	svlcx 
80600084:	02 f4       	mov %d4,%d15
80600086:	91 00 00 28 	movh.a %a2,32768
8060008a:	d9 22 de 21 	lea %a2,[%a2]7326 <80001c9e <IfxCpu_Trap_busError>>
8060008e:	dc 02       	ji %a2
80600090:	00 80       	rfe 
	...
8060009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
806000a0:	0d 00 00 02 	svlcx 
806000a4:	02 f4       	mov %d4,%d15
806000a6:	91 00 00 28 	movh.a %a2,32768
806000aa:	d9 22 cc 31 	lea %a2,[%a2]7372 <80001ccc <IfxCpu_Trap_assertion>>
806000ae:	dc 02       	ji %a2
806000b0:	00 80       	rfe 
	...
806000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
806000c0:	0d 00 00 02 	svlcx 
806000c4:	02 f4       	mov %d4,%d15
806000c6:	91 00 00 28 	movh.a %a2,32768
806000ca:	d9 22 d8 51 	lea %a2,[%a2]7512 <80001d58 <IfxCpu_Trap_systemCall_Cpu2>>
806000ce:	dc 02       	ji %a2
806000d0:	00 80       	rfe 
	...
806000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
806000e0:	0d 00 00 02 	svlcx 
806000e4:	02 f4       	mov %d4,%d15
806000e6:	91 00 00 28 	movh.a %a2,32768
806000ea:	d9 22 f0 61 	lea %a2,[%a2]7600 <80001db0 <IfxCpu_Trap_nonMaskableInterrupt>>
806000ee:	dc 02       	ji %a2
806000f0:	00 80       	rfe 
}
806000f2:	00 90       	ret 

806000f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc3:

80900000 <IfxCpu_Trap_vectorTable3>:
#endif


void IfxCpu_Trap_vectorTable3(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80900000:	0d 00 00 02 	svlcx 
80900004:	02 f4       	mov %d4,%d15
80900006:	91 00 00 28 	movh.a %a2,32768
8090000a:	d9 22 a6 f1 	lea %a2,[%a2]7142 <80001be6 <IfxCpu_Trap_memoryManagementError>>
8090000e:	dc 02       	ji %a2
80900010:	00 80       	rfe 
	...
8090001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80900020:	0d 00 00 02 	svlcx 
80900024:	02 f4       	mov %d4,%d15
80900026:	91 00 00 28 	movh.a %a2,32768
8090002a:	d9 22 d4 01 	lea %a2,[%a2]7188 <80001c14 <IfxCpu_Trap_internalProtectionError>>
8090002e:	dc 02       	ji %a2
80900030:	00 80       	rfe 
	...
8090003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80900040:	0d 00 00 02 	svlcx 
80900044:	02 f4       	mov %d4,%d15
80900046:	91 00 00 28 	movh.a %a2,32768
8090004a:	d9 22 c2 11 	lea %a2,[%a2]7234 <80001c42 <IfxCpu_Trap_instructionError>>
8090004e:	dc 02       	ji %a2
80900050:	00 80       	rfe 
	...
8090005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80900060:	02 f4       	mov %d4,%d15
80900062:	91 00 00 28 	movh.a %a2,32768
80900066:	d9 22 f0 11 	lea %a2,[%a2]7280 <80001c70 <IfxCpu_Trap_contextManagementError>>
8090006a:	dc 02       	ji %a2
8090006c:	00 80       	rfe 
	...
8090007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80900080:	0d 00 00 02 	svlcx 
80900084:	02 f4       	mov %d4,%d15
80900086:	91 00 00 28 	movh.a %a2,32768
8090008a:	d9 22 de 21 	lea %a2,[%a2]7326 <80001c9e <IfxCpu_Trap_busError>>
8090008e:	dc 02       	ji %a2
80900090:	00 80       	rfe 
	...
8090009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
809000a0:	0d 00 00 02 	svlcx 
809000a4:	02 f4       	mov %d4,%d15
809000a6:	91 00 00 28 	movh.a %a2,32768
809000aa:	d9 22 cc 31 	lea %a2,[%a2]7372 <80001ccc <IfxCpu_Trap_assertion>>
809000ae:	dc 02       	ji %a2
809000b0:	00 80       	rfe 
	...
809000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu3);
809000c0:	0d 00 00 02 	svlcx 
809000c4:	02 f4       	mov %d4,%d15
809000c6:	91 00 00 28 	movh.a %a2,32768
809000ca:	d9 22 c4 61 	lea %a2,[%a2]7556 <80001d84 <IfxCpu_Trap_systemCall_Cpu3>>
809000ce:	dc 02       	ji %a2
809000d0:	00 80       	rfe 
	...
809000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
809000e0:	0d 00 00 02 	svlcx 
809000e4:	02 f4       	mov %d4,%d15
809000e6:	91 00 00 28 	movh.a %a2,32768
809000ea:	d9 22 f0 61 	lea %a2,[%a2]7600 <80001db0 <IfxCpu_Trap_nonMaskableInterrupt>>
809000ee:	dc 02       	ji %a2
809000f0:	00 80       	rfe 
}
809000f2:	00 90       	ret 

809000f4 <IfxCpu_Trap_vectorTable3_end>:
	...

Disassembly of section .start_tc1:

a0300100 <_START1>:
a0300100:	91 00 03 28 	movh.a %a2,32816
a0300104:	d9 22 0c 40 	lea %a2,[%a2]268 <8030010c <__Core1_start>>
a0300108:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a030010a:	00 90       	ret 

Disassembly of section .start_tc2:

a0600100 <_START2>:
a0600100:	91 00 06 28 	movh.a %a2,32864
a0600104:	d9 22 0c 40 	lea %a2,[%a2]268 <8060010c <__Core2_start>>
a0600108:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a060010a:	00 90       	ret 

Disassembly of section .start_tc3:

a0900100 <_START3>:
a0900100:	91 00 09 28 	movh.a %a2,32912
a0900104:	d9 22 0c 40 	lea %a2,[%a2]268 <8090010c <__Core3_start>>
a0900108:	dc 02       	ji %a2
#endif

void _START3(void)
{
    Ifx_Ssw_jumpToFunction(__Core3_start);
}
a090010a:	00 90       	ret 

Disassembly of section .inttab_tc0_002:

802fe040 <__intvec_tc0_2>:
802fe040:	0d 00 00 02 	svlcx 
802fe044:	91 00 00 e8 	movh.a %a14,32768
802fe048:	d9 ee 10 04 	lea %a14,[%a14]16400 <80004010 <canIsrTxHandler>>
802fe04c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_003:

802fe060 <__intvec_tc0_3>:
802fe060:	0d 00 00 02 	svlcx 
802fe064:	91 00 00 e8 	movh.a %a14,32768
802fe068:	d9 ee 3e 24 	lea %a14,[%a14]16574 <800040be <canIsrRxHandler>>
802fe06c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_004:

802fe080 <__intvec_tc0_4>:
802fe080:	0d 00 00 02 	svlcx 
802fe084:	91 00 00 e8 	movh.a %a14,32768
802fe088:	d9 ee 0a 14 	lea %a14,[%a14]16458 <8000404a <canIsrTxHandler1>>
802fe08c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_005:

802fe0a0 <__intvec_tc0_5>:
802fe0a0:	0d 00 00 02 	svlcx 
802fe0a4:	91 00 00 e8 	movh.a %a14,32768
802fe0a8:	d9 ee 0a 44 	lea %a14,[%a14]16650 <8000410a <canIsrRxHandler1>>
802fe0ac:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_006:

802fe0c0 <__intvec_tc0_6>:
802fe0c0:	0d 00 00 02 	svlcx 
802fe0c4:	91 00 00 e8 	movh.a %a14,32768
802fe0c8:	d9 ee 04 24 	lea %a14,[%a14]16516 <80004084 <canIsrTxHandler2>>
802fe0cc:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_007:

802fe0e0 <__intvec_tc0_7>:
802fe0e0:	0d 00 00 02 	svlcx 
802fe0e4:	91 00 00 e8 	movh.a %a14,32768
802fe0e8:	d9 ee 16 54 	lea %a14,[%a14]16726 <80004156 <canIsrRxHandler2>>
802fe0ec:	dc 0e       	ji %a14

Disassembly of section .CPU0.text:

800007a8 <__StartUpSoftware_Phase2>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
800007a8:	91 00 00 28 	movh.a %a2,32768
800007ac:	d9 22 c2 a3 	lea %a2,[%a2]16002 <80003e82 <Ifx_Ssw_Pms_Init>>
800007b0:	2d 02 20 00 	jli %a2
800007b4:	91 00 00 28 	movh.a %a2,32768
800007b8:	d9 22 e8 e3 	lea %a2,[%a2]16296 <80003fa8 <Ifx_Ssw_Pms_InitCheck>>
800007bc:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
800007c0:	91 00 00 28 	movh.a %a2,32768
800007c4:	d9 22 4c f0 	lea %a2,[%a2]1996 <800007cc <__StartUpSoftware_Phase3PowerOnResetPath>>
800007c8:	dc 02       	ji %a2
}
800007ca:	00 90       	ret 

800007cc <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
800007cc:	91 40 00 a7 	movh.a %sp,28676
800007d0:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
800007d4:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
800007d8:	91 40 00 37 	movh.a %a3,28676
800007dc:	91 40 00 27 	movh.a %a2,28676
800007e0:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
800007e4:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
800007e8:	01 32 20 20 	sub.a %a2,%a2,%a3
800007ec:	80 22       	mov.d %d2,%a2
800007ee:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
800007f2:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
800007f4:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
800007f8:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
800007fa:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800007fc:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80000800:	df 06 2d 00 	jeq %d6,0,8000085a <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000804:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000808:	8f 42 1f 50 	sh %d5,%d2,-12
8000080c:	26 75       	and %d5,%d7
8000080e:	a6 54       	or %d4,%d5
        if (k == 0U)
80000810:	df 03 14 00 	jeq %d3,0,80000838 <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80000814:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80000816:	5f 03 15 00 	jeq %d3,%d0,80000840 <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
8000081a:	c2 13       	add %d3,1
8000081c:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8000081e:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80000822:	5f 36 17 00 	jeq %d6,%d3,80000850 <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000826:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000828:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000082c:	8f 42 1f 50 	sh %d5,%d2,-12
80000830:	26 75       	and %d5,%d7
80000832:	a6 54       	or %d4,%d5
        if (k == 0U)
80000834:	df 03 f0 ff 	jne %d3,0,80000814 <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80000838:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
8000083c:	5f 03 ef ff 	jne %d3,%d0,8000081a <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
80000840:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80000844:	c2 13       	add %d3,1
80000846:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000848:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000084c:	5f 36 ed ff 	jne %d6,%d3,80000826 <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
80000850:	1b f6 ff 2f 	addi %d2,%d6,-1
80000854:	06 62       	sh %d2,6
80000856:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
8000085a:	82 02       	mov %d2,0
8000085c:	74 22       	st.w [%a2],%d2
8000085e:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80000862:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
80000866:	91 00 00 28 	movh.a %a2,32768
8000086a:	d9 22 82 50 	lea %a2,[%a2]2370 <80000942 <__StartUpSoftware_Phase4>>
8000086e:	dc 02       	ji %a2
}
80000870:	00 90       	ret 

80000872 <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
80000872:	91 40 00 a7 	movh.a %sp,28676
80000876:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
8000087a:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
8000087e:	91 40 00 37 	movh.a %a3,28676
80000882:	91 40 00 27 	movh.a %a2,28676
80000886:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
8000088a:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
8000088e:	01 32 20 20 	sub.a %a2,%a2,%a3
80000892:	80 22       	mov.d %d2,%a2
80000894:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80000898:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
8000089a:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
8000089e:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
800008a0:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800008a2:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
800008a6:	df 06 2d 00 	jeq %d6,0,80000900 <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
800008aa:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800008ae:	8f 42 1f 50 	sh %d5,%d2,-12
800008b2:	26 75       	and %d5,%d7
800008b4:	a6 54       	or %d4,%d5
        if (k == 0U)
800008b6:	df 03 14 00 	jeq %d3,0,800008de <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
800008ba:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
800008bc:	5f 03 15 00 	jeq %d3,%d0,800008e6 <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
800008c0:	c2 13       	add %d3,1
800008c2:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800008c4:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800008c8:	5f 36 17 00 	jeq %d6,%d3,800008f6 <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800008cc:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
800008ce:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800008d2:	8f 42 1f 50 	sh %d5,%d2,-12
800008d6:	26 75       	and %d5,%d7
800008d8:	a6 54       	or %d4,%d5
        if (k == 0U)
800008da:	df 03 f0 ff 	jne %d3,0,800008ba <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800008de:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
800008e2:	5f 03 ef ff 	jne %d3,%d0,800008c0 <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800008e6:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800008ea:	c2 13       	add %d3,1
800008ec:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800008ee:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800008f2:	5f 36 ed ff 	jne %d6,%d3,800008cc <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
800008f6:	1b f6 ff 2f 	addi %d2,%d6,-1
800008fa:	06 62       	sh %d2,6
800008fc:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80000900:	82 02       	mov %d2,0
80000902:	74 22       	st.w [%a2],%d2
80000904:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80000908:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
8000090c:	91 00 00 28 	movh.a %a2,32768
80000910:	d9 22 98 40 	lea %a2,[%a2]2328 <80000918 <__StartUpSoftware_Phase5>>
80000914:	dc 02       	ji %a2
}
80000916:	00 90       	ret 

80000918 <__StartUpSoftware_Phase5>:
80000918:	91 00 00 28 	movh.a %a2,32768
8000091c:	d9 22 a4 40 	lea %a2,[%a2]2340 <80000924 <__StartUpSoftware_Phase6>>
80000920:	dc 02       	ji %a2
}
80000922:	00 90       	ret 

80000924 <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
80000924:	91 00 03 2a 	movh.a %a2,41008
80000928:	80 22       	mov.d %d2,%a2
8000092a:	1b 02 10 40 	addi %d4,%d2,256
8000092e:	91 20 88 4f 	movh.a %a4,63618
80000932:	6d 00 97 19 	call 80003c60 <Ifx_Ssw_startCore>
80000936:	91 00 00 28 	movh.a %a2,32768
8000093a:	d9 22 94 80 	lea %a2,[%a2]2580 <80000a14 <__Core0_start>>
8000093e:	dc 02       	ji %a2
}
80000940:	00 90       	ret 

80000942 <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
80000942:	91 30 00 4f 	movh.a %a4,61443
80000946:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
8000094a:	91 30 00 2f 	movh.a %a2,61443
8000094e:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
80000952:	37 04 6e 41 	extr.u %d4,%d4,2,14
80000956:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
8000095a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
8000095e:	8f f4 83 41 	xor %d4,%d4,63
80000962:	37 08 6e 81 	extr.u %d8,%d8,2,14
80000966:	6d 00 e1 18 	call 80003b28 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
8000096a:	8f f8 83 41 	xor %d4,%d8,63
8000096e:	6d 00 f4 18 	call 80003b56 <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
80000972:	91 00 00 48 	movh.a %a4,32768
80000976:	d9 44 3c a0 	lea %a4,[%a4]700 <800002bc <IfxScuCcu_defaultClockConfig>>
8000097a:	6d 00 65 03 	call 80001044 <IfxScuCcu_init>
8000097e:	df 12 03 80 	jne %d2,1,80000984 <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
80000982:	00 a0       	debug 
80000984:	91 00 00 28 	movh.a %a2,32768
80000988:	d9 22 98 40 	lea %a2,[%a2]2328 <80000918 <__StartUpSoftware_Phase5>>
8000098c:	dc 02       	ji %a2
}
8000098e:	00 90       	ret 

80000990 <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
80000990:	91 10 00 18 	movh.a %a1,32769
80000994:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80000998:	3b 00 98 20 	mov %d2,2432
8000099c:	cd 42 e0 0f 	mtcr $psw,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
800009a0:	91 30 00 2f 	movh.a %a2,61443
800009a4:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
800009a8:	7b d0 38 31 	movh %d3,5005
800009ac:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
800009ae:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
800009b2:	df 03 15 80 	jne %d3,0,800009dc <__StartUpSoftware+0x4c>
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
800009b6:	8f b2 1f 31 	and %d3,%d2,507
800009ba:	df 03 17 00 	jeq %d3,0,800009e8 <__StartUpSoftware+0x58>
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
800009be:	91 30 00 2f 	movh.a %a2,61443
800009c2:	0f 03 b0 21 	clz %d2,%d3
800009c6:	8b f2 01 21 	rsub %d2,%d2,31
800009ca:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
800009ce:	06 12       	sh %d2,1
800009d0:	57 03 62 22 	extr.u %d2,%d3,%d2,2
800009d4:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
        if (tempValue == IFX_SSW_APPLICATIONRESET)
800009d8:	df 22 0a 00 	jeq %d2,2,800009ec <__StartUpSoftware+0x5c>
800009dc:	91 00 00 28 	movh.a %a2,32768
800009e0:	d9 22 68 e0 	lea %a2,[%a2]1960 <800007a8 <__StartUpSoftware_Phase2>>
800009e4:	dc 02       	ji %a2
}
800009e6:	00 90       	ret 
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
800009e8:	ef 42 08 00 	jz.t %d2,20,800009f8 <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
800009ec:	91 00 00 28 	movh.a %a2,32768
800009f0:	d9 22 b2 10 	lea %a2,[%a2]2162 <80000872 <__StartUpSoftware_Phase3ApplicationResetPath>>
800009f4:	dc 02       	ji %a2
}
800009f6:	00 90       	ret 
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
800009f8:	91 10 88 2f 	movh.a %a2,63617
800009fc:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
80000a00:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
80000a04:	37 02 e2 20 	extr.u %d2,%d2,1,2
80000a08:	df 02 f2 ff 	jne %d2,0,800009ec <__StartUpSoftware+0x5c>
80000a0c:	1d ff e8 ff 	j 800009dc <__StartUpSoftware+0x4c>

80000a10 <hardware_init_hook>:
{}
80000a10:	00 90       	ret 

80000a12 <software_init_hook>:
{}
80000a12:	00 90       	ret 

80000a14 <__Core0_start>:
    password  = watchdog->CON0.B.PW;
80000a14:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
80000a18:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
80000a1c:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
80000a20:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
80000a24:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
80000a28:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
80000a2c:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000a30:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
80000a34:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
80000a38:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000a3c:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a40:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
80000a44:	6f 14 0b 00 	jz.t %d4,1,80000a5a <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a48:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a4a:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a4e:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a52:	a6 23       	or %d3,%d2
80000a54:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a58:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a5a:	91 30 00 2f 	movh.a %a2,61443
80000a5e:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000a62:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000a66:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
80000a6a:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a6c:	a6 24       	or %d4,%d2
80000a6e:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a72:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80000a74:	54 24       	ld.w %d4,[%a2]
80000a76:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80000a7a:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80000a7e:	cd 03 04 09 	mtcr $dcon0,%d3
80000a82:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
80000a86:	91 10 00 07 	movh.a %a0,28673
80000a8a:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
80000a8e:	91 10 00 88 	movh.a %a8,32769
80000a92:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
80000a96:	91 10 00 99 	movh.a %a9,36865
80000a9a:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
80000a9e:	91 00 00 38 	movh.a %a3,32768
80000aa2:	80 33       	mov.d %d3,%a3
80000aa4:	1b 03 10 30 	addi %d3,%d3,256
80000aa8:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
80000aac:	91 00 03 38 	movh.a %a3,32816
80000ab0:	80 33       	mov.d %d3,%a3
80000ab2:	1b 03 00 3e 	addi %d3,%d3,-8192
80000ab6:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
80000aba:	91 40 00 37 	movh.a %a3,28676
80000abe:	80 33       	mov.d %d3,%a3
80000ac0:	1b 03 b0 39 	addi %d3,%d3,-25856
80000ac4:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80000ac8:	54 23       	ld.w %d3,[%a2]
80000aca:	6f 13 09 00 	jz.t %d3,1,80000adc <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000ace:	54 23       	ld.w %d3,[%a2]
80000ad0:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000ad4:	a6 23       	or %d3,%d2
80000ad6:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000ada:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000adc:	91 30 00 cf 	movh.a %a12,61443
80000ae0:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000ae4:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000ae8:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000aec:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000aee:	a6 32       	or %d2,%d3
80000af0:	8f 32 40 21 	or %d2,%d2,3
80000af4:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000af6:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
80000af8:	54 c2       	ld.w %d2,[%a12]
80000afa:	6d 00 4d 18 	call 80003b94 <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
80000afe:	02 94       	mov %d4,%d9
80000b00:	6d 00 8c 18 	call 80003c18 <Ifx_Ssw_disableSafetyWatchdog>
	hardware_init_hook();
80000b04:	6d ff 86 ff 	call 80000a10 <hardware_init_hook>
	(void)Ifx_Ssw_doCppInit();
80000b08:	6d 00 1e 19 	call 80003d44 <Ifx_Ssw_doCppInit>
	software_init_hook();
80000b0c:	6d ff 83 ff 	call 80000a12 <software_init_hook>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
80000b10:	02 94       	mov %d4,%d9
80000b12:	6d 00 95 18 	call 80003c3c <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000b16:	02 84       	mov %d4,%d8
80000b18:	40 c4       	mov.aa %a4,%a12
80000b1a:	6d 00 5e 18 	call 80003bd6 <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
80000b1e:	91 00 00 28 	movh.a %a2,32768
80000b22:	d9 22 8a d0 	lea %a2,[%a2]2890 <80000b4a <core0_main>>
80000b26:	dc 02       	ji %a2

80000b28 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
80000b28:	fd 00 00 80 	loopu 80000b28 <x>
}
80000b2c:	00 90       	ret 

80000b2e <nopDelay>:
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include "MCMCAN.h"

void nopDelay(uint32 cycles) {
80000b2e:	40 ae       	mov.aa %a14,%sp
    cycles*=150000;
80000b30:	7b 20 00 20 	movh %d2,2
80000b34:	1b 02 9f 24 	addi %d2,%d2,18928
80000b38:	e2 24       	mul %d4,%d2
    for (uint32 i = 0; i < cycles; i++) {
80000b3a:	82 02       	mov %d2,0
80000b3c:	1d 00 04 00 	j 80000b44 <nopDelay+0x16>

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000b40:	00 00       	nop 
80000b42:	c2 12       	add %d2,1
80000b44:	3f 42 fe ff 	jlt.u %d2,%d4,80000b40 <nopDelay+0x12>
        __nop();
    }
}
80000b48:	00 90       	ret 

80000b4a <core0_main>:

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80000b4a:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
80000b4c:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80000b50:	6d 00 7f 07 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
80000b54:	02 24       	mov %d4,%d2
80000b56:	6d 00 ee 06 	call 80001932 <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80000b5a:	6d 00 8c 07 	call 80001a72 <IfxScuWdt_getSafetyWatchdogPassword>
80000b5e:	02 24       	mov %d4,%d2
80000b60:	6d 00 28 07 	call 800019b0 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80000b64:	91 00 00 c7 	movh.a %a12,28672
80000b68:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
80000b6c:	40 c4       	mov.aa %a4,%a12
80000b6e:	6d 00 79 09 	call 80001e60 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80000b72:	82 14       	mov %d4,1
80000b74:	40 c4       	mov.aa %a4,%a12
80000b76:	6d 00 33 09 	call 80001ddc <IfxCpu_waitEvent>
    
    initLeds();
80000b7a:	6d 00 eb 1c 	call 80004550 <initLeds>
    /* Application code: initialization of MCMCAN module, LEDs and the transmission of the CAN message */
    initMcmcan();
80000b7e:	6d 00 12 1b 	call 800041a2 <initMcmcan>
    initMcmcan1();
80000b82:	6d 00 a1 1b 	call 800042c4 <initMcmcan1>
    initMcmcan2();
80000b86:	6d 00 28 1c 	call 800043d6 <initMcmcan2>
    initLeds();
80000b8a:	6d 00 e3 1c 	call 80004550 <initLeds>
    //transmitCanMessage();

    while(1)
    {
        transmitCanMessage2();
80000b8e:	6d 00 ae 1c 	call 800044ea <transmitCanMessage2>
        nopDelay(5);
80000b92:	82 54       	mov %d4,5
80000b94:	6d ff cd ff 	call 80000b2e <nopDelay>
    while(1)
80000b98:	1d ff fb ff 	j 80000b8e <core0_main+0x44>

Disassembly of section .init:

80000b9c <_init>:
80000b9c:	6d 00 6e 00 	call 80000c78 <frame_dummy>
80000ba0:	6d 00 2e 22 	call 80004ffc <__do_global_ctors_aux>
80000ba4:	00 90       	ret 
	...

Disassembly of section .fini:

80000ba8 <_fini>:
80000ba8:	6d 00 36 00 	call 80000c14 <__do_global_dtors_aux>
80000bac:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

8030010c <__Core1_start>:
    password  = watchdog->CON0.B.PW;
8030010c:	91 30 00 2f 	movh.a %a2,61443
80300110:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80300114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80300118:	54 22       	ld.w %d2,[%a2]
8030011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8030011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
80300122:	91 40 00 a6 	movh.a %sp,24580
80300126:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
8030012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8030012e:	3b 00 98 30 	mov %d3,2432
80300132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80300136:	54 23       	ld.w %d3,[%a2]
80300138:	6f 13 c7 80 	jnz.t %d3,1,803002c6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030013e:	91 30 00 2f 	movh.a %a2,61443
80300142:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
80300146:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
8030014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8030014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300150:	a6 24       	or %d4,%d2
80300152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80300156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300158:	54 24       	ld.w %d4,[%a2]
8030015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8030015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80300162:	cd 03 04 09 	mtcr $dcon0,%d3
80300166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
8030016a:	91 00 03 38 	movh.a %a3,32816
8030016e:	80 33       	mov.d %d3,%a3
80300170:	1b 03 00 30 	addi %d3,%d3,0
80300174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
80300178:	91 00 06 38 	movh.a %a3,32864
8030017c:	80 33       	mov.d %d3,%a3
8030017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80300182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
80300186:	91 40 00 36 	movh.a %a3,24580
8030018a:	80 33       	mov.d %d3,%a3
8030018c:	1b 03 b0 39 	addi %d3,%d3,-25856
80300190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80300194:	54 23       	ld.w %d3,[%a2]
80300196:	6f 13 09 00 	jz.t %d3,1,803001a8 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030019a:	54 23       	ld.w %d3,[%a2]
8030019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803001a0:	a6 23       	or %d3,%d2
803001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803001a8:	91 30 00 2f 	movh.a %a2,61443
803001ac:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803001b0:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803001b8:	a6 32       	or %d2,%d3
803001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
803001c2:	91 10 00 07 	movh.a %a0,28673
803001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
803001ca:	91 10 00 18 	movh.a %a1,32769
803001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
803001d2:	91 10 00 88 	movh.a %a8,32769
803001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
803001da:	91 10 00 99 	movh.a %a9,36865
803001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803001e2:	91 40 00 36 	movh.a %a3,24580
803001e6:	91 40 00 26 	movh.a %a2,24580
803001ea:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
803001ee:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
803001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
803001f6:	80 22       	mov.d %d2,%a2
803001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
803001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80300202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80300204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8030020a:	df 06 2d 00 	jeq %d6,0,80300264 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300212:	8f 42 1f 50 	sh %d5,%d2,-12
80300216:	26 75       	and %d5,%d7
80300218:	a6 54       	or %d4,%d5
        if (k == 0U)
8030021a:	df 03 14 00 	jeq %d3,0,80300242 <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
8030021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80300220:	5f 03 15 00 	jeq %d3,%d0,8030024a <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80300224:	c2 13       	add %d3,1
80300226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030022c:	5f 36 17 00 	jeq %d6,%d3,8030025a <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300236:	8f 42 1f 50 	sh %d5,%d2,-12
8030023a:	26 75       	and %d5,%d7
8030023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8030023e:	df 03 f0 ff 	jne %d3,0,8030021e <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80300242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80300246:	5f 03 ef ff 	jne %d3,%d0,80300224 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8030024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8030024e:	c2 13       	add %d3,1
80300250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300256:	5f 36 ed ff 	jne %d6,%d3,80300230 <__Core1_start+0x124>
8030025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8030025e:	06 62       	sh %d2,6
80300260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80300264:	82 02       	mov %d2,0
80300266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8030026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80300270:	6d e8 16 1d 	call 80003c9c <Ifx_Ssw_getStmFrequency>
80300274:	02 24       	mov %d4,%d2
80300276:	6d e8 07 22 	call 80004684 <__extendsfdf2>
8030027a:	0b 23 10 48 	mov %e4,%d3,%d2
8030027e:	7b c0 b1 6e 	movh %d6,60188
80300282:	7b a0 f1 73 	movh %d7,16154
80300286:	1b d6 32 64 	addi %d6,%d6,17197
8030028a:	1b 27 6e 73 	addi %d7,%d7,14050
8030028e:	6d e8 63 23 	call 80004954 <__muldf3>
80300292:	0b 23 10 48 	mov %e4,%d3,%d2
80300296:	6d e8 db 21 	call 8000464c <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8030029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8030029e:	a2 83       	sub %d3,%d8
803002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8030029a <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
803002a4:	91 00 06 2a 	movh.a %a2,41056
803002a8:	80 22       	mov.d %d2,%a2
803002aa:	1b 02 10 40 	addi %d4,%d2,256
803002ae:	91 40 88 4f 	movh.a %a4,63620
803002b2:	6d e8 d7 1c 	call 80003c60 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
803002b6:	91 00 03 28 	movh.a %a2,32816
803002ba:	d9 22 1a b0 	lea %a2,[%a2]730 <803002da <core1_main>>
803002be:	dc 02       	ji %a2

803002c0 <x>:
    __asm("x: loopu\t x");
803002c0:	fd 00 00 80 	loopu 803002c0 <x>
}
803002c4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002c6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002c8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002ca:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002ce:	a6 23       	or %d3,%d2
803002d0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002d4:	74 23       	st.w [%a2],%d3
803002d6:	1d ff 34 ff 	j 8030013e <__Core1_start+0x32>

803002da <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
803002da:	40 ae       	mov.aa %a14,%sp
803002dc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803002e0:	6d e8 b7 0b 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
803002e4:	02 24       	mov %d4,%d2
803002e6:	6d e8 26 0b 	call 80001932 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803002ea:	91 00 00 c7 	movh.a %a12,28672
803002ee:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
803002f2:	40 c4       	mov.aa %a4,%a12
803002f4:	6d e8 b6 0d 	call 80001e60 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803002f8:	82 14       	mov %d4,1
803002fa:	40 c4       	mov.aa %a4,%a12
803002fc:	6d e8 70 0d 	call 80001ddc <IfxCpu_waitEvent>
    
    while(1)
80300300:	1d 00 00 00 	j 80300300 <core1_main+0x26>

Disassembly of section .CPU2.text:

8060010c <__Core2_start>:
    password  = watchdog->CON0.B.PW;
8060010c:	91 30 00 2f 	movh.a %a2,61443
80600110:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80600114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80600118:	54 22       	ld.w %d2,[%a2]
8060011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8060011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
80600122:	91 10 00 a5 	movh.a %sp,20481
80600126:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
8060012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8060012e:	3b 00 98 30 	mov %d3,2432
80600132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80600136:	54 23       	ld.w %d3,[%a2]
80600138:	6f 13 c7 80 	jnz.t %d3,1,806002c6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8060013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8060013e:	91 30 00 2f 	movh.a %a2,61443
80600142:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
80600146:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
8060014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8060014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80600150:	a6 24       	or %d4,%d2
80600152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80600156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80600158:	54 24       	ld.w %d4,[%a2]
8060015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8060015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80600162:	cd 03 04 09 	mtcr $dcon0,%d3
80600166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
8060016a:	91 00 06 38 	movh.a %a3,32864
8060016e:	80 33       	mov.d %d3,%a3
80600170:	1b 03 00 30 	addi %d3,%d3,0
80600174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
80600178:	91 00 09 38 	movh.a %a3,32912
8060017c:	80 33       	mov.d %d3,%a3
8060017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80600182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
80600186:	91 10 00 35 	movh.a %a3,20481
8060018a:	80 33       	mov.d %d3,%a3
8060018c:	1b 03 b0 35 	addi %d3,%d3,23296
80600190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80600194:	54 23       	ld.w %d3,[%a2]
80600196:	6f 13 09 00 	jz.t %d3,1,806001a8 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8060019a:	54 23       	ld.w %d3,[%a2]
8060019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806001a0:	a6 23       	or %d3,%d2
806001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806001a8:	91 30 00 2f 	movh.a %a2,61443
806001ac:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
806001b0:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
806001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806001b8:	a6 32       	or %d2,%d3
806001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
806001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
806001c2:	91 10 00 07 	movh.a %a0,28673
806001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
806001ca:	91 10 00 18 	movh.a %a1,32769
806001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
806001d2:	91 10 00 88 	movh.a %a8,32769
806001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
806001da:	91 10 00 99 	movh.a %a9,36865
806001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
806001e2:	91 10 00 35 	movh.a %a3,20481
806001e6:	91 10 00 25 	movh.a %a2,20481
806001ea:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
806001ee:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
806001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
806001f6:	80 22       	mov.d %d2,%a2
806001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
806001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
806001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80600202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80600204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8060020a:	df 06 2d 00 	jeq %d6,0,80600264 <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8060020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600212:	8f 42 1f 50 	sh %d5,%d2,-12
80600216:	26 75       	and %d5,%d7
80600218:	a6 54       	or %d4,%d5
        if (k == 0U)
8060021a:	df 03 14 00 	jeq %d3,0,80600242 <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
8060021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80600220:	5f 03 15 00 	jeq %d3,%d0,8060024a <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80600224:	c2 13       	add %d3,1
80600226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8060022c:	5f 36 17 00 	jeq %d6,%d3,8060025a <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80600232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600236:	8f 42 1f 50 	sh %d5,%d2,-12
8060023a:	26 75       	and %d5,%d7
8060023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8060023e:	df 03 f0 ff 	jne %d3,0,8060021e <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80600242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80600246:	5f 03 ef ff 	jne %d3,%d0,80600224 <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8060024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8060024e:	c2 13       	add %d3,1
80600250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80600256:	5f 36 ed ff 	jne %d6,%d3,80600230 <__Core2_start+0x124>
8060025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8060025e:	06 62       	sh %d2,6
80600260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80600264:	82 02       	mov %d2,0
80600266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80600268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8060026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80600270:	6d d0 16 1d 	call 80003c9c <Ifx_Ssw_getStmFrequency>
80600274:	02 24       	mov %d4,%d2
80600276:	6d d0 07 22 	call 80004684 <__extendsfdf2>
8060027a:	0b 23 10 48 	mov %e4,%d3,%d2
8060027e:	7b c0 b1 6e 	movh %d6,60188
80600282:	7b a0 f1 73 	movh %d7,16154
80600286:	1b d6 32 64 	addi %d6,%d6,17197
8060028a:	1b 27 6e 73 	addi %d7,%d7,14050
8060028e:	6d d0 63 23 	call 80004954 <__muldf3>
80600292:	0b 23 10 48 	mov %e4,%d3,%d2
80600296:	6d d0 db 21 	call 8000464c <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8060029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8060029e:	a2 83       	sub %d3,%d8
806002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8060029a <__Core2_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU3, (unsigned int)__START(3));       /*The status returned by function call is ignored */
806002a4:	91 00 09 2a 	movh.a %a2,41104
806002a8:	80 22       	mov.d %d2,%a2
806002aa:	1b 02 10 40 	addi %d4,%d2,256
806002ae:	91 60 88 4f 	movh.a %a4,63622
806002b2:	6d d0 d7 1c 	call 80003c60 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
806002b6:	91 00 06 28 	movh.a %a2,32864
806002ba:	d9 22 1a b0 	lea %a2,[%a2]730 <806002da <core2_main>>
806002be:	dc 02       	ji %a2

806002c0 <x>:
    __asm("x: loopu\t x");
806002c0:	fd 00 00 80 	loopu 806002c0 <x>
}
806002c4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806002c6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806002c8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806002ca:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806002ce:	a6 23       	or %d3,%d2
806002d0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806002d4:	74 23       	st.w [%a2],%d3
806002d6:	1d ff 34 ff 	j 8060013e <__Core2_start+0x32>

806002da <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
806002da:	40 ae       	mov.aa %a14,%sp
806002dc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
806002e0:	6d d0 b7 0b 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
806002e4:	02 24       	mov %d4,%d2
806002e6:	6d d0 26 0b 	call 80001932 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
806002ea:	91 00 00 c7 	movh.a %a12,28672
806002ee:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
806002f2:	40 c4       	mov.aa %a4,%a12
806002f4:	6d d0 b6 0d 	call 80001e60 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
806002f8:	82 14       	mov %d4,1
806002fa:	40 c4       	mov.aa %a4,%a12
806002fc:	6d d0 70 0d 	call 80001ddc <IfxCpu_waitEvent>
    
    while(1)
80600300:	1d 00 00 00 	j 80600300 <core2_main+0x26>

Disassembly of section .CPU3.text:

8090010c <__Core3_start>:
    password  = watchdog->CON0.B.PW;
8090010c:	91 30 00 2f 	movh.a %a2,61443
80900110:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80900114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80900118:	54 22       	ld.w %d2,[%a2]
8090011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8090011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(3));
80900122:	91 10 00 a4 	movh.a %sp,16385
80900126:	d9 aa 40 85 	lea %sp,[%sp]22016 <40015600 <__USTACK3>>
    __asm__ volatile ("dsync" : : : "memory");
8090012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8090012e:	3b 00 98 30 	mov %d3,2432
80900132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80900136:	54 23       	ld.w %d3,[%a2]
80900138:	6f 13 be 80 	jnz.t %d3,1,809002b4 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8090013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8090013e:	91 30 00 2f 	movh.a %a2,61443
80900142:	19 24 30 96 	ld.w %d4,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
80900146:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
8090014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8090014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80900150:	a6 24       	or %d4,%d2
80900152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80900156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80900158:	54 24       	ld.w %d4,[%a2]
8090015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8090015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80900162:	cd 03 04 09 	mtcr $dcon0,%d3
80900166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(3));
8090016a:	91 00 09 38 	movh.a %a3,32912
8090016e:	80 33       	mov.d %d3,%a3
80900170:	1b 03 00 30 	addi %d3,%d3,0
80900174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(3));
80900178:	91 00 0a 38 	movh.a %a3,32928
8090017c:	80 33       	mov.d %d3,%a3
8090017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80900182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(3));
80900186:	91 10 00 34 	movh.a %a3,16385
8090018a:	80 33       	mov.d %d3,%a3
8090018c:	1b 03 b0 35 	addi %d3,%d3,23296
80900190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80900194:	54 23       	ld.w %d3,[%a2]
80900196:	6f 13 09 00 	jz.t %d3,1,809001a8 <__Core3_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8090019a:	54 23       	ld.w %d3,[%a2]
8090019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809001a0:	a6 23       	or %d3,%d2
809001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809001a8:	91 30 00 2f 	movh.a %a2,61443
809001ac:	19 23 30 96 	ld.w %d3,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
809001b0:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
809001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809001b8:	a6 32       	or %d2,%d3
809001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
809001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(3));
809001c2:	91 10 00 07 	movh.a %a0,28673
809001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(3));
809001ca:	91 10 00 18 	movh.a %a1,32769
809001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(3));
809001d2:	91 10 00 88 	movh.a %a8,32769
809001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(3));
809001da:	91 10 00 99 	movh.a %a9,36865
809001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
809001e2:	91 10 00 34 	movh.a %a3,16385
809001e6:	91 10 00 24 	movh.a %a2,16385
809001ea:	d9 33 c0 05 	lea %a3,[%a3]23552 <40015c00 <__CSA3>>
809001ee:	d9 22 c0 07 	lea %a2,[%a2]31744 <40017c00 <__CSA3_END>>
809001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
809001f6:	80 22       	mov.d %d2,%a2
809001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
809001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
809001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80900202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80900204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8090020a:	df 06 2d 00 	jeq %d6,0,80900264 <__Core3_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8090020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900212:	8f 42 1f 50 	sh %d5,%d2,-12
80900216:	26 75       	and %d5,%d7
80900218:	a6 54       	or %d4,%d5
        if (k == 0U)
8090021a:	df 03 14 00 	jeq %d3,0,80900242 <__Core3_start+0x136>
            *prvCsa = nxt_cxi_val;
8090021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80900220:	5f 03 15 00 	jeq %d3,%d0,8090024a <__Core3_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80900224:	c2 13       	add %d3,1
80900226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8090022c:	5f 36 17 00 	jeq %d6,%d3,8090025a <__Core3_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80900232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900236:	8f 42 1f 50 	sh %d5,%d2,-12
8090023a:	26 75       	and %d5,%d7
8090023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8090023e:	df 03 f0 ff 	jne %d3,0,8090021e <__Core3_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80900242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80900246:	5f 03 ef ff 	jne %d3,%d0,80900224 <__Core3_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8090024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8090024e:	c2 13       	add %d3,1
80900250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80900256:	5f 36 ed ff 	jne %d6,%d3,80900230 <__Core3_start+0x124>
8090025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8090025e:	06 62       	sh %d2,6
80900260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80900264:	82 02       	mov %d2,0
80900266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80900268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8090026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80900270:	6d b8 16 1d 	call 80003c9c <Ifx_Ssw_getStmFrequency>
80900274:	02 24       	mov %d4,%d2
80900276:	6d b8 07 22 	call 80004684 <__extendsfdf2>
8090027a:	0b 23 10 48 	mov %e4,%d3,%d2
8090027e:	7b c0 b1 6e 	movh %d6,60188
80900282:	7b a0 f1 73 	movh %d7,16154
80900286:	1b d6 32 64 	addi %d6,%d6,17197
8090028a:	1b 27 6e 73 	addi %d7,%d7,14050
8090028e:	6d b8 63 23 	call 80004954 <__muldf3>
80900292:	0b 23 10 48 	mov %e4,%d3,%d2
80900296:	6d b8 db 21 	call 8000464c <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8090029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8090029e:	a2 83       	sub %d3,%d8
809002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8090029a <__Core3_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
809002a4:	91 00 09 28 	movh.a %a2,32912
809002a8:	d9 22 08 b0 	lea %a2,[%a2]712 <809002c8 <core3_main>>
809002ac:	dc 02       	ji %a2

809002ae <x>:
    __asm("x: loopu\t x");
809002ae:	fd 00 00 80 	loopu 809002ae <x>
}
809002b2:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809002b4:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809002b6:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809002b8:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809002bc:	a6 23       	or %d3,%d2
809002be:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809002c2:	74 23       	st.w [%a2],%d3
809002c4:	1d ff 3d ff 	j 8090013e <__Core3_start+0x32>

809002c8 <core3_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core3_main(void)
{
809002c8:	40 ae       	mov.aa %a14,%sp
809002ca:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG3 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
809002ce:	6d b8 c0 0b 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
809002d2:	02 24       	mov %d4,%d2
809002d4:	6d b8 2f 0b 	call 80001932 <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
809002d8:	91 00 00 c7 	movh.a %a12,28672
809002dc:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
809002e0:	40 c4       	mov.aa %a4,%a12
809002e2:	6d b8 bf 0d 	call 80001e60 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
809002e6:	82 14       	mov %d4,1
809002e8:	40 c4       	mov.aa %a4,%a12
809002ea:	6d b8 79 0d 	call 80001ddc <IfxCpu_waitEvent>
    
    while(1)
809002ee:	1d 00 00 00 	j 809002ee <core3_main+0x26>

Disassembly of section .text:

80000bb0 <deregister_tm_clones>:
80000bb0:	7b 00 00 27 	movh %d2,28672
80000bb4:	1b 02 01 20 	addi %d2,%d2,16
80000bb8:	91 00 00 47 	movh.a %a4,28672
80000bbc:	60 22       	mov.a %a2,%d2
80000bbe:	d9 44 10 00 	lea %a4,[%a4]16 <70000010 <__TMC_END__>>
80000bc2:	7d 42 0a 00 	jeq.a %a2,%a4,80000bd6 <deregister_tm_clones+0x26>
80000bc6:	91 00 00 20 	movh.a %a2,0
80000bca:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000bce:	bd 02 04 00 	jz.a %a2,80000bd6 <deregister_tm_clones+0x26>
80000bd2:	2d 02 00 00 	calli %a2
80000bd6:	00 90       	ret 

80000bd8 <register_tm_clones>:
80000bd8:	7b 00 00 27 	movh %d2,28672
80000bdc:	1b 02 01 20 	addi %d2,%d2,16
80000be0:	91 00 00 47 	movh.a %a4,28672
80000be4:	60 22       	mov.a %a2,%d2
80000be6:	d9 44 10 00 	lea %a4,[%a4]16 <70000010 <__TMC_END__>>
80000bea:	01 42 20 20 	sub.a %a2,%a2,%a4
80000bee:	80 22       	mov.d %d2,%a2
80000bf0:	8f e2 3f 30 	sha %d3,%d2,-2
80000bf4:	8f 12 1e 20 	sh %d2,%d2,-31
80000bf8:	42 32       	add %d2,%d3
80000bfa:	8f f2 3f 40 	sha %d4,%d2,-1
80000bfe:	df 04 0a 00 	jeq %d4,0,80000c12 <register_tm_clones+0x3a>
80000c02:	91 00 00 20 	movh.a %a2,0
80000c06:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000c0a:	bd 02 04 00 	jz.a %a2,80000c12 <register_tm_clones+0x3a>
80000c0e:	2d 02 00 00 	calli %a2
80000c12:	00 90       	ret 

80000c14 <__do_global_dtors_aux>:
80000c14:	91 00 00 e7 	movh.a %a14,28672
80000c18:	39 e2 10 00 	ld.bu %d2,[%a14]16 <70000010 <__TMC_END__>>
80000c1c:	df 02 2d 80 	jne %d2,0,80000c76 <__do_global_dtors_aux+0x62>
80000c20:	91 00 00 38 	movh.a %a3,32768
80000c24:	91 00 00 28 	movh.a %a2,32768
80000c28:	d9 33 08 15 	lea %a3,[%a3]20552 <80005048 <__DTOR_END__>>
80000c2c:	d9 22 3c 05 	lea %a2,[%a2]20540 <8000503c <__DTOR_LIST__>>
80000c30:	01 23 20 20 	sub.a %a2,%a3,%a2
80000c34:	80 22       	mov.d %d2,%a2
80000c36:	86 e2       	sha %d2,-2
80000c38:	1b f2 ff 8f 	addi %d8,%d2,-1
80000c3c:	91 00 00 c7 	movh.a %a12,28672
80000c40:	7b 00 00 28 	movh %d2,32768
80000c44:	1b c2 03 25 	addi %d2,%d2,20540
80000c48:	60 2d       	mov.a %a13,%d2
80000c4a:	19 c2 14 00 	ld.w %d2,[%a12]20 <70000014 <dtor_idx.0>>
80000c4e:	7f 82 0f 80 	jge.u %d2,%d8,80000c6c <__do_global_dtors_aux+0x58>
80000c52:	d9 cc 14 00 	lea %a12,[%a12]20 <70000014 <dtor_idx.0>>
80000c56:	c2 12       	add %d2,1
80000c58:	74 c2       	st.w [%a12],%d2
80000c5a:	06 22       	sh %d2,2
80000c5c:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000c60:	d4 22       	ld.a %a2,[%a2]
80000c62:	2d 02 00 00 	calli %a2
80000c66:	54 c2       	ld.w %d2,[%a12]
80000c68:	3f 82 f7 ff 	jlt.u %d2,%d8,80000c56 <__do_global_dtors_aux+0x42>
80000c6c:	6d ff a2 ff 	call 80000bb0 <deregister_tm_clones>
80000c70:	82 12       	mov %d2,1
80000c72:	e9 e2 10 00 	st.b [%a14]16 <70000010 <__TMC_END__>>,%d2
80000c76:	00 90       	ret 

80000c78 <frame_dummy>:
80000c78:	6d ff b0 ff 	call 80000bd8 <register_tm_clones>
80000c7c:	00 90       	ret 

80000c7e <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
80000c7e:	40 ae       	mov.aa %a14,%sp
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
80000c80:	8f 24 00 20 	sh %d2,%d4,2
80000c84:	91 00 00 28 	movh.a %a2,32768
80000c88:	d9 22 24 c0 	lea %a2,[%a2]804 <80000324 <IfxScuCcu_MA_percent>>
80000c8c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000c90:	54 22       	ld.w %d2,[%a2]

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000c92:	91 30 00 2f 	movh.a %a2,61443
80000c96:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000c9a:	54 23       	ld.w %d3,[%a2]
80000c9c:	8f 23 1e 30 	sh %d3,%d3,-30
80000ca0:	df 03 15 00 	jeq %d3,0,80000cca <IfxScuCcu_calRGainParameters+0x4c>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000ca4:	54 23       	ld.w %d3,[%a2]
80000ca6:	8f 23 1e 30 	sh %d3,%d3,-30
80000caa:	df 13 47 00 	jeq %d3,1,80000d38 <IfxScuCcu_calRGainParameters+0xba>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000cae:	54 23       	ld.w %d3,[%a2]
80000cb0:	8f 23 1e 30 	sh %d3,%d3,-30
80000cb4:	df 23 05 00 	jeq %d3,2,80000cbe <IfxScuCcu_calRGainParameters+0x40>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
80000cb8:	82 04       	mov %d4,0
80000cba:	1d 00 0c 00 	j 80000cd2 <IfxScuCcu_calRGainParameters+0x54>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000cbe:	7b 90 b9 44 	movh %d4,19353
80000cc2:	1b 04 68 49 	addi %d4,%d4,-27008
80000cc6:	1d 00 06 00 	j 80000cd2 <IfxScuCcu_calRGainParameters+0x54>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000cca:	7b f0 cb 44 	movh %d4,19647
80000cce:	1b 04 c2 4b 	addi %d4,%d4,-17376
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);

    Ifx_SCU *scu           = &MODULE_SCU;
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
80000cd2:	91 30 00 2f 	movh.a %a2,61443
80000cd6:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000cda:	d9 23 18 00 	lea %a3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000cde:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000ce2:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000ce6:	c2 13       	add %d3,1
80000ce8:	4b 03 41 31 	itof %d3,%d3
80000cec:	4b 43 41 40 	mul.f %d4,%d3,%d4
80000cf0:	54 33       	ld.w %d3,[%a3]
80000cf2:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000cf6:	c2 13       	add %d3,1
80000cf8:	4b 03 41 31 	itof %d3,%d3
80000cfc:	4b 34 51 40 	div.f %d4,%d4,%d3

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
80000d00:	7b 80 2c 34 	movh %d3,17096
80000d04:	4b 32 51 30 	div.f %d3,%d2,%d3
80000d08:	6b 03 21 33 	add.f %d3,%d3,%d3
80000d0c:	7b c0 a5 24 	movh %d2,19036
80000d10:	1b 02 a0 2b 	addi %d2,%d2,-17920
80000d14:	4b 24 51 20 	div.f %d2,%d4,%d2
80000d18:	4b 23 41 20 	mul.f %d2,%d3,%d2
80000d1c:	74 42       	st.w [%a4],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
80000d1e:	7b 00 20 34 	movh %d3,16896
80000d22:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000d26:	7b 00 f0 33 	movh %d3,16128
80000d2a:	6b 03 21 22 	add.f %d2,%d2,%d3
80000d2e:	4b 02 71 21 	ftouz %d2,%d2
80000d32:	f9 42 04 00 	st.h [%a4]4,%d2
}
80000d36:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000d38:	7b 90 b9 44 	movh %d4,19353
80000d3c:	1b 04 68 49 	addi %d4,%d4,-27008
80000d40:	1d ff c9 ff 	j 80000cd2 <IfxScuCcu_calRGainParameters+0x54>

80000d44 <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
80000d44:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000d46:	91 30 00 2f 	movh.a %a2,61443
80000d4a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000d4e:	54 22       	ld.w %d2,[%a2]
80000d50:	8f 22 1e 20 	sh %d2,%d2,-30
80000d54:	df 02 15 00 	jeq %d2,0,80000d7e <IfxScuCcu_getPerPllFrequency1+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000d58:	54 22       	ld.w %d2,[%a2]
80000d5a:	8f 22 1e 20 	sh %d2,%d2,-30
80000d5e:	df 12 32 00 	jeq %d2,1,80000dc2 <IfxScuCcu_getPerPllFrequency1+0x7e>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000d62:	54 22       	ld.w %d2,[%a2]
80000d64:	8f 22 1e 20 	sh %d2,%d2,-30
80000d68:	df 22 05 00 	jeq %d2,2,80000d72 <IfxScuCcu_getPerPllFrequency1+0x2e>
        freq = 0.0f;
80000d6c:	82 04       	mov %d4,0
80000d6e:	1d 00 0c 00 	j 80000d86 <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000d72:	7b 90 b9 44 	movh %d4,19353
80000d76:	1b 04 68 49 	addi %d4,%d4,-27008
80000d7a:	1d 00 06 00 	j 80000d86 <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000d7e:	7b f0 cb 44 	movh %d4,19647
80000d82:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
80000d86:	91 30 00 2f 	movh.a %a2,61443
80000d8a:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000d8e:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d92:	19 22 28 00 	ld.w %d2,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d96:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000d9a:	c2 12       	add %d2,1
80000d9c:	4b 02 41 21 	itof %d2,%d2
80000da0:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000da4:	54 32       	ld.w %d2,[%a3]
80000da6:	37 02 63 2c 	extr.u %d2,%d2,24,3
80000daa:	19 23 2c 00 	ld.w %d3,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000dae:	8f 73 00 31 	and %d3,%d3,7
80000db2:	c2 13       	add %d3,1
80000db4:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000db8:	4b 02 41 21 	itof %d2,%d2

    return pllFrequency1;
}
80000dbc:	4b 24 51 20 	div.f %d2,%d4,%d2
80000dc0:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000dc2:	7b 90 b9 44 	movh %d4,19353
80000dc6:	1b 04 68 49 	addi %d4,%d4,-27008
80000dca:	1d ff de ff 	j 80000d86 <IfxScuCcu_getPerPllFrequency1+0x42>

80000dce <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
80000dce:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000dd0:	91 30 00 2f 	movh.a %a2,61443
80000dd4:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000dd8:	54 22       	ld.w %d2,[%a2]
80000dda:	8f 22 1e 20 	sh %d2,%d2,-30
80000dde:	df 02 15 00 	jeq %d2,0,80000e08 <IfxScuCcu_getPerPllFrequency2+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000de2:	54 22       	ld.w %d2,[%a2]
80000de4:	8f 22 1e 20 	sh %d2,%d2,-30
80000de8:	df 12 40 00 	jeq %d2,1,80000e68 <IfxScuCcu_getPerPllFrequency2+0x9a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000dec:	54 22       	ld.w %d2,[%a2]
80000dee:	8f 22 1e 20 	sh %d2,%d2,-30
80000df2:	df 22 05 00 	jeq %d2,2,80000dfc <IfxScuCcu_getPerPllFrequency2+0x2e>
        freq = 0.0f;
80000df6:	82 02       	mov %d2,0
80000df8:	1d 00 0c 00 	j 80000e10 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000dfc:	7b 90 b9 24 	movh %d2,19353
80000e00:	1b 02 68 29 	addi %d2,%d2,-27008
80000e04:	1d 00 06 00 	j 80000e10 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000e08:	7b f0 cb 24 	movh %d2,19647
80000e0c:	1b 02 c2 2b 	addi %d2,%d2,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();

    if (!(scu->PERPLLCON0.B.DIVBY))
80000e10:	91 30 00 2f 	movh.a %a2,61443
80000e14:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000e18:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e1c:	6f 03 2c 80 	jnz.t %d3,0,80000e74 <IfxScuCcu_getPerPllFrequency2+0xa6>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
80000e20:	91 30 00 2f 	movh.a %a2,61443
80000e24:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000e28:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e2c:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e30:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000e34:	c2 13       	add %d3,1
80000e36:	4b 03 41 31 	itof %d3,%d3
80000e3a:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000e3e:	54 34       	ld.w %d4,[%a3]
80000e40:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000e44:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000e48:	37 02 63 24 	extr.u %d2,%d2,8,3
80000e4c:	c2 12       	add %d2,1
80000e4e:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000e52:	4b 02 41 21 	itof %d2,%d2
80000e56:	7b d0 fc 43 	movh %d4,16333
80000e5a:	1b d4 cc 4c 	addi %d4,%d4,-13107
80000e5e:	4b 42 41 20 	mul.f %d2,%d2,%d4
80000e62:	4b 23 51 20 	div.f %d2,%d3,%d2
80000e66:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000e68:	7b 90 b9 24 	movh %d2,19353
80000e6c:	1b 02 68 29 	addi %d2,%d2,-27008
80000e70:	1d ff d0 ff 	j 80000e10 <IfxScuCcu_getPerPllFrequency2+0x42>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
80000e74:	91 30 00 2f 	movh.a %a2,61443
80000e78:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000e7c:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e80:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e84:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000e88:	c2 13       	add %d3,1
80000e8a:	4b 03 41 31 	itof %d3,%d3
80000e8e:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000e92:	54 34       	ld.w %d4,[%a3]
80000e94:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000e98:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000e9c:	37 02 63 24 	extr.u %d2,%d2,8,3
80000ea0:	c2 12       	add %d2,1
80000ea2:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000ea6:	06 12       	sh %d2,1
80000ea8:	4b 02 41 21 	itof %d2,%d2
80000eac:	4b 23 51 20 	div.f %d2,%d3,%d2
    }

    return pllFrequency2;
}
80000eb0:	00 90       	ret 

80000eb2 <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
80000eb2:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000eb4:	91 30 00 2f 	movh.a %a2,61443
80000eb8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000ebc:	54 22       	ld.w %d2,[%a2]
80000ebe:	8f 22 1e 20 	sh %d2,%d2,-30
80000ec2:	df 02 15 00 	jeq %d2,0,80000eec <IfxScuCcu_getPllFrequency+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000ec6:	54 22       	ld.w %d2,[%a2]
80000ec8:	8f 22 1e 20 	sh %d2,%d2,-30
80000ecc:	df 12 31 00 	jeq %d2,1,80000f2e <IfxScuCcu_getPllFrequency+0x7c>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000ed0:	54 22       	ld.w %d2,[%a2]
80000ed2:	8f 22 1e 20 	sh %d2,%d2,-30
80000ed6:	df 22 05 00 	jeq %d2,2,80000ee0 <IfxScuCcu_getPllFrequency+0x2e>
        freq = 0.0f;
80000eda:	82 04       	mov %d4,0
80000edc:	1d 00 0c 00 	j 80000ef4 <IfxScuCcu_getPllFrequency+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000ee0:	7b 90 b9 44 	movh %d4,19353
80000ee4:	1b 04 68 49 	addi %d4,%d4,-27008
80000ee8:	1d 00 06 00 	j 80000ef4 <IfxScuCcu_getPllFrequency+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000eec:	7b f0 cb 44 	movh %d4,19647
80000ef0:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
80000ef4:	91 30 00 2f 	movh.a %a2,61443
80000ef8:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000efc:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000f00:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000f04:	c2 12       	add %d2,1
80000f06:	4b 02 41 21 	itof %d2,%d2
80000f0a:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000f0e:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <bmhd_3_copy+0x40c2ea1c>>
80000f12:	8f 72 00 21 	and %d2,%d2,7
80000f16:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000f1a:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000f1e:	c2 13       	add %d3,1
80000f20:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000f24:	4b 02 41 21 	itof %d2,%d2
    return freq;
}
80000f28:	4b 24 51 20 	div.f %d2,%d4,%d2
80000f2c:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000f2e:	7b 90 b9 44 	movh %d4,19353
80000f32:	1b 04 68 49 	addi %d4,%d4,-27008
80000f36:	1d ff df ff 	j 80000ef4 <IfxScuCcu_getPllFrequency+0x42>

80000f3a <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
80000f3a:	40 ae       	mov.aa %a14,%sp
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80000f3c:	91 30 00 2f 	movh.a %a2,61443
80000f40:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000f44:	54 22       	ld.w %d2,[%a2]
80000f46:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000f4a:	df 02 20 00 	jeq %d2,0,80000f8a <IfxScuCcu_getSourceFrequency+0x50>
80000f4e:	df 12 23 80 	jne %d2,1,80000f94 <IfxScuCcu_getSourceFrequency+0x5a>
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
80000f52:	df 14 0b 00 	jeq %d4,1,80000f68 <IfxScuCcu_getSourceFrequency+0x2e>
80000f56:	df 24 17 00 	jeq %d4,2,80000f84 <IfxScuCcu_getSourceFrequency+0x4a>
80000f5a:	df 04 04 00 	jeq %d4,0,80000f62 <IfxScuCcu_getSourceFrequency+0x28>
80000f5e:	82 02       	mov %d2,0
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80000f60:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPllFrequency();
80000f62:	6d ff a8 ff 	call 80000eb2 <IfxScuCcu_getPllFrequency>
            break;
80000f66:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
80000f68:	6d ff ee fe 	call 80000d44 <IfxScuCcu_getPerPllFrequency1>
            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
80000f6c:	91 30 00 2f 	movh.a %a2,61443
80000f70:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000f74:	54 23       	ld.w %d3,[%a2]
80000f76:	6f 73 f5 ff 	jnz.t %d3,7,80000f60 <IfxScuCcu_getSourceFrequency+0x26>
                sourcefreq = sourcefreq / 2.0f;
80000f7a:	7b 00 f0 33 	movh %d3,16128
80000f7e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000f82:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
80000f84:	6d ff 25 ff 	call 80000dce <IfxScuCcu_getPerPllFrequency2>
            break;
80000f88:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80000f8a:	7b f0 cb 24 	movh %d2,19647
80000f8e:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000f92:	00 90       	ret 
        sourcefreq = 0;
80000f94:	82 02       	mov %d2,0
80000f96:	00 90       	ret 

80000f98 <IfxScuCcu_getMcanFrequency>:
{
80000f98:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON1.B.CLKSELMCAN)
80000f9a:	91 30 00 2f 	movh.a %a2,61443
80000f9e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000fa2:	54 22       	ld.w %d2,[%a2]
80000fa4:	37 02 62 22 	extr.u %d2,%d2,4,2
80000fa8:	df 12 09 00 	jeq %d2,1,80000fba <IfxScuCcu_getMcanFrequency+0x22>
80000fac:	df 22 1c 80 	jne %d2,2,80000fe4 <IfxScuCcu_getMcanFrequency+0x4c>
        mcanFreq = IfxScuCcu_getOsc0Frequency();
80000fb0:	7b 90 b9 24 	movh %d2,19353
80000fb4:	1b 02 68 29 	addi %d2,%d2,-27008
80000fb8:	00 90       	ret 
        mcanSource = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
80000fba:	82 14       	mov %d4,1
80000fbc:	6d ff bf ff 	call 80000f3a <IfxScuCcu_getSourceFrequency>
80000fc0:	02 24       	mov %d4,%d2
        if (SCU_CCUCON1.B.MCANDIV)
80000fc2:	91 30 00 2f 	movh.a %a2,61443
80000fc6:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000fca:	54 23       	ld.w %d3,[%a2]
80000fcc:	8f f3 00 31 	and %d3,%d3,15
80000fd0:	df 03 0c 00 	jeq %d3,0,80000fe8 <IfxScuCcu_getMcanFrequency+0x50>
            mcanFreq = mcanSource / SCU_CCUCON1.B.MCANDIV;
80000fd4:	54 22       	ld.w %d2,[%a2]
80000fd6:	8f f2 00 21 	and %d2,%d2,15
80000fda:	4b 02 41 21 	itof %d2,%d2
80000fde:	4b 24 51 20 	div.f %d2,%d4,%d2
80000fe2:	00 90       	ret 
    switch (SCU_CCUCON1.B.CLKSELMCAN)
80000fe4:	82 02       	mov %d2,0
80000fe6:	00 90       	ret 
    float32 mcanFreq   = 0;
80000fe8:	82 02       	mov %d2,0
}
80000fea:	00 90       	ret 

80000fec <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
80000fec:	40 ae       	mov.aa %a14,%sp
80000fee:	20 08       	sub.a %sp,8
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
80000ff0:	54 42       	ld.w %d2,[%a4]
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
80000ff2:	19 44 04 00 	ld.w %d4,[%a4]4

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
80000ff6:	df 12 03 00 	jeq %d2,1,80000ffc <IfxScuCcu_modulation_init+0x10>
        SCU_SYSPLLCON0.U   = syspllcon0.U;

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
}
80000ffa:	00 90       	ret 
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
80000ffc:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80001000:	6d ff 3f fe 	call 80000c7e <IfxScuCcu_calRGainParameters>
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80001004:	6d 00 37 05 	call 80001a72 <IfxScuWdt_getSafetyWatchdogPassword>
80001008:	02 28       	mov %d8,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000100a:	02 24       	mov %d4,%d2
8000100c:	6d 00 6b 04 	call 800018e2 <IfxScuWdt_clearSafetyEndinit>
        syspllcon2.U        = SCU_SYSPLLCON2.U;
80001010:	91 30 00 2f 	movh.a %a2,61443
80001014:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <bmhd_3_copy+0x40c34a20>>
80001018:	54 22       	ld.w %d2,[%a2]
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
8000101a:	b9 e3 fc ff 	ld.hu %d3,[%a14]-4 <f0036020 <bmhd_3_copy+0x40c34a20>>
8000101e:	3b 00 40 4f 	mov %d4,-3072
80001022:	a6 43       	or %d3,%d4
80001024:	37 32 10 20 	insert %d2,%d2,%d3,0,16
        SCU_SYSPLLCON2.U    = syspllcon2.U;
80001028:	74 22       	st.w [%a2],%d2
        syspllcon0.U       = SCU_SYSPLLCON0.U;
8000102a:	91 30 00 2f 	movh.a %a2,61443
8000102e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001032:	54 22       	ld.w %d2,[%a2]
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
80001034:	b7 12 01 21 	insert %d2,%d2,1,2,1
        SCU_SYSPLLCON0.U   = syspllcon0.U;
80001038:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000103a:	02 84       	mov %d4,%d8
8000103c:	6d 00 4b 05 	call 80001ad2 <IfxScuWdt_setSafetyEndinit>
}
80001040:	1d ff dd ff 	j 80000ffa <IfxScuCcu_modulation_init+0xe>

80001044 <IfxScuCcu_init>:
{
80001044:	40 ae       	mov.aa %a14,%sp
80001046:	40 4c       	mov.aa %a12,%a4
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80001048:	91 30 00 2f 	movh.a %a2,61443
8000104c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001050:	54 22       	ld.w %d2,[%a2]
80001052:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80001056:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
8000105a:	54 23       	ld.w %d3,[%a2]
8000105c:	6f 13 0b 00 	jz.t %d3,1,80001072 <IfxScuCcu_init+0x2e>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001060:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001064:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001068:	54 23       	ld.w %d3,[%a2]
8000106a:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000106e:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001070:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001072:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001076:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000107a:	91 30 00 2f 	movh.a %a2,61443
8000107e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001082:	54 22       	ld.w %d2,[%a2]
80001084:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001088:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000108a:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000108c:	91 30 00 2f 	movh.a %a2,61443
80001090:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001094:	54 22       	ld.w %d2,[%a2]
80001096:	6f 02 fb ff 	jnz.t %d2,0,8000108c <IfxScuCcu_init+0x48>
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000109a:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
8000109e:	91 30 00 2f 	movh.a %a2,61443
800010a2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800010a6:	54 23       	ld.w %d3,[%a2]
800010a8:	ff 03 08 00 	jge %d3,0,800010b8 <IfxScuCcu_init+0x74>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800010ac:	c2 f2       	add %d2,-1
800010ae:	ff 12 f8 7f 	jge %d2,1,8000109e <IfxScuCcu_init+0x5a>
800010b2:	82 19       	mov %d9,1
800010b4:	1d 00 03 00 	j 800010ba <IfxScuCcu_init+0x76>
    uint8                                initError = 0;
800010b8:	82 09       	mov %d9,0
        scuCcucon0.U        = SCU_CCUCON0.U;
800010ba:	91 30 00 2f 	movh.a %a2,61443
800010be:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800010c2:	54 22       	ld.w %d2,[%a2]
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
800010c4:	b7 02 02 2e 	insert %d2,%d2,0,28,2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
800010c8:	b7 12 01 2f 	insert %d2,%d2,1,30,1
        SCU_CCUCON0.U       = scuCcucon0.U;
800010cc:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800010ce:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
800010d2:	91 30 00 2f 	movh.a %a2,61443
800010d6:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800010da:	54 23       	ld.w %d3,[%a2]
800010dc:	ff 03 06 00 	jge %d3,0,800010e8 <IfxScuCcu_init+0xa4>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800010e0:	c2 f2       	add %d2,-1
800010e2:	ff 12 f8 7f 	jge %d2,1,800010d2 <IfxScuCcu_init+0x8e>
800010e6:	82 19       	mov %d9,1
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
800010e8:	91 30 00 2f 	movh.a %a2,61443
800010ec:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
800010f0:	3b c0 0b 20 	mov %d2,188
800010f4:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
800010f6:	91 30 00 3f 	movh.a %a3,61443
800010fa:	d9 33 a0 56 	lea %a3,[%a3]26976 <f0036960 <bmhd_3_copy+0x40c35360>>
800010fe:	54 32       	ld.w %d2,[%a3]
80001100:	8f d2 c1 21 	andn %d2,%d2,29
80001104:	74 32       	st.w [%a3],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
80001106:	91 30 00 3f 	movh.a %a3,61443
8000110a:	d9 33 a4 56 	lea %a3,[%a3]26980 <f0036964 <bmhd_3_copy+0x40c35364>>
8000110e:	54 32       	ld.w %d2,[%a3]
80001110:	8f d2 c1 21 	andn %d2,%d2,29
80001114:	74 32       	st.w [%a3],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
80001116:	91 30 00 3f 	movh.a %a3,61443
8000111a:	d9 33 a8 56 	lea %a3,[%a3]26984 <f0036968 <bmhd_3_copy+0x40c35368>>
8000111e:	54 32       	ld.w %d2,[%a3]
80001120:	8f d2 c1 21 	andn %d2,%d2,29
80001124:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U    = (uint32)0U;
80001126:	82 02       	mov %d2,0
80001128:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
8000112a:	91 30 00 2f 	movh.a %a2,61443
8000112e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001132:	54 22       	ld.w %d2,[%a2]
80001134:	7b f0 ff 3f 	movh %d3,65535
80001138:	c2 f3       	add %d3,-1
8000113a:	26 32       	and %d2,%d3
8000113c:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
8000113e:	91 30 00 2f 	movh.a %a2,61443
80001142:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
80001146:	54 22       	ld.w %d2,[%a2]
80001148:	26 32       	and %d2,%d3
8000114a:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
8000114c:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
80001150:	1d 00 05 00 	j 8000115a <IfxScuCcu_init+0x116>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001154:	c2 f2       	add %d2,-1
80001156:	bf 12 45 00 	jlt %d2,1,800011e0 <IfxScuCcu_init+0x19c>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
8000115a:	91 30 00 2f 	movh.a %a2,61443
8000115e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001162:	54 23       	ld.w %d3,[%a2]
80001164:	6f 13 f8 7f 	jz.t %d3,1,80001154 <IfxScuCcu_init+0x110>
80001168:	91 30 00 2f 	movh.a %a2,61443
8000116c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80001170:	54 23       	ld.w %d3,[%a2]
80001172:	6f 13 f1 7f 	jz.t %d3,1,80001154 <IfxScuCcu_init+0x110>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
80001176:	19 c2 04 00 	ld.w %d2,[%a12]4
8000117a:	c2 f2       	add %d2,-1
8000117c:	bf 22 35 80 	jlt.u %d2,2,800011e6 <IfxScuCcu_init+0x1a2>
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
80001180:	91 30 00 3f 	movh.a %a3,61443
80001184:	d9 33 18 06 	lea %a3,[%a3]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001188:	54 32       	ld.w %d2,[%a3]
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
8000118a:	39 c3 08 00 	ld.bu %d3,[%a12]8 <f0036018 <bmhd_3_copy+0x40c34a18>>
8000118e:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
80001192:	39 c3 09 00 	ld.bu %d3,[%a12]9
80001196:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
8000119a:	19 c3 04 00 	ld.w %d3,[%a12]4
8000119e:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
800011a2:	74 32       	st.w [%a3],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
800011a4:	91 30 00 2f 	movh.a %a2,61443
800011a8:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
800011ac:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
800011ae:	39 c3 10 00 	ld.bu %d3,[%a12]16 <f0036028 <bmhd_3_copy+0x40c34a28>>
800011b2:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
800011b6:	39 c3 0c 00 	ld.bu %d3,[%a12]12
800011ba:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
800011be:	39 c3 0d 00 	ld.bu %d3,[%a12]13
800011c2:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
800011c6:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
800011c8:	54 32       	ld.w %d2,[%a3]
800011ca:	b7 12 01 28 	insert %d2,%d2,1,16,1
800011ce:	74 32       	st.w [%a3],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
800011d0:	54 22       	ld.w %d2,[%a2]
800011d2:	b7 12 01 28 	insert %d2,%d2,1,16,1
800011d6:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
800011d8:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
800011dc:	1d 00 1f 00 	j 8000121a <IfxScuCcu_init+0x1d6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800011e0:	82 19       	mov %d9,1
800011e2:	1d ff ca ff 	j 80001176 <IfxScuCcu_init+0x132>
        scuOsccon.U      = SCU_OSCCON.U;
800011e6:	91 30 00 2f 	movh.a %a2,61443
800011ea:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
800011ee:	54 24       	ld.w %d4,[%a2]
        scuOsccon.B.MODE = 0U;
800011f0:	8f 04 c6 41 	andn %d4,%d4,96
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
800011f4:	54 c3       	ld.w %d3,[%a12]
800011f6:	7b c0 31 24 	movh %d2,17180
800011fa:	1b 32 e8 2d 	addi %d2,%d2,-8573
800011fe:	73 23 68 20 	mul.u %e2,%d3,%d2
80001202:	8f e3 1e 20 	sh %d2,%d3,-18
80001206:	1b 12 ff 2f 	addi %d2,%d2,-15
8000120a:	37 24 05 48 	insert %d4,%d4,%d2,16,5
        SCU_OSCCON.U       = scuOsccon.U;
8000120e:	74 24       	st.w [%a2],%d4
80001210:	1d ff b8 ff 	j 80001180 <IfxScuCcu_init+0x13c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001214:	c2 f2       	add %d2,-1
80001216:	bf 12 14 00 	jlt %d2,1,8000123e <IfxScuCcu_init+0x1fa>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
8000121a:	91 30 00 2f 	movh.a %a2,61443
8000121e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001222:	54 23       	ld.w %d3,[%a2]
80001224:	6f 13 f8 ff 	jnz.t %d3,1,80001214 <IfxScuCcu_init+0x1d0>
80001228:	91 30 00 2f 	movh.a %a2,61443
8000122c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80001230:	54 23       	ld.w %d3,[%a2]
80001232:	6f 13 f1 ff 	jnz.t %d3,1,80001214 <IfxScuCcu_init+0x1d0>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001236:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
8000123a:	1d 00 08 00 	j 8000124a <IfxScuCcu_init+0x206>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000123e:	82 19       	mov %d9,1
80001240:	1d ff fb ff 	j 80001236 <IfxScuCcu_init+0x1f2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001244:	c2 f2       	add %d2,-1
80001246:	bf 12 2f 00 	jlt %d2,1,800012a4 <IfxScuCcu_init+0x260>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
8000124a:	91 30 00 2f 	movh.a %a2,61443
8000124e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001252:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001254:	6f 53 f8 7f 	jz.t %d3,5,80001244 <IfxScuCcu_init+0x200>
80001258:	91 30 00 2f 	movh.a %a2,61443
8000125c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80001260:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001262:	6f 53 f1 7f 	jz.t %d3,5,80001244 <IfxScuCcu_init+0x200>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
80001266:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001268:	6f 43 ee 7f 	jz.t %d3,4,80001244 <IfxScuCcu_init+0x200>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
8000126c:	39 c3 0a 00 	ld.bu %d3,[%a12]10
80001270:	91 30 00 2f 	movh.a %a2,61443
80001274:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80001278:	54 22       	ld.w %d2,[%a2]
8000127a:	37 32 03 20 	insert %d2,%d2,%d3,0,3
8000127e:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
80001280:	91 30 00 2f 	movh.a %a2,61443
80001284:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <bmhd_3_copy+0x40c34a2c>>
80001288:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
8000128a:	39 c3 0e 00 	ld.bu %d3,[%a12]14 <f003602c <bmhd_3_copy+0x40c34a2c>>
8000128e:	37 32 03 20 	insert %d2,%d2,%d3,0,3
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
80001292:	39 c3 0f 00 	ld.bu %d3,[%a12]15
80001296:	37 32 03 24 	insert %d2,%d2,%d3,8,3
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
8000129a:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
8000129c:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800012a0:	1d 00 08 00 	j 800012b0 <IfxScuCcu_init+0x26c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012a4:	82 19       	mov %d9,1
800012a6:	1d ff e3 ff 	j 8000126c <IfxScuCcu_init+0x228>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012aa:	c2 f2       	add %d2,-1
800012ac:	bf 12 39 00 	jlt %d2,1,8000131e <IfxScuCcu_init+0x2da>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800012b0:	91 30 00 2f 	movh.a %a2,61443
800012b4:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800012b8:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800012ba:	6f 53 f8 7f 	jz.t %d3,5,800012aa <IfxScuCcu_init+0x266>
800012be:	91 30 00 2f 	movh.a %a2,61443
800012c2:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800012c6:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800012c8:	6f 53 f1 7f 	jz.t %d3,5,800012aa <IfxScuCcu_init+0x266>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
800012cc:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800012ce:	6f 43 ee 7f 	jz.t %d3,4,800012aa <IfxScuCcu_init+0x266>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
800012d2:	7b 50 00 20 	movh %d2,5
800012d6:	1b 02 3e 29 	addi %d2,%d2,-27680
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
800012da:	91 30 00 2f 	movh.a %a2,61443
800012de:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
800012e2:	54 23       	ld.w %d3,[%a2]
800012e4:	6f 13 09 80 	jnz.t %d3,1,800012f6 <IfxScuCcu_init+0x2b2>
800012e8:	54 23       	ld.w %d3,[%a2]
800012ea:	6f 83 06 80 	jnz.t %d3,8,800012f6 <IfxScuCcu_init+0x2b2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012ee:	c2 f2       	add %d2,-1
800012f0:	ff 12 f5 7f 	jge %d2,1,800012da <IfxScuCcu_init+0x296>
800012f4:	82 19       	mov %d9,1
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
800012f6:	91 30 00 2f 	movh.a %a2,61443
800012fa:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
800012fe:	54 22       	ld.w %d2,[%a2]
80001300:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001304:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
80001306:	91 30 00 2f 	movh.a %a2,61443
8000130a:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
8000130e:	54 22       	ld.w %d2,[%a2]
80001310:	b7 12 01 29 	insert %d2,%d2,1,18,1
80001314:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
80001316:	3b 00 00 23 	mov %d2,12288
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
8000131a:	1d 00 08 00 	j 8000132a <IfxScuCcu_init+0x2e6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000131e:	82 19       	mov %d9,1
80001320:	1d ff d9 ff 	j 800012d2 <IfxScuCcu_init+0x28e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001324:	c2 f2       	add %d2,-1
80001326:	bf 12 b7 00 	jlt %d2,1,80001494 <IfxScuCcu_init+0x450>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
8000132a:	91 30 00 2f 	movh.a %a2,61443
8000132e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001332:	54 23       	ld.w %d3,[%a2]
80001334:	6f 23 f8 7f 	jz.t %d3,2,80001324 <IfxScuCcu_init+0x2e0>
80001338:	91 30 00 2f 	movh.a %a2,61443
8000133c:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
80001340:	54 23       	ld.w %d3,[%a2]
80001342:	6f 23 f1 7f 	jz.t %d3,2,80001324 <IfxScuCcu_init+0x2e0>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
80001346:	91 30 00 2f 	movh.a %a2,61443
8000134a:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
8000134e:	3b c0 0b 20 	mov %d2,188
80001352:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
80001354:	91 30 00 3f 	movh.a %a3,61443
80001358:	d9 33 a0 06 	lea %a3,[%a3]26656 <f0036820 <bmhd_3_copy+0x40c35220>>
8000135c:	82 52       	mov %d2,5
8000135e:	74 32       	st.w [%a3],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
80001360:	91 30 00 3f 	movh.a %a3,61443
80001364:	d9 33 a0 76 	lea %a3,[%a3]27104 <f00369e0 <bmhd_3_copy+0x40c353e0>>
80001368:	3b d0 01 20 	mov %d2,29
8000136c:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U = (uint32)0U;
8000136e:	82 02       	mov %d2,0
80001370:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
80001372:	91 30 00 2f 	movh.a %a2,61443
80001376:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000137a:	54 24       	ld.w %d4,[%a2]
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
8000137c:	b7 14 02 4e 	insert %d4,%d4,1,28,2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
80001380:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001384:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
80001388:	91 30 00 2f 	movh.a %a2,61443
8000138c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001390:	54 23       	ld.w %d3,[%a2]
80001392:	ff 03 06 00 	jge %d3,0,8000139e <IfxScuCcu_init+0x35a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001396:	c2 f2       	add %d2,-1
80001398:	ff 12 f8 7f 	jge %d2,1,80001388 <IfxScuCcu_init+0x344>
8000139c:	82 19       	mov %d9,1
        SCU_CCUCON0.U     = scu_ccucon0.U;
8000139e:	91 30 00 2f 	movh.a %a2,61443
800013a2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800013a6:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800013a8:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
800013ac:	91 30 00 2f 	movh.a %a2,61443
800013b0:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800013b4:	54 23       	ld.w %d3,[%a2]
800013b6:	ff 03 06 00 	jge %d3,0,800013c2 <IfxScuCcu_init+0x37e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800013ba:	c2 f2       	add %d2,-1
800013bc:	ff 12 f8 7f 	jge %d2,1,800013ac <IfxScuCcu_init+0x368>
800013c0:	82 19       	mov %d9,1
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800013c2:	91 30 00 2f 	movh.a %a2,61443
800013c6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800013ca:	54 22       	ld.w %d2,[%a2]
800013cc:	6f 12 09 00 	jz.t %d2,1,800013de <IfxScuCcu_init+0x39a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800013d0:	8f 15 40 31 	or %d3,%d5,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800013d4:	54 22       	ld.w %d2,[%a2]
800013d6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013da:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800013dc:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800013de:	8f 35 40 51 	or %d5,%d5,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800013e2:	91 30 00 2f 	movh.a %a2,61443
800013e6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800013ea:	54 22       	ld.w %d2,[%a2]
800013ec:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013f0:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800013f2:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800013f4:	91 30 00 2f 	movh.a %a2,61443
800013f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800013fc:	54 22       	ld.w %d2,[%a2]
800013fe:	6f 02 fb 7f 	jz.t %d2,0,800013f4 <IfxScuCcu_init+0x3b0>
    if (!status)
80001402:	df 09 4c 00 	jeq %d9,0,8000149a <IfxScuCcu_init+0x456>
    if (!status)
80001406:	df 09 b1 81 	jne %d9,0,80001768 <IfxScuCcu_init+0x724>
    password  = watchdog->CON0.B.PW;
8000140a:	91 30 00 2f 	movh.a %a2,61443
8000140e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001412:	54 22       	ld.w %d2,[%a2]
80001414:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80001418:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
8000141c:	54 23       	ld.w %d3,[%a2]
8000141e:	6f 13 0b 00 	jz.t %d3,1,80001434 <IfxScuCcu_init+0x3f0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001422:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001426:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000142a:	54 23       	ld.w %d3,[%a2]
8000142c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001430:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001432:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001434:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001438:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000143c:	91 30 00 2f 	movh.a %a2,61443
80001440:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001444:	54 22       	ld.w %d2,[%a2]
80001446:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000144a:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000144c:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
8000144e:	91 30 00 2f 	movh.a %a2,61443
80001452:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001456:	54 22       	ld.w %d2,[%a2]
80001458:	6f 02 fb ff 	jnz.t %d2,0,8000144e <IfxScuCcu_init+0x40a>
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
8000145c:	91 30 00 2f 	movh.a %a2,61443
80001460:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001464:	54 22       	ld.w %d2,[%a2]
80001466:	19 c4 24 00 	ld.w %d4,[%a12]36 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000146a:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
8000146e:	19 c3 20 00 	ld.w %d3,[%a12]32
80001472:	26 34       	and %d4,%d3
80001474:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001476:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
8000147a:	91 30 00 2f 	movh.a %a2,61443
8000147e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001482:	54 23       	ld.w %d3,[%a2]
80001484:	ff 03 11 00 	jge %d3,0,800014a6 <IfxScuCcu_init+0x462>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001488:	c2 f2       	add %d2,-1
8000148a:	ff 12 f8 7f 	jge %d2,1,8000147a <IfxScuCcu_init+0x436>
8000148e:	82 19       	mov %d9,1
80001490:	1d 00 0c 00 	j 800014a8 <IfxScuCcu_init+0x464>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001494:	82 19       	mov %d9,1
80001496:	1d ff 58 ff 	j 80001346 <IfxScuCcu_init+0x302>
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
8000149a:	99 c4 24 10 	ld.a %a4,[%a12]100
8000149e:	6d ff a7 fd 	call 80000fec <IfxScuCcu_modulation_init>
800014a2:	1d ff b2 ff 	j 80001406 <IfxScuCcu_init+0x3c2>
    uint32 initError = 0;
800014a6:	82 09       	mov %d9,0
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
800014a8:	91 30 00 2f 	movh.a %a2,61443
800014ac:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800014b0:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800014b2:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
800014b6:	91 30 00 2f 	movh.a %a2,61443
800014ba:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800014be:	54 23       	ld.w %d3,[%a2]
800014c0:	ff 03 06 00 	jge %d3,0,800014cc <IfxScuCcu_init+0x488>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800014c4:	c2 f2       	add %d2,-1
800014c6:	ff 12 f8 7f 	jge %d2,1,800014b6 <IfxScuCcu_init+0x472>
800014ca:	82 19       	mov %d9,1
        ccucon1.U = SCU_CCUCON1.U;
800014cc:	91 30 00 2f 	movh.a %a2,61443
800014d0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014d4:	54 22       	ld.w %d2,[%a2]
            || ccucon1.B.CLKSELQSPI)
800014d6:	7b 00 03 33 	movh %d3,12336
800014da:	1b 03 03 30 	addi %d3,%d3,48
800014de:	26 32       	and %d2,%d3
        if (ccucon1.B.CLKSELMCAN
800014e0:	df 02 30 00 	jeq %d2,0,80001540 <IfxScuCcu_init+0x4fc>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
800014e4:	54 22       	ld.w %d2,[%a2]
800014e6:	19 c4 2c 00 	ld.w %d4,[%a12]44
800014ea:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
800014ee:	19 c3 28 00 	ld.w %d3,[%a12]40
800014f2:	26 34       	and %d4,%d3
800014f4:	a6 24       	or %d4,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
800014f6:	8f 04 c3 41 	andn %d4,%d4,48
            ccucon1.B.CLKSELMSC  = (uint32)0;
800014fa:	b7 04 02 4a 	insert %d4,%d4,0,20,2
            ccucon1.B.CLKSELQSPI = (uint32)0;
800014fe:	b7 04 02 4e 	insert %d4,%d4,0,28,2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001502:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
80001506:	91 30 00 2f 	movh.a %a2,61443
8000150a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000150e:	54 23       	ld.w %d3,[%a2]
80001510:	ff 03 06 00 	jge %d3,0,8000151c <IfxScuCcu_init+0x4d8>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001514:	c2 f2       	add %d2,-1
80001516:	ff 12 f8 7f 	jge %d2,1,80001506 <IfxScuCcu_init+0x4c2>
8000151a:	82 19       	mov %d9,1
            SCU_CCUCON1.U     = ccucon1.U;
8000151c:	91 30 00 2f 	movh.a %a2,61443
80001520:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001524:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001526:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
8000152a:	91 30 00 2f 	movh.a %a2,61443
8000152e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001532:	54 23       	ld.w %d3,[%a2]
80001534:	ff 03 06 00 	jge %d3,0,80001540 <IfxScuCcu_init+0x4fc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001538:	c2 f2       	add %d2,-1
8000153a:	ff 12 f8 7f 	jge %d2,1,8000152a <IfxScuCcu_init+0x4e6>
8000153e:	82 19       	mov %d9,1
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
80001540:	91 30 00 2f 	movh.a %a2,61443
80001544:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001548:	54 22       	ld.w %d2,[%a2]
8000154a:	19 c4 2c 00 	ld.w %d4,[%a12]44 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000154e:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80001552:	19 c3 28 00 	ld.w %d3,[%a12]40
80001556:	26 34       	and %d4,%d3
80001558:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000155a:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
8000155e:	91 30 00 2f 	movh.a %a2,61443
80001562:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001566:	54 23       	ld.w %d3,[%a2]
80001568:	ff 03 06 00 	jge %d3,0,80001574 <IfxScuCcu_init+0x530>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000156c:	c2 f2       	add %d2,-1
8000156e:	ff 12 f8 7f 	jge %d2,1,8000155e <IfxScuCcu_init+0x51a>
80001572:	82 19       	mov %d9,1
        SCU_CCUCON1.U     = ccucon1.U;
80001574:	91 30 00 2f 	movh.a %a2,61443
80001578:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000157c:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000157e:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
80001582:	91 30 00 2f 	movh.a %a2,61443
80001586:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000158a:	54 23       	ld.w %d3,[%a2]
8000158c:	ff 03 06 00 	jge %d3,0,80001598 <IfxScuCcu_init+0x554>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001590:	c2 f2       	add %d2,-1
80001592:	ff 12 f8 7f 	jge %d2,1,80001582 <IfxScuCcu_init+0x53e>
80001596:	82 19       	mov %d9,1
        ccucon2.U = SCU_CCUCON2.U;
80001598:	91 30 00 2f 	movh.a %a2,61443
8000159c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015a0:	54 22       	ld.w %d2,[%a2]
        if (ccucon2.B.CLKSELASCLINS)
800015a2:	3b 00 00 33 	mov %d3,12288
800015a6:	26 32       	and %d2,%d3
800015a8:	df 02 2c 00 	jeq %d2,0,80001600 <IfxScuCcu_init+0x5bc>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
800015ac:	54 22       	ld.w %d2,[%a2]
800015ae:	19 c4 34 00 	ld.w %d4,[%a12]52
800015b2:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
800015b6:	19 c3 30 00 	ld.w %d3,[%a12]48
800015ba:	26 34       	and %d4,%d3
800015bc:	a6 24       	or %d4,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
800015be:	b7 04 02 46 	insert %d4,%d4,0,12,2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800015c2:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
800015c6:	91 30 00 2f 	movh.a %a2,61443
800015ca:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015ce:	54 23       	ld.w %d3,[%a2]
800015d0:	ff 03 06 00 	jge %d3,0,800015dc <IfxScuCcu_init+0x598>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800015d4:	c2 f2       	add %d2,-1
800015d6:	ff 12 f8 7f 	jge %d2,1,800015c6 <IfxScuCcu_init+0x582>
800015da:	82 19       	mov %d9,1
            SCU_CCUCON2.U     = ccucon2.U;
800015dc:	91 30 00 2f 	movh.a %a2,61443
800015e0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015e4:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800015e6:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
800015ea:	91 30 00 2f 	movh.a %a2,61443
800015ee:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015f2:	54 23       	ld.w %d3,[%a2]
800015f4:	ff 03 06 00 	jge %d3,0,80001600 <IfxScuCcu_init+0x5bc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800015f8:	c2 f2       	add %d2,-1
800015fa:	ff 12 f8 7f 	jge %d2,1,800015ea <IfxScuCcu_init+0x5a6>
800015fe:	82 19       	mov %d9,1
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
80001600:	91 30 00 2f 	movh.a %a2,61443
80001604:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001608:	54 22       	ld.w %d2,[%a2]
8000160a:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000160e:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
80001612:	19 c3 30 00 	ld.w %d3,[%a12]48
80001616:	26 34       	and %d4,%d3
80001618:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000161a:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
8000161e:	91 30 00 2f 	movh.a %a2,61443
80001622:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001626:	54 23       	ld.w %d3,[%a2]
80001628:	ff 03 06 00 	jge %d3,0,80001634 <IfxScuCcu_init+0x5f0>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000162c:	c2 f2       	add %d2,-1
8000162e:	ff 12 f8 7f 	jge %d2,1,8000161e <IfxScuCcu_init+0x5da>
80001632:	82 19       	mov %d9,1
        SCU_CCUCON2.U     = ccucon2.U;
80001634:	91 30 00 2f 	movh.a %a2,61443
80001638:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000163c:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000163e:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
80001642:	91 30 00 2f 	movh.a %a2,61443
80001646:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000164a:	54 23       	ld.w %d3,[%a2]
8000164c:	ff 03 06 00 	jge %d3,0,80001658 <IfxScuCcu_init+0x614>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001650:	c2 f2       	add %d2,-1
80001652:	ff 12 f8 7f 	jge %d2,1,80001642 <IfxScuCcu_init+0x5fe>
80001656:	82 19       	mov %d9,1
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
80001658:	91 30 00 2f 	movh.a %a2,61443
8000165c:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
80001660:	54 22       	ld.w %d2,[%a2]
80001662:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f003604c <bmhd_3_copy+0x40c34a4c>>
80001666:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
8000166a:	19 c3 38 00 	ld.w %d3,[%a12]56
8000166e:	26 34       	and %d4,%d3
80001670:	a6 24       	or %d4,%d2
        ccucon5.B.UP      = 1;
80001672:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001676:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
8000167a:	91 30 00 2f 	movh.a %a2,61443
8000167e:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
80001682:	54 23       	ld.w %d3,[%a2]
80001684:	ff 03 06 00 	jge %d3,0,80001690 <IfxScuCcu_init+0x64c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001688:	c2 f2       	add %d2,-1
8000168a:	ff 12 f8 7f 	jge %d2,1,8000167a <IfxScuCcu_init+0x636>
8000168e:	82 19       	mov %d9,1
        SCU_CCUCON5.U     = ccucon5.U;
80001690:	91 30 00 2f 	movh.a %a2,61443
80001694:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
80001698:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000169a:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
8000169e:	91 30 00 2f 	movh.a %a2,61443
800016a2:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800016a6:	54 23       	ld.w %d3,[%a2]
800016a8:	ff 03 06 00 	jge %d3,0,800016b4 <IfxScuCcu_init+0x670>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800016ac:	c2 f2       	add %d2,-1
800016ae:	ff 12 f8 7f 	jge %d2,1,8000169e <IfxScuCcu_init+0x65a>
800016b2:	82 19       	mov %d9,1
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
800016b4:	91 30 00 2f 	movh.a %a2,61443
800016b8:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <bmhd_3_copy+0x40c34a80>>
800016bc:	54 23       	ld.w %d3,[%a2]
800016be:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036080 <bmhd_3_copy+0x40c34a80>>
800016c2:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
800016c6:	19 c2 00 10 	ld.w %d2,[%a12]64
800016ca:	26 42       	and %d2,%d4
800016cc:	a6 32       	or %d2,%d3
        SCU_CCUCON6.U = ccucon6.U;
800016ce:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
800016d0:	91 30 00 2f 	movh.a %a2,61443
800016d4:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <bmhd_3_copy+0x40c34a84>>
800016d8:	54 23       	ld.w %d3,[%a2]
800016da:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f0036084 <bmhd_3_copy+0x40c34a84>>
800016de:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
800016e2:	19 c2 08 10 	ld.w %d2,[%a12]72
800016e6:	26 42       	and %d2,%d4
800016e8:	a6 32       	or %d2,%d3
        SCU_CCUCON7.U = ccucon7.U;
800016ea:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
800016ec:	91 30 00 2f 	movh.a %a2,61443
800016f0:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <bmhd_3_copy+0x40c34a88>>
800016f4:	54 23       	ld.w %d3,[%a2]
800016f6:	19 c4 14 10 	ld.w %d4,[%a12]84 <f0036088 <bmhd_3_copy+0x40c34a88>>
800016fa:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
800016fe:	19 c2 10 10 	ld.w %d2,[%a12]80
80001702:	26 42       	and %d2,%d4
80001704:	a6 32       	or %d2,%d3
        SCU_CCUCON8.U = ccucon8.U;
80001706:	74 22       	st.w [%a2],%d2
        ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
80001708:	91 30 00 2f 	movh.a %a2,61443
8000170c:	d9 22 0c 26 	lea %a2,[%a2]24716 <f003608c <bmhd_3_copy+0x40c34a8c>>
80001710:	54 23       	ld.w %d3,[%a2]
80001712:	19 c4 1c 10 	ld.w %d4,[%a12]92 <f003608c <bmhd_3_copy+0x40c34a8c>>
80001716:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
8000171a:	19 c2 18 10 	ld.w %d2,[%a12]88
8000171e:	26 42       	and %d2,%d4
80001720:	a6 32       	or %d2,%d3
        SCU_CCUCON9.U = ccucon9.U;
80001722:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
80001724:	91 30 00 2f 	movh.a %a2,61443
80001728:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000172c:	54 22       	ld.w %d2,[%a2]
8000172e:	6f 12 09 00 	jz.t %d2,1,80001740 <IfxScuCcu_init+0x6fc>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001732:	8f 15 40 31 	or %d3,%d5,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001736:	54 22       	ld.w %d2,[%a2]
80001738:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000173c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000173e:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001740:	8f 35 40 51 	or %d5,%d5,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001744:	91 30 00 2f 	movh.a %a2,61443
80001748:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000174c:	54 22       	ld.w %d2,[%a2]
8000174e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001752:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001754:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001756:	91 30 00 2f 	movh.a %a2,61443
8000175a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000175e:	54 22       	ld.w %d2,[%a2]
80001760:	6f 02 fb 7f 	jz.t %d2,0,80001756 <IfxScuCcu_init+0x712>
    return (boolean)initError;
80001764:	8f f9 0f 91 	and %d9,%d9,255
    if (!status)
80001768:	df 09 96 80 	jne %d9,0,80001894 <IfxScuCcu_init+0x850>
    password  = watchdog->CON0.B.PW;
8000176c:	91 30 00 2f 	movh.a %a2,61443
80001770:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001774:	54 22       	ld.w %d2,[%a2]
80001776:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= 0x003F;
8000177a:	8f f2 83 b1 	xor %d11,%d2,63

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
8000177e:	02 98       	mov %d8,%d9
80001780:	1d 00 53 00 	j 80001826 <IfxScuCcu_init+0x7e2>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
80001784:	8f 38 00 50 	sh %d5,%d8,3
80001788:	99 c2 1c 00 	ld.a %a2,[%a12]28
8000178c:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
80001790:	14 23       	ld.bu %d3,[%a2]
80001792:	91 30 00 2f 	movh.a %a2,61443
80001796:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
8000179a:	54 22       	ld.w %d2,[%a2]
8000179c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
800017a0:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
800017a2:	91 30 00 2f 	movh.a %a2,61443
800017a6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017aa:	54 22       	ld.w %d2,[%a2]
800017ac:	6f 12 09 00 	jz.t %d2,1,800017be <IfxScuCcu_init+0x77a>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017b0:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017b4:	54 22       	ld.w %d2,[%a2]
800017b6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017ba:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017bc:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017be:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017c2:	91 30 00 2f 	movh.a %a2,61443
800017c6:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017ca:	54 22       	ld.w %d2,[%a2]
800017cc:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017d0:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017d2:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800017d4:	91 30 00 2f 	movh.a %a2,61443
800017d8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017dc:	54 22       	ld.w %d2,[%a2]
800017de:	6f 02 fb 7f 	jz.t %d2,0,800017d4 <IfxScuCcu_init+0x790>
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
800017e2:	99 c2 1c 00 	ld.a %a2,[%a12]28
800017e6:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
800017ea:	19 2a 04 00 	ld.w %d10,[%a2]4
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
800017ee:	82 04       	mov %d4,0
800017f0:	6d ff a5 fb 	call 80000f3a <IfxScuCcu_getSourceFrequency>
800017f4:	91 30 00 2f 	movh.a %a2,61443
800017f8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800017fc:	54 23       	ld.w %d3,[%a2]
800017fe:	8f f3 00 31 	and %d3,%d3,15
80001802:	4b 03 41 31 	itof %d3,%d3
80001806:	4b 32 51 20 	div.f %d2,%d2,%d3
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
8000180a:	4b 2a 41 20 	mul.f %d2,%d10,%d2
8000180e:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
80001812:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80001816:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
8000181a:	a2 42       	sub %d2,%d4
8000181c:	3f 32 fd ff 	jlt.u %d2,%d3,80001816 <IfxScuCcu_init+0x7d2>
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80001820:	c2 18       	add %d8,1
80001822:	8f f8 0f 81 	and %d8,%d8,255
80001826:	39 c2 18 00 	ld.bu %d2,[%a12]24
8000182a:	7f 28 35 80 	jge.u %d8,%d2,80001894 <IfxScuCcu_init+0x850>
    if (SCU_WDTS_CON0.B.LCK)
8000182e:	91 30 00 2f 	movh.a %a2,61443
80001832:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001836:	54 22       	ld.w %d2,[%a2]
80001838:	6f 12 0b 00 	jz.t %d2,1,8000184e <IfxScuCcu_init+0x80a>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000183c:	8f 2b 00 30 	sh %d3,%d11,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001840:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001844:	54 22       	ld.w %d2,[%a2]
80001846:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000184a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000184c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000184e:	8f 2b 00 40 	sh %d4,%d11,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001852:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001856:	91 30 00 2f 	movh.a %a2,61443
8000185a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000185e:	54 22       	ld.w %d2,[%a2]
80001860:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001864:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001866:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001868:	91 30 00 2f 	movh.a %a2,61443
8000186c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001870:	54 22       	ld.w %d2,[%a2]
80001872:	6f 02 fb ff 	jnz.t %d2,0,80001868 <IfxScuCcu_init+0x824>
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001876:	3b 00 00 26 	mov %d2,24576
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
8000187a:	91 30 00 2f 	movh.a %a2,61443
8000187e:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001882:	54 23       	ld.w %d3,[%a2]
80001884:	6f 53 80 ff 	jnz.t %d3,5,80001784 <IfxScuCcu_init+0x740>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001888:	c2 f2       	add %d2,-1
8000188a:	ff 12 f8 7f 	jge %d2,1,8000187a <IfxScuCcu_init+0x836>
8000188e:	82 19       	mov %d9,1
80001890:	1d ff 7a ff 	j 80001784 <IfxScuCcu_init+0x740>
}
80001894:	02 92       	mov %d2,%d9
80001896:	00 90       	ret 

80001898 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80001898:	40 ae       	mov.aa %a14,%sp


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000189a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000189e:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800018a2:	7b 30 00 3f 	movh %d3,61443
800018a6:	1b c3 24 36 	addi %d3,%d3,25164
800018aa:	13 c2 20 23 	madd %d2,%d3,%d2,12
800018ae:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800018b0:	54 22       	ld.w %d2,[%a2]
800018b2:	6f 12 0b 00 	jz.t %d2,1,800018c8 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018b6:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800018ba:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018be:	54 22       	ld.w %d2,[%a2]
800018c0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018c4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018c6:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018c8:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800018cc:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018d0:	54 22       	ld.w %d2,[%a2]
800018d2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018d6:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018d8:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800018da:	54 22       	ld.w %d2,[%a2]
800018dc:	6f 02 ff ff 	jnz.t %d2,0,800018da <IfxScuWdt_clearCpuEndinit+0x42>
}
800018e0:	00 90       	ret 

800018e2 <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
800018e2:	40 ae       	mov.aa %a14,%sp
800018e4:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800018e8:	91 30 00 2f 	movh.a %a2,61443
800018ec:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800018f0:	54 22       	ld.w %d2,[%a2]
800018f2:	6f 12 0b 00 	jz.t %d2,1,80001908 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800018f6:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800018fa:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800018fe:	54 22       	ld.w %d2,[%a2]
80001900:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001904:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001906:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001908:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
8000190c:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001910:	91 30 00 2f 	movh.a %a2,61443
80001914:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001918:	54 22       	ld.w %d2,[%a2]
8000191a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000191e:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001920:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001922:	91 30 00 2f 	movh.a %a2,61443
80001926:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000192a:	54 22       	ld.w %d2,[%a2]
8000192c:	6f 02 fb ff 	jnz.t %d2,0,80001922 <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80001930:	00 90       	ret 

80001932 <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
80001932:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001934:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001938:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000193c:	7b 30 00 3f 	movh %d3,61443
80001940:	1b c3 24 36 	addi %d3,%d3,25164
80001944:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001948:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
8000194a:	54 22       	ld.w %d2,[%a2]
8000194c:	6f 12 0b 00 	jz.t %d2,1,80001962 <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001950:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001954:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001958:	54 22       	ld.w %d2,[%a2]
8000195a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000195e:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001960:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001962:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001964:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001968:	54 22       	ld.w %d2,[%a2]
8000196a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000196e:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001970:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
80001972:	54 22       	ld.w %d2,[%a2]
80001974:	6f 02 ff ff 	jnz.t %d2,0,80001972 <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80001978:	d9 23 04 00 	lea %a3,[%a2]4
8000197c:	19 22 04 00 	ld.w %d2,[%a2]4
80001980:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001984:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001986:	54 22       	ld.w %d2,[%a2]
80001988:	6f 12 09 00 	jz.t %d2,1,8000199a <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000198c:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001990:	54 22       	ld.w %d2,[%a2]
80001992:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001996:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001998:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
8000199a:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000199e:	54 22       	ld.w %d2,[%a2]
800019a0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800019a4:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800019a6:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800019a8:	54 22       	ld.w %d2,[%a2]
800019aa:	6f 02 ff 7f 	jz.t %d2,0,800019a8 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800019ae:	00 90       	ret 

800019b0 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
800019b0:	40 ae       	mov.aa %a14,%sp
800019b2:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
800019b6:	91 30 00 2f 	movh.a %a2,61443
800019ba:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800019be:	54 22       	ld.w %d2,[%a2]
800019c0:	6f 12 0b 00 	jz.t %d2,1,800019d6 <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019c4:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800019c8:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800019cc:	54 22       	ld.w %d2,[%a2]
800019ce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019d2:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800019d4:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019d6:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800019d8:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800019dc:	91 30 00 2f 	movh.a %a2,61443
800019e0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800019e4:	54 22       	ld.w %d2,[%a2]
800019e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019ea:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800019ec:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800019ee:	91 30 00 2f 	movh.a %a2,61443
800019f2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800019f6:	54 22       	ld.w %d2,[%a2]
800019f8:	6f 02 fb ff 	jnz.t %d2,0,800019ee <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
800019fc:	91 30 00 2f 	movh.a %a2,61443
80001a00:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80001a04:	54 22       	ld.w %d2,[%a2]
80001a06:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001a0a:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001a0c:	91 30 00 2f 	movh.a %a2,61443
80001a10:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a14:	54 22       	ld.w %d2,[%a2]
80001a16:	6f 12 09 00 	jz.t %d2,1,80001a28 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001a1a:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001a1e:	54 22       	ld.w %d2,[%a2]
80001a20:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a24:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001a26:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001a28:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001a2c:	91 30 00 2f 	movh.a %a2,61443
80001a30:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a34:	54 22       	ld.w %d2,[%a2]
80001a36:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a3a:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001a3c:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001a3e:	91 30 00 2f 	movh.a %a2,61443
80001a42:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a46:	54 22       	ld.w %d2,[%a2]
80001a48:	6f 02 fb 7f 	jz.t %d2,0,80001a3e <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001a4c:	00 90       	ret 

80001a4e <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
80001a4e:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001a50:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001a54:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80001a58:	7b 30 00 3f 	movh %d3,61443
80001a5c:	1b c3 24 36 	addi %d3,%d3,25164
80001a60:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
80001a64:	60 22       	mov.a %a2,%d2
80001a66:	54 22       	ld.w %d2,[%a2]
80001a68:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
80001a6c:	8f f2 83 21 	xor %d2,%d2,63
80001a70:	00 90       	ret 

80001a72 <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
80001a72:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
80001a74:	91 30 00 2f 	movh.a %a2,61443
80001a78:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a7c:	54 22       	ld.w %d2,[%a2]
80001a7e:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80001a82:	8f f2 83 21 	xor %d2,%d2,63
80001a86:	00 90       	ret 

80001a88 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
80001a88:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001a8a:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001a8e:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001a92:	7b 30 00 3f 	movh %d3,61443
80001a96:	1b c3 24 36 	addi %d3,%d3,25164
80001a9a:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001a9e:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001aa0:	54 22       	ld.w %d2,[%a2]
80001aa2:	6f 12 0b 00 	jz.t %d2,1,80001ab8 <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001aa6:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001aaa:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001aae:	54 22       	ld.w %d2,[%a2]
80001ab0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ab4:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ab6:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ab8:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001abc:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001ac0:	54 22       	ld.w %d2,[%a2]
80001ac2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001ac6:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001ac8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001aca:	54 22       	ld.w %d2,[%a2]
80001acc:	6f 02 ff 7f 	jz.t %d2,0,80001aca <IfxScuWdt_setCpuEndinit+0x42>
}
80001ad0:	00 90       	ret 

80001ad2 <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80001ad2:	40 ae       	mov.aa %a14,%sp
80001ad4:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001ad8:	91 30 00 2f 	movh.a %a2,61443
80001adc:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001ae0:	54 22       	ld.w %d2,[%a2]
80001ae2:	6f 12 0b 00 	jz.t %d2,1,80001af8 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001ae6:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001aea:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001aee:	54 22       	ld.w %d2,[%a2]
80001af0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001af4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001af6:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001af8:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001afc:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001b00:	91 30 00 2f 	movh.a %a2,61443
80001b04:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001b08:	54 22       	ld.w %d2,[%a2]
80001b0a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001b0e:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001b10:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001b12:	91 30 00 2f 	movh.a %a2,61443
80001b16:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001b1a:	54 22       	ld.w %d2,[%a2]
80001b1c:	6f 02 fb 7f 	jz.t %d2,0,80001b12 <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001b20:	00 90       	ret 

80001b22 <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80001b22:	40 ae       	mov.aa %a14,%sp
80001b24:	80 48       	mov.d %d8,%a4
80001b26:	02 5b       	mov %d11,%d5
80001b28:	8f f4 0f d1 	and %d13,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80001b2c:	1b 08 01 e0 	addi %d14,%d8,16
    uint8                 iocrIndex = (pinIndex / 4);
80001b30:	37 04 66 a1 	extr.u %d10,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80001b34:	8f 34 00 41 	and %d4,%d4,3
80001b38:	8f 34 00 90 	sh %d9,%d4,3

    if ((port == &MODULE_P40) || (port == &MODULE_P41))
80001b3c:	7b 40 00 4f 	movh %d4,61444
80001b40:	1b 04 80 4c 	addi %d4,%d4,-14336
80001b44:	7b 40 00 3f 	movh %d3,61444
80001b48:	1b 03 90 3c 	addi %d3,%d3,-14080
80001b4c:	0b 48 00 21 	eq %d2,%d8,%d4
80001b50:	0b 38 70 22 	or.eq %d2,%d8,%d3
80001b54:	df 02 12 80 	jne %d2,0,80001b78 <IfxPort_setPinMode+0x56>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80001b58:	8f 2a 00 20 	sh %d2,%d10,2
80001b5c:	60 e2       	mov.a %a2,%d14
80001b5e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001b62:	3b f0 0f 40 	mov %d4,255
80001b66:	0f 94 00 40 	sh %d4,%d4,%d9
80001b6a:	0f 9b 00 20 	sh %d2,%d11,%d9
                     ::"a"(address), "d"(mask), "d"((long long)value));
80001b6e:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
80001b70:	02 43       	mov %d3,%d4
80001b72:	49 22 40 08 	ldmst [%a2]0,%e2
}
80001b76:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001b78:	6d ff 6b ff 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
80001b7c:	02 2c       	mov %d12,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80001b7e:	02 24       	mov %d4,%d2
80001b80:	6d ff 8c fe 	call 80001898 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80001b84:	60 82       	mov.a %a2,%d8
80001b86:	19 22 20 10 	ld.w %d2,[%a2]96
80001b8a:	d7 02 01 2d 	insert %d2,%d2,0,%d13,1
80001b8e:	59 22 20 10 	st.w [%a2]96,%d2
        IfxScuWdt_setCpuEndinit(passwd);
80001b92:	02 c4       	mov %d4,%d12
80001b94:	6d ff 7a ff 	call 80001a88 <IfxScuWdt_setCpuEndinit>
80001b98:	1d ff e0 ff 	j 80001b58 <IfxPort_setPinMode+0x36>

80001b9c <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80001b9c:	40 ae       	mov.aa %a14,%sp
80001b9e:	80 4b       	mov.d %d11,%a4
80001ba0:	02 5a       	mov %d10,%d5
80001ba2:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001ba6:	6d ff 54 ff 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
80001baa:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80001bac:	02 24       	mov %d4,%d2
80001bae:	6d ff 75 fe 	call 80001898 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80001bb2:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
80001bb6:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
80001bba:	8f 78 00 31 	and %d3,%d8,7
80001bbe:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80001bc0:	06 22       	sh %d2,2
80001bc2:	60 42       	mov.a %a2,%d4
80001bc4:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80001bc8:	3b f0 00 20 	mov %d2,15
80001bcc:	0f 32 00 20 	sh %d2,%d2,%d3
80001bd0:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
80001bd4:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
80001bd8:	02 27       	mov %d7,%d2
80001bda:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80001bde:	02 94       	mov %d4,%d9
80001be0:	6d ff 54 ff 	call 80001a88 <IfxScuWdt_setCpuEndinit>
}
80001be4:	00 90       	ret 

80001be6 <IfxCpu_Trap_memoryManagementError>:
{
80001be6:	40 ae       	mov.aa %a14,%sp
80001be8:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001bea:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001bec:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
80001bf0:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001bf4:	8f 72 00 21 	and %d2,%d2,7
80001bf8:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001bfc:	80 22       	mov.d %d2,%a2
80001bfe:	0f 54 a0 30 	or %d3,%d4,%d5
80001c02:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80001c06:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c0a:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c0c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c10:	00 80       	rfe 
}
80001c12:	00 90       	ret 

80001c14 <IfxCpu_Trap_internalProtectionError>:
{
80001c14:	40 ae       	mov.aa %a14,%sp
80001c16:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c18:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c1a:	b7 14 18 44 	insert %d4,%d4,1,8,24
80001c1e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c22:	8f 72 00 21 	and %d2,%d2,7
80001c26:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c2a:	80 22       	mov.d %d2,%a2
80001c2c:	0f 54 a0 30 	or %d3,%d4,%d5
80001c30:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80001c34:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c38:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c3a:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c3e:	00 80       	rfe 
}
80001c40:	00 90       	ret 

80001c42 <IfxCpu_Trap_instructionError>:
{
80001c42:	40 ae       	mov.aa %a14,%sp
80001c44:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c46:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c48:	b7 24 18 44 	insert %d4,%d4,2,8,24
80001c4c:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c50:	8f 72 00 21 	and %d2,%d2,7
80001c54:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c58:	80 22       	mov.d %d2,%a2
80001c5a:	0f 54 a0 30 	or %d3,%d4,%d5
80001c5e:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80001c62:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c66:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c68:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c6c:	00 80       	rfe 
}
80001c6e:	00 90       	ret 

80001c70 <IfxCpu_Trap_contextManagementError>:
{
80001c70:	40 ae       	mov.aa %a14,%sp
80001c72:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c74:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c76:	b7 34 18 44 	insert %d4,%d4,3,8,24
80001c7a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c7e:	8f 72 00 21 	and %d2,%d2,7
80001c82:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c86:	80 22       	mov.d %d2,%a2
80001c88:	0f 54 a0 30 	or %d3,%d4,%d5
80001c8c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80001c90:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c94:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c96:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c9a:	00 80       	rfe 
}
80001c9c:	00 90       	ret 

80001c9e <IfxCpu_Trap_busError>:
{
80001c9e:	40 ae       	mov.aa %a14,%sp
80001ca0:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001ca2:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001ca4:	b7 44 18 44 	insert %d4,%d4,4,8,24
80001ca8:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001cac:	8f 72 00 21 	and %d2,%d2,7
80001cb0:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001cb4:	80 22       	mov.d %d2,%a2
80001cb6:	0f 54 a0 30 	or %d3,%d4,%d5
80001cba:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80001cbe:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001cc2:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001cc4:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001cc8:	00 80       	rfe 
}
80001cca:	00 90       	ret 

80001ccc <IfxCpu_Trap_assertion>:
{
80001ccc:	40 ae       	mov.aa %a14,%sp
80001cce:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001cd0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001cd2:	8f f4 0f 41 	and %d4,%d4,255
80001cd6:	3b 00 50 20 	mov %d2,1280
80001cda:	a6 24       	or %d4,%d2
80001cdc:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001ce0:	8f 72 00 21 	and %d2,%d2,7
80001ce4:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001ce8:	80 22       	mov.d %d2,%a2
80001cea:	0f 54 a0 30 	or %d3,%d4,%d5
80001cee:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80001cf2:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001cf6:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001cf8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001cfc:	00 80       	rfe 
}
80001cfe:	00 90       	ret 

80001d00 <IfxCpu_Trap_systemCall_Cpu0>:
{
80001d00:	40 ae       	mov.aa %a14,%sp
80001d02:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001d04:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d06:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001d0a:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d0e:	8f 72 00 21 	and %d2,%d2,7
80001d12:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d16:	80 22       	mov.d %d2,%a2
80001d18:	0f 54 a0 30 	or %d3,%d4,%d5
80001d1c:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80001d20:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d24:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d28:	00 80       	rfe 
}
80001d2a:	00 90       	ret 

80001d2c <IfxCpu_Trap_systemCall_Cpu1>:
{
80001d2c:	40 ae       	mov.aa %a14,%sp
80001d2e:	20 08       	sub.a %sp,8
80001d30:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d32:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001d36:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d3a:	8f 72 00 21 	and %d2,%d2,7
80001d3e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d42:	80 22       	mov.d %d2,%a2
80001d44:	0f 54 a0 30 	or %d3,%d4,%d5
80001d48:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80001d4c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d50:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d54:	00 80       	rfe 
}
80001d56:	00 90       	ret 

80001d58 <IfxCpu_Trap_systemCall_Cpu2>:
{
80001d58:	40 ae       	mov.aa %a14,%sp
80001d5a:	20 08       	sub.a %sp,8
80001d5c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d5e:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001d62:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d66:	8f 72 00 21 	and %d2,%d2,7
80001d6a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d6e:	80 22       	mov.d %d2,%a2
80001d70:	0f 54 a0 30 	or %d3,%d4,%d5
80001d74:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80001d78:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d7c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d80:	00 80       	rfe 
}
80001d82:	00 90       	ret 

80001d84 <IfxCpu_Trap_systemCall_Cpu3>:
{
80001d84:	40 ae       	mov.aa %a14,%sp
80001d86:	20 08       	sub.a %sp,8
80001d88:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d8a:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001d8e:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d92:	8f 72 00 21 	and %d2,%d2,7
80001d96:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d9a:	80 22       	mov.d %d2,%a2
80001d9c:	0f 54 a0 30 	or %d3,%d4,%d5
80001da0:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch);
80001da4:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001da8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001dac:	00 80       	rfe 
}
80001dae:	00 90       	ret 

80001db0 <IfxCpu_Trap_nonMaskableInterrupt>:
{
80001db0:	40 ae       	mov.aa %a14,%sp
80001db2:	20 08       	sub.a %sp,8
80001db4:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001db6:	b7 74 18 44 	insert %d4,%d4,7,8,24
80001dba:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001dbe:	8f 72 00 21 	and %d2,%d2,7
80001dc2:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001dc6:	80 22       	mov.d %d2,%a2
80001dc8:	0f 54 a0 30 	or %d3,%d4,%d5
80001dcc:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80001dd0:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001dd4:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001dd8:	00 80       	rfe 
}
80001dda:	00 90       	ret 

80001ddc <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80001ddc:	40 ae       	mov.aa %a14,%sp
80001dde:	40 4c       	mov.aa %a12,%a4
80001de0:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001de2:	80 42       	mov.d %d2,%a4
80001de4:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80001de8:	7b 00 00 3d 	movh %d3,53248
80001dec:	5f 32 2b 00 	jeq %d2,%d3,80001e42 <IfxCpu_waitEvent+0x66>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80001df0:	82 04       	mov %d4,0
80001df2:	6d ff a4 f8 	call 80000f3a <IfxScuCcu_getSourceFrequency>
80001df6:	91 30 00 2f 	movh.a %a2,61443
80001dfa:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001dfe:	54 23       	ld.w %d3,[%a2]
80001e00:	8f f3 00 31 	and %d3,%d3,15
80001e04:	4b 03 41 31 	itof %d3,%d3
80001e08:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80001e0c:	7b a0 47 34 	movh %d3,17530
80001e10:	4b 32 51 20 	div.f %d2,%d2,%d3
80001e14:	4b 08 61 41 	utof %d4,%d8
80001e18:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001e1c:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80001e20:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80001e24:	54 c2       	ld.w %d2,[%a12]
80001e26:	8f f2 00 21 	and %d2,%d2,15
80001e2a:	8b f2 20 22 	ne %d2,%d2,15
80001e2e:	df 02 18 00 	jeq %d2,0,80001e5e <IfxCpu_waitEvent+0x82>
    __asm__ volatile ("nop" : : : "memory");
80001e32:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80001e34:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
80001e38:	a2 42       	sub %d2,%d4
80001e3a:	3f 32 f5 ff 	jlt.u %d2,%d3,80001e24 <IfxCpu_waitEvent+0x48>
        {
            errorcnt = 1;
80001e3e:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80001e40:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001e42:	80 42       	mov.d %d2,%a4
80001e44:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80001e48:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80001e4c:	4d c0 e1 2f 	mfcr %d2,$core_id
80001e50:	8f c2 01 20 	sh %d2,%d2,28
80001e54:	0b 23 80 20 	sub %d2,%d3,%d2
80001e58:	60 2c       	mov.a %a12,%d2
80001e5a:	1d ff cb ff 	j 80001df0 <IfxCpu_waitEvent+0x14>
80001e5e:	00 90       	ret 

80001e60 <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80001e60:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80001e62:	4d c0 e1 2f 	mfcr %d2,$core_id
80001e66:	82 13       	mov %d3,1
80001e68:	57 30 21 22 	imask %e2,%d3,%d2,1
80001e6c:	49 42 40 08 	ldmst [%a4]0,%e2
}
80001e70:	00 90       	ret 

80001e72 <IfxCan_Node_clearRxBufferNewDataFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId)
{
80001e72:	40 ae       	mov.aa %a14,%sp
    uint32 value;

    if (rxBufferId < IfxCan_RxBufferId_32)
80001e74:	8b 04 a2 22 	ge.u %d2,%d4,32
80001e78:	df 02 08 80 	jne %d2,0,80001e88 <IfxCan_Node_clearRxBufferNewDataFlag+0x16>
    {
        value         = (1U << rxBufferId);
80001e7c:	82 12       	mov %d2,1
80001e7e:	0f 42 00 20 	sh %d2,%d2,%d4
        node->NDAT1.U = value;
80001e82:	59 42 18 60 	st.w [%a4]408,%d2
80001e86:	00 90       	ret 
    }
    else
    {
        value         = (1U << (rxBufferId - 32));
80001e88:	1b 04 fe 4f 	addi %d4,%d4,-32
80001e8c:	82 13       	mov %d3,1
80001e8e:	0f 43 00 30 	sh %d3,%d3,%d4
        node->NDAT2.U = value;
80001e92:	59 43 1c 60 	st.w [%a4]412,%d3
    }
}
80001e96:	00 90       	ret 

80001e98 <IfxCan_Node_getDataLength>:


uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode)
{
80001e98:	40 ae       	mov.aa %a14,%sp
    uint32 numBytes;

    if (dataLengthCode <= IfxCan_DataLengthCode_8)
80001e9a:	bf 94 08 80 	jlt.u %d4,9,80001eaa <IfxCan_Node_getDataLength+0x12>
    {
        numBytes = (uint32)dataLengthCode;
    }
    else if (dataLengthCode <= IfxCan_DataLengthCode_24)
80001e9e:	ff d4 0a 80 	jge.u %d4,13,80001eb2 <IfxCan_Node_getDataLength+0x1a>
    {
        numBytes = ((uint32)dataLengthCode - 6) << 2;
80001ea2:	1b a4 ff 2f 	addi %d2,%d4,-6
80001ea6:	8f 22 00 40 	sh %d4,%d2,2
    else
    {
        numBytes = ((uint32)dataLengthCode - 11) << 4;
    }

    return (numBytes + 3) >> 2;
80001eaa:	1b 34 00 20 	addi %d2,%d4,3
}
80001eae:	06 e2       	sh %d2,-2
80001eb0:	00 90       	ret 
        numBytes = ((uint32)dataLengthCode - 11) << 4;
80001eb2:	1b 54 ff 4f 	addi %d4,%d4,-11
80001eb6:	06 44       	sh %d4,4
80001eb8:	1d ff f9 ff 	j 80001eaa <IfxCan_Node_getDataLength+0x12>

80001ebc <IfxCan_Node_getFrameMode>:
    return (Ifx_CAN_EXTMSG *)extendedFilterElementAddress;
}


IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement)
{
80001ebc:	40 ae       	mov.aa %a14,%sp
    IfxCan_FrameMode frameMode;

    /* if CAN FD long frame is been selected */
    if (rxBufferElement->R1.B.FDF)
80001ebe:	d9 42 04 00 	lea %a2,[%a4]4
80001ec2:	19 42 04 00 	ld.w %d2,[%a4]4
80001ec6:	ef 52 09 00 	jz.t %d2,21,80001ed8 <IfxCan_Node_getFrameMode+0x1c>
    {
        /* if bitrate switch is been set */
        if (rxBufferElement->R1.B.BRS)
80001eca:	54 22       	ld.w %d2,[%a2]
80001ecc:	ef 42 04 80 	jnz.t %d2,20,80001ed4 <IfxCan_Node_getFrameMode+0x18>
            frameMode = IfxCan_FrameMode_fdLongAndFast;
        }
        /* if bitrate switch is not been set */
        else
        {
            frameMode = IfxCan_FrameMode_fdLong;
80001ed0:	82 12       	mov %d2,1
    {
        frameMode = IfxCan_FrameMode_standard;
    }

    return frameMode;
}
80001ed2:	00 90       	ret 
            frameMode = IfxCan_FrameMode_fdLongAndFast;
80001ed4:	82 22       	mov %d2,2
80001ed6:	00 90       	ret 
        frameMode = IfxCan_FrameMode_standard;
80001ed8:	82 02       	mov %d2,0
80001eda:	00 90       	ret 

80001edc <IfxCan_Node_getRxBufferDataFieldSize>:
    return frameMode;
}


uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node)
{
80001edc:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.RBDS;
80001ede:	19 42 3c 60 	ld.w %d2,[%a4]444
80001ee2:	37 02 63 24 	extr.u %d2,%d2,8,3

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001ee6:	ff 52 07 80 	jge.u %d2,5,80001ef4 <IfxCan_Node_getRxBufferDataFieldSize+0x18>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001eea:	c2 22       	add %d2,2
80001eec:	06 22       	sh %d2,2
80001eee:	8f f2 0f 21 	and %d2,%d2,255
80001ef2:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001ef4:	c2 d2       	add %d2,-3
80001ef6:	06 42       	sh %d2,4
80001ef8:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001efc:	00 90       	ret 

80001efe <IfxCan_Node_getRxBufferElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001efe:	40 ae       	mov.aa %a14,%sp
80001f00:	02 49       	mov %d9,%d4
80001f02:	02 6a       	mov %d10,%d6
80001f04:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxBufferIndex, rxBufferSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes = IfxCan_Node_getRxBufferDataFieldSize(node);
80001f08:	6d ff ea ff 	call 80001edc <IfxCan_Node_getRxBufferDataFieldSize>
80001f0c:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxBufferSize   = numOfconfigBytes + numOfDataBytes;
80001f10:	1b 82 00 20 	addi %d2,%d2,8
80001f14:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxBufferIndex  = rxBufferSize * ((uint16)rxBufferNumber);
80001f18:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001f1c:	e2 a2       	mul %d2,%d10
80001f1e:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxBufferElementAddress = ramBaseAddress + rxBuffersStartAddress + rxBufferIndex;
80001f22:	60 82       	mov.a %a2,%d8
80001f24:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxBufferElementAddress;
}
80001f28:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001f2c:	00 90       	ret 

80001f2e <IfxCan_Node_getRxFifo0DataFieldSize>:


uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node)
{
80001f2e:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F0DS;
80001f30:	19 42 3c 60 	ld.w %d2,[%a4]444
80001f34:	8f 72 00 21 	and %d2,%d2,7

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001f38:	ff 52 05 80 	jge.u %d2,5,80001f42 <IfxCan_Node_getRxFifo0DataFieldSize+0x14>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001f3c:	c2 22       	add %d2,2
80001f3e:	06 22       	sh %d2,2
80001f40:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001f42:	c2 d2       	add %d2,-3
80001f44:	06 42       	sh %d2,4
80001f46:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001f4a:	00 90       	ret 

80001f4c <IfxCan_Node_getRxFifo0ElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001f4c:	40 ae       	mov.aa %a14,%sp
80001f4e:	02 49       	mov %d9,%d4
80001f50:	02 6a       	mov %d10,%d6
80001f52:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes     = IfxCan_Node_getRxFifo0DataFieldSize(node);
80001f56:	6d ff ec ff 	call 80001f2e <IfxCan_Node_getRxFifo0DataFieldSize>
80001f5a:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
80001f5e:	1b 82 00 20 	addi %d2,%d2,8
80001f62:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
80001f66:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001f6a:	e2 a2       	mul %d2,%d10
80001f6c:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxFifoElementAddress = ramBaseAddress + rxFifo0StartAddress + rxFifoElementIndex;
80001f70:	60 82       	mov.a %a2,%d8
80001f72:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
}
80001f76:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001f7a:	00 90       	ret 

80001f7c <IfxCan_Node_getRxFifo1DataFieldSize>:


uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node)
{
80001f7c:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F1DS;
80001f7e:	19 42 3c 60 	ld.w %d2,[%a4]444
80001f82:	37 02 63 22 	extr.u %d2,%d2,4,3

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001f86:	ff 52 07 80 	jge.u %d2,5,80001f94 <IfxCan_Node_getRxFifo1DataFieldSize+0x18>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001f8a:	c2 22       	add %d2,2
80001f8c:	06 22       	sh %d2,2
80001f8e:	8f f2 0f 21 	and %d2,%d2,255
80001f92:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001f94:	c2 d2       	add %d2,-3
80001f96:	06 42       	sh %d2,4
80001f98:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001f9c:	00 90       	ret 

80001f9e <IfxCan_Node_getRxFifo1ElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001f9e:	40 ae       	mov.aa %a14,%sp
80001fa0:	02 49       	mov %d9,%d4
80001fa2:	02 6a       	mov %d10,%d6
80001fa4:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes     = IfxCan_Node_getRxFifo1DataFieldSize(node);
80001fa8:	6d ff ea ff 	call 80001f7c <IfxCan_Node_getRxFifo1DataFieldSize>
80001fac:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
80001fb0:	1b 82 00 20 	addi %d2,%d2,8
80001fb4:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
80001fb8:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001fbc:	e2 a2       	mul %d2,%d10
80001fbe:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxFifoElementAddress = ramBaseAddress + rxFifo1StartAddress + rxFifoElementIndex;
80001fc2:	60 82       	mov.a %a2,%d8
80001fc4:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
}
80001fc8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001fcc:	00 90       	ret 

80001fce <IfxCan_Node_getStandardFilterElementAddress>:


Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber)
{
80001fce:	40 ae       	mov.aa %a14,%sp
    uint32 standardFilterElementAddress, filterIndex;

    filterIndex                  = filterNumber * 4;
80001fd0:	06 26       	sh %d6,2
    standardFilterElementAddress = ramBaseAddress + standardFilterListStartAddress + filterIndex;
80001fd2:	60 52       	mov.a %a2,%d5
80001fd4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0

    return (Ifx_CAN_STDMSG *)standardFilterElementAddress;
}
80001fd8:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80001fdc:	00 90       	ret 

80001fde <IfxCan_Node_getTxBufferDataFieldSize>:


uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node)
{
80001fde:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->TX.ESC.B.TBDS;
80001fe0:	19 42 08 70 	ld.w %d2,[%a4]456
80001fe4:	8f 72 00 21 	and %d2,%d2,7

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001fe8:	ff 52 05 80 	jge.u %d2,5,80001ff2 <IfxCan_Node_getTxBufferDataFieldSize+0x14>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001fec:	c2 22       	add %d2,2
80001fee:	06 22       	sh %d2,2
80001ff0:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001ff2:	c2 d2       	add %d2,-3
80001ff4:	06 42       	sh %d2,4
80001ff6:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001ffa:	00 90       	ret 

80001ffc <IfxCan_Node_getTxBufferElementAddress>:


Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber)
{
80001ffc:	40 ae       	mov.aa %a14,%sp
80001ffe:	02 49       	mov %d9,%d4
80002000:	02 6a       	mov %d10,%d6
80002002:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 txBufferIndex, txBufferSize, numOfDataBytes, numOfConfigBytes = 8;

    numOfDataBytes = IfxCan_Node_getTxBufferDataFieldSize(node);
80002006:	6d ff ec ff 	call 80001fde <IfxCan_Node_getTxBufferDataFieldSize>
8000200a:	37 02 70 20 	extr.u %d2,%d2,0,16
    txBufferSize   = numOfConfigBytes + numOfDataBytes;
8000200e:	1b 82 00 20 	addi %d2,%d2,8
80002012:	37 02 70 20 	extr.u %d2,%d2,0,16
    txBufferIndex  = txBufferSize * ((uint16)txBufferNumber);
80002016:	37 0a 70 a0 	extr.u %d10,%d10,0,16
8000201a:	e2 a2       	mul %d2,%d10
8000201c:	37 02 70 20 	extr.u %d2,%d2,0,16

    uint32 txBufferElementAddress = ramBaseAddress + txBuffersStartAddress + txBufferIndex;
80002020:	60 82       	mov.a %a2,%d8
80002022:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    return (Ifx_CAN_TXMSG *)txBufferElementAddress;
}
80002026:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000202a:	00 90       	ret 

8000202c <IfxCan_Node_initRxPin>:
    return (Ifx_CAN_TXEVENT *)txEventFifoElementAddress;
}


boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver)
{
8000202c:	40 ae       	mov.aa %a14,%sp
8000202e:	40 4d       	mov.aa %a13,%a4
80002030:	40 5c       	mov.aa %a12,%a5
80002032:	02 58       	mov %d8,%d5
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80002034:	02 45       	mov %d5,%d4
80002036:	39 54 0c 00 	ld.bu %d4,[%a5]12
8000203a:	99 54 08 00 	ld.a %a4,[%a5]8
8000203e:	6d ff 72 fd 	call 80001b22 <IfxPort_setPinMode>
    IfxPort_setPinModeInput(rxd->pin.port, rxd->pin.pinIndex, mode);
    IfxPort_setPinPadDriver(rxd->pin.port, rxd->pin.pinIndex, padDriver);
80002042:	02 85       	mov %d5,%d8
80002044:	39 c4 0c 00 	ld.bu %d4,[%a12]12
80002048:	99 c4 08 00 	ld.a %a4,[%a12]8
8000204c:	6d ff a8 fd 	call 80001b9c <IfxPort_setPinPadDriver>
    node->NPCR.B.RXSEL = rxd->select;
80002050:	19 c3 10 00 	ld.w %d3,[%a12]16
80002054:	d9 d2 00 10 	lea %a2,[%a13]64
80002058:	19 d2 00 10 	ld.w %d2,[%a13]64
8000205c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80002060:	74 22       	st.w [%a2],%d2

    return TRUE;
}
80002062:	82 12       	mov %d2,1
80002064:	00 90       	ret 

80002066 <IfxCan_Node_initTxPin>:


boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver)
{
80002066:	40 ae       	mov.aa %a14,%sp
80002068:	40 4c       	mov.aa %a12,%a4
8000206a:	02 58       	mov %d8,%d5
    IfxPort_setPinModeOutput(txd->pin.port, txd->pin.pinIndex, mode, txd->select);
8000206c:	19 45 10 00 	ld.w %d5,[%a4]16
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80002070:	a6 45       	or %d5,%d4
80002072:	39 44 0c 00 	ld.bu %d4,[%a4]12
80002076:	99 44 08 00 	ld.a %a4,[%a4]8
8000207a:	6d ff 54 fd 	call 80001b22 <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(txd->pin.port, txd->pin.pinIndex, padDriver);
8000207e:	02 85       	mov %d5,%d8
80002080:	39 c4 0c 00 	ld.bu %d4,[%a12]12
80002084:	99 c4 08 00 	ld.a %a4,[%a12]8
80002088:	6d ff 8a fd 	call 80001b9c <IfxPort_setPinPadDriver>

    return TRUE;
}
8000208c:	82 12       	mov %d2,1
8000208e:	00 90       	ret 

80002090 <IfxCan_Node_readData>:
    }
}


void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
{
80002090:	40 ae       	mov.aa %a14,%sp
80002092:	80 49       	mov.d %d9,%a4
80002094:	80 58       	mov.d %d8,%a5
    uint32  i;
    uint32 *destinationAddress = (uint32 *)rxBufferElement + 2;
    /* get number of data bytes from data length code (DLC) */
    uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
80002096:	6d ff 01 ff 	call 80001e98 <IfxCan_Node_getDataLength>

    /* read data from the data section of Rx Buffer element  */
    for (i = 0; i < length; i++)
8000209a:	82 03       	mov %d3,0
8000209c:	1d 00 0e 00 	j 800020b8 <IfxCan_Node_readData+0x28>
    {
        data[i] = destinationAddress[i];
800020a0:	8f 23 00 40 	sh %d4,%d3,2
800020a4:	60 82       	mov.a %a2,%d8
800020a6:	01 24 00 36 	addsc.a %a3,%a2,%d4,0
800020aa:	60 92       	mov.a %a2,%d9
800020ac:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800020b0:	19 24 08 00 	ld.w %d4,[%a2]8
800020b4:	74 34       	st.w [%a3],%d4
    for (i = 0; i < length; i++)
800020b6:	c2 13       	add %d3,1
800020b8:	3f 23 f4 ff 	jlt.u %d3,%d2,800020a0 <IfxCan_Node_readData+0x10>
    }
}
800020bc:	00 90       	ret 

800020be <IfxCan_Node_setBitTiming>:


void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
{
800020be:	40 ae       	mov.aa %a14,%sp
     * TSeg1 >= Tsjw + Tprop
     * TSeg2 >= Tsjw
     */

    /* search for best baudrate */
    bestError = (float32)baudrate;
800020c0:	4b 05 61 51 	utof %d5,%d5
800020c4:	02 59       	mov %d9,%d5
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
800020c6:	3b 80 00 80 	mov %d8,8
800020ca:	82 1a       	mov %d10,1
    maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;

    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
800020cc:	02 a0       	mov %d0,%d10
800020ce:	1d 00 0a 00 	j 800020e2 <IfxCan_Node_setBitTiming+0x24>
        {
            break; /* to avoid division by 0 */
        }

        float32 tempBaudrate = Fquanta / tempTBAUD;
        float32 error        = __absf(tempBaudrate - baudrate);
800020d2:	9b 03 00 38 	addih %d3,%d3,32768
800020d6:	1d 00 1f 00 	j 80002114 <IfxCan_Node_setBitTiming+0x56>

        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
        {
            bestBRP   = tempBRP;
            bestTBAUD = tempTBAUD;
            bestError = error;
800020da:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
800020dc:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
800020de:	02 0a       	mov %d10,%d0
    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
800020e0:	c2 10       	add %d0,1
800020e2:	3b 10 20 30 	mov %d3,513
800020e6:	7f 30 38 00 	jge %d0,%d3,80002156 <IfxCan_Node_setBitTiming+0x98>
        float32 Fquanta = moduleFreq / tempBRP;
800020ea:	4b 00 41 31 	itof %d3,%d0
800020ee:	4b 34 51 30 	div.f %d3,%d4,%d3
        tempTBAUD = Fquanta / baudrate;
800020f2:	4b 53 51 20 	div.f %d2,%d3,%d5
800020f6:	4b 02 31 21 	ftoiz %d2,%d2
        if (tempTBAUD == 0)
800020fa:	df 02 2e 00 	jeq %d2,0,80002156 <IfxCan_Node_setBitTiming+0x98>
        float32 tempBaudrate = Fquanta / tempTBAUD;
800020fe:	4b 02 41 11 	itof %d1,%d2
80002102:	4b 13 51 30 	div.f %d3,%d3,%d1
        float32 error        = __absf(tempBaudrate - baudrate);
80002106:	6b 05 31 33 	sub.f %d3,%d3,%d5
8000210a:	82 01       	mov %d1,0
8000210c:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002110:	6f 01 e1 ff 	jnz.t %d1,0,800020d2 <IfxCan_Node_setBitTiming+0x14>
        if (tempTBAUD < minTBAUD)
80002114:	8b 82 40 12 	lt %d1,%d2,8
80002118:	df 01 1f 80 	jne %d1,0,80002156 <IfxCan_Node_setBitTiming+0x98>
        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
8000211c:	3b 20 18 10 	mov %d1,386
80002120:	7f 12 e0 7f 	jge %d2,%d1,800020e0 <IfxCan_Node_setBitTiming+0x22>
80002124:	4b 39 01 10 	cmp.f %d1,%d9,%d3
80002128:	87 11 a2 10 	or.t %d1,%d1,2,%d1,1
8000212c:	df 01 da 7f 	jeq %d1,0,800020e0 <IfxCan_Node_setBitTiming+0x22>

            if ((tempTBAUD <= 20) && (error < 0.1f))
80002130:	8b 52 81 12 	ge %d1,%d2,21
80002134:	df 01 d3 ff 	jne %d1,0,800020da <IfxCan_Node_setBitTiming+0x1c>
80002138:	7b d0 dc 13 	movh %d1,15821
8000213c:	1b d1 cc 1c 	addi %d1,%d1,-13107
80002140:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002144:	6f 01 07 80 	jnz.t %d1,0,80002152 <IfxCan_Node_setBitTiming+0x94>
            bestError = error;
80002148:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
8000214a:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
8000214c:	02 0a       	mov %d10,%d0
8000214e:	1d ff c9 ff 	j 800020e0 <IfxCan_Node_setBitTiming+0x22>
            bestTBAUD = tempTBAUD;
80002152:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002154:	02 0a       	mov %d10,%d0
                break;      /* optimal condition */
            }
        }
    }

    if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
80002156:	df 0a 06 80 	jne %d10,0,80002162 <IfxCan_Node_setBitTiming+0xa4>
8000215a:	3b 10 20 30 	mov %d3,513
8000215e:	5f 30 1b 00 	jeq %d0,%d3,80002194 <IfxCan_Node_setBitTiming+0xd6>
        bestTBAUD = maxTBAUD;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
80002162:	8b 0a 00 32 	eq %d3,%d10,0
80002166:	8b 82 40 22 	lt %d2,%d2,8
8000216a:	26 32       	and %d2,%d3
8000216c:	df 02 05 00 	jeq %d2,0,80002176 <IfxCan_Node_setBitTiming+0xb8>
    {
        bestBRP   = minBRP;
        bestTBAUD = minTBAUD;
80002170:	3b 80 00 80 	mov %d8,8
        bestBRP   = minBRP;
80002174:	82 1a       	mov %d10,1

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best sample point */
    bestError = samplePoint * 0.25f; /* 25% tolerance in sample point as max error */
80002176:	02 61       	mov %d1,%d6
80002178:	4b 06 41 21 	itof %d2,%d6
8000217c:	7b 00 e8 53 	movh %d5,16000
80002180:	4b 52 41 50 	mul.f %d5,%d2,%d5

    if (bestTBAUD < maxTSEG1)
80002184:	3b 00 10 20 	mov %d2,256
80002188:	3f 28 0c 00 	jlt %d8,%d2,800021a0 <IfxCan_Node_setBitTiming+0xe2>
    sint32  maxTSEG1 = IFX_CAN_N_NBTP_NTSEG1_MSK + 1;
8000218c:	02 24       	mov %d4,%d2
    {
        maxTSEG1 = bestTBAUD;
    }

    bestTSEG1 = maxTSEG1;
8000218e:	02 49       	mov %d9,%d4

    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
80002190:	1d 00 0e 00 	j 800021ac <IfxCan_Node_setBitTiming+0xee>
        bestTBAUD = maxTBAUD;
80002194:	3b 10 18 80 	mov %d8,385
        bestBRP   = maxBRP;
80002198:	3b 00 20 a0 	mov %d10,512
8000219c:	1d ff e3 ff 	j 80002162 <IfxCan_Node_setBitTiming+0xa4>
        maxTSEG1 = bestTBAUD;
800021a0:	02 84       	mov %d4,%d8
800021a2:	1d ff f6 ff 	j 8000218e <IfxCan_Node_setBitTiming+0xd0>
        {
            bestTSEG1 = tempTSEG1;
            bestError = (float)error;
        }

        if (tempSamplePoint < samplePoint)
800021a6:	3f 10 18 00 	jlt %d0,%d1,800021d6 <IfxCan_Node_setBitTiming+0x118>
    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
800021aa:	c2 f4       	add %d4,-1
800021ac:	bf 34 15 00 	jlt %d4,3,800021d6 <IfxCan_Node_setBitTiming+0x118>
        sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
800021b0:	3b 00 71 22 	mov %d2,10000
800021b4:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
800021b8:	4b 82 01 22 	div %e2,%d2,%d8
800021bc:	02 20       	mov %d0,%d2
        sint32 error           = __abs(tempSamplePoint - samplePoint);
800021be:	0b 62 e0 20 	absdif %d2,%d2,%d6
        if (bestError > error)
800021c2:	4b 02 41 21 	itof %d2,%d2
800021c6:	4b 52 01 30 	cmp.f %d3,%d2,%d5
800021ca:	6f 03 ee 7f 	jz.t %d3,0,800021a6 <IfxCan_Node_setBitTiming+0xe8>
            bestError = (float)error;
800021ce:	02 25       	mov %d5,%d2
            bestTSEG1 = tempTSEG1;
800021d0:	02 49       	mov %d9,%d4
800021d2:	1d ff ea ff 	j 800021a6 <IfxCan_Node_setBitTiming+0xe8>
            /*least possible error */
            break;  /* least possible error has already occured */
        }
    }

    bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
800021d6:	0b 98 80 20 	sub %d2,%d8,%d9
800021da:	1b f2 ff 5f 	addi %d5,%d2,-1

    if (bestTSEG2 > maxTSEG2)
800021de:	8b 15 88 22 	ge %d2,%d5,129
800021e2:	df 02 07 80 	jne %d2,0,800021f0 <IfxCan_Node_setBitTiming+0x132>
        bestTSEG2 = maxTSEG2;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if (bestTSEG2 < minTSEG2)
800021e6:	ff 25 07 00 	jge %d5,2,800021f4 <IfxCan_Node_setBitTiming+0x136>
    {
        bestTSEG2 = minTSEG2;
800021ea:	82 25       	mov %d5,2
800021ec:	1d 00 04 00 	j 800021f4 <IfxCan_Node_setBitTiming+0x136>
        bestTSEG2 = maxTSEG2;
800021f0:	3b 00 08 50 	mov %d5,128

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best SJW */
    bestError = 10000;
800021f4:	7b c0 61 64 	movh %d6,17948
800021f8:	1b 06 00 64 	addi %d6,%d6,16384
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
800021fc:	82 10       	mov %d0,1

    for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
800021fe:	02 04       	mov %d4,%d0
80002200:	1d 00 03 00 	j 80002206 <IfxCan_Node_setBitTiming+0x148>
80002204:	c2 14       	add %d4,1
80002206:	3f 45 13 00 	jlt %d5,%d4,8000222c <IfxCan_Node_setBitTiming+0x16e>
    {
        sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
8000220a:	3b 00 71 22 	mov %d2,10000
8000220e:	e2 42       	mul %d2,%d4
80002210:	4b 82 01 22 	div %e2,%d2,%d8
        sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
80002214:	0b 72 e0 20 	absdif %d2,%d2,%d7

        if (bestError > error)
80002218:	4b 02 41 21 	itof %d2,%d2
8000221c:	4b 62 01 30 	cmp.f %d3,%d2,%d6
80002220:	6f 03 f2 7f 	jz.t %d3,0,80002204 <IfxCan_Node_setBitTiming+0x146>
        {
            bestSJW   = tempSJW;
            bestError = (float)error;
80002224:	02 26       	mov %d6,%d2
            bestSJW   = tempSJW;
80002226:	02 40       	mov %d0,%d4
80002228:	1d ff ee ff 	j 80002204 <IfxCan_Node_setBitTiming+0x146>
        }
    }

    {
        node->NBTP.B.NBRP   = bestBRP - 1;
8000222c:	c2 fa       	add %d10,-1
8000222e:	d9 42 1c 40 	lea %a2,[%a4]284
80002232:	19 42 1c 40 	ld.w %d2,[%a4]284
80002236:	37 a2 09 28 	insert %d2,%d2,%d10,16,9
8000223a:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NSJW   = bestSJW - 1;
8000223c:	c2 f0       	add %d0,-1
8000223e:	54 22       	ld.w %d2,[%a2]
80002240:	37 02 87 2c 	insert %d2,%d2,%d0,25,7
80002244:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NTSEG1 = bestTSEG1 - 1;
80002246:	c2 f9       	add %d9,-1
80002248:	54 22       	ld.w %d2,[%a2]
8000224a:	37 92 08 24 	insert %d2,%d2,%d9,8,8
8000224e:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NTSEG2 = bestTSEG2 - 1;
80002250:	c2 f5       	add %d5,-1
80002252:	54 22       	ld.w %d2,[%a2]
80002254:	37 52 07 20 	insert %d2,%d2,%d5,0,7
80002258:	74 22       	st.w [%a2],%d2
    }
}
8000225a:	00 90       	ret 

8000225c <IfxCan_Node_setBitTimingValues>:


void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
{
8000225c:	40 ae       	mov.aa %a14,%sp
    Ifx_CAN_N_NBTP nbtp;
    nbtp.U        = node->NBTP.U;
8000225e:	d9 42 1c 40 	lea %a2,[%a4]284
80002262:	19 42 1c 40 	ld.w %d2,[%a4]284
    nbtp.B.NSJW   = syncJumpWidth;
80002266:	37 42 87 2c 	insert %d2,%d2,%d4,25,7
    nbtp.B.NTSEG1 = timeSegment1;
8000226a:	37 62 08 24 	insert %d2,%d2,%d6,8,8
    nbtp.B.NTSEG2 = timeSegment2;
8000226e:	37 52 07 20 	insert %d2,%d2,%d5,0,7
    nbtp.B.NBRP   = prescaler;
80002272:	37 72 09 28 	insert %d2,%d2,%d7,16,9

    node->NBTP.U  = nbtp.U;
80002276:	74 22       	st.w [%a2],%d2
}
80002278:	00 90       	ret 

8000227a <IfxCan_Node_setFastBitTiming>:


void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
{
8000227a:	40 ae       	mov.aa %a14,%sp
     * TSeg1 >= Tsjw + Tprop
     * TSeg2 >= Tsjw
     */

    /* search for best baudrate */
    bestError = (float32)baudrate;
8000227c:	4b 05 61 51 	utof %d5,%d5
80002280:	02 59       	mov %d9,%d5
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
80002282:	3b 80 00 80 	mov %d8,8
80002286:	82 1a       	mov %d10,1
    maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;

    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
80002288:	02 a0       	mov %d0,%d10
8000228a:	1d 00 0a 00 	j 8000229e <IfxCan_Node_setFastBitTiming+0x24>
        {
            break; /* to avoid division by 0 */
        }

        float32 tempBaudrate = Fquanta / tempTBAUD;
        float32 error        = __absf(tempBaudrate - baudrate);
8000228e:	9b 03 00 38 	addih %d3,%d3,32768
80002292:	1d 00 1f 00 	j 800022d0 <IfxCan_Node_setFastBitTiming+0x56>

        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
        {
            bestBRP   = tempBRP;
            bestTBAUD = tempTBAUD;
            bestError = error;
80002296:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
80002298:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
8000229a:	02 0a       	mov %d10,%d0
    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
8000229c:	c2 10       	add %d0,1
8000229e:	8b 10 42 32 	lt %d3,%d0,33
800022a2:	df 03 38 00 	jeq %d3,0,80002312 <IfxCan_Node_setFastBitTiming+0x98>
        float32 Fquanta = moduleFreq / tempBRP;
800022a6:	4b 00 41 31 	itof %d3,%d0
800022aa:	4b 34 51 30 	div.f %d3,%d4,%d3
        tempTBAUD = Fquanta / baudrate;
800022ae:	4b 53 51 20 	div.f %d2,%d3,%d5
800022b2:	4b 02 31 21 	ftoiz %d2,%d2
        if (tempTBAUD == 0)
800022b6:	df 02 2e 00 	jeq %d2,0,80002312 <IfxCan_Node_setFastBitTiming+0x98>
        float32 tempBaudrate = Fquanta / tempTBAUD;
800022ba:	4b 02 41 11 	itof %d1,%d2
800022be:	4b 13 51 30 	div.f %d3,%d3,%d1
        float32 error        = __absf(tempBaudrate - baudrate);
800022c2:	6b 05 31 33 	sub.f %d3,%d3,%d5
800022c6:	82 01       	mov %d1,0
800022c8:	4b 13 01 10 	cmp.f %d1,%d3,%d1
800022cc:	6f 01 e1 ff 	jnz.t %d1,0,8000228e <IfxCan_Node_setFastBitTiming+0x14>
        if (tempTBAUD < minTBAUD)
800022d0:	8b 82 40 12 	lt %d1,%d2,8
800022d4:	df 01 1f 80 	jne %d1,0,80002312 <IfxCan_Node_setFastBitTiming+0x98>
        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
800022d8:	8b 22 83 12 	ge %d1,%d2,50
800022dc:	df 01 e0 ff 	jne %d1,0,8000229c <IfxCan_Node_setFastBitTiming+0x22>
800022e0:	4b 39 01 10 	cmp.f %d1,%d9,%d3
800022e4:	87 11 a2 10 	or.t %d1,%d1,2,%d1,1
800022e8:	df 01 da 7f 	jeq %d1,0,8000229c <IfxCan_Node_setFastBitTiming+0x22>

            if ((tempTBAUD <= 20) && (error < 0.1f))
800022ec:	8b 52 81 12 	ge %d1,%d2,21
800022f0:	df 01 d3 ff 	jne %d1,0,80002296 <IfxCan_Node_setFastBitTiming+0x1c>
800022f4:	7b d0 dc 13 	movh %d1,15821
800022f8:	1b d1 cc 1c 	addi %d1,%d1,-13107
800022fc:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002300:	6f 01 07 80 	jnz.t %d1,0,8000230e <IfxCan_Node_setFastBitTiming+0x94>
            bestError = error;
80002304:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
80002306:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002308:	02 0a       	mov %d10,%d0
8000230a:	1d ff c9 ff 	j 8000229c <IfxCan_Node_setFastBitTiming+0x22>
            bestTBAUD = tempTBAUD;
8000230e:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002310:	02 0a       	mov %d10,%d0
                break;      /* optimal condition */
            }
        }
    }

    if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
80002312:	df 0a 06 80 	jne %d10,0,8000231e <IfxCan_Node_setFastBitTiming+0xa4>
80002316:	8b 10 02 02 	eq %d0,%d0,33
8000231a:	df 00 1c 80 	jne %d0,0,80002352 <IfxCan_Node_setFastBitTiming+0xd8>
        bestTBAUD = maxTBAUD;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
8000231e:	8b 0a 00 32 	eq %d3,%d10,0
80002322:	8b 82 40 22 	lt %d2,%d2,8
80002326:	26 32       	and %d2,%d3
80002328:	df 02 05 00 	jeq %d2,0,80002332 <IfxCan_Node_setFastBitTiming+0xb8>
    {
        bestBRP   = minBRP;
        bestTBAUD = minTBAUD;
8000232c:	3b 80 00 80 	mov %d8,8
        bestBRP   = minBRP;
80002330:	82 1a       	mov %d10,1

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best sample point */
    bestError = samplePoint * 0.25f; /* 25% tolerance in sample point as max error */
80002332:	02 61       	mov %d1,%d6
80002334:	4b 06 41 21 	itof %d2,%d6
80002338:	7b 00 e8 53 	movh %d5,16000
8000233c:	4b 52 41 50 	mul.f %d5,%d2,%d5

    if (bestTBAUD < maxTSEG1)
80002340:	8b 08 42 22 	lt %d2,%d8,32
80002344:	df 02 0d 80 	jne %d2,0,8000235e <IfxCan_Node_setFastBitTiming+0xe4>
    sint32  maxTSEG1 = IFX_CAN_N_DBTP_DTSEG1_MSK + 1;
80002348:	3b 00 02 40 	mov %d4,32
    {
        maxTSEG1 = bestTBAUD;
    }

    bestTSEG1 = maxTSEG1;
8000234c:	02 49       	mov %d9,%d4

    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
8000234e:	1d 00 0e 00 	j 8000236a <IfxCan_Node_setFastBitTiming+0xf0>
        bestTBAUD = maxTBAUD;
80002352:	3b 10 03 80 	mov %d8,49
        bestBRP   = maxBRP;
80002356:	3b 00 02 a0 	mov %d10,32
8000235a:	1d ff e2 ff 	j 8000231e <IfxCan_Node_setFastBitTiming+0xa4>
        maxTSEG1 = bestTBAUD;
8000235e:	02 84       	mov %d4,%d8
80002360:	1d ff f6 ff 	j 8000234c <IfxCan_Node_setFastBitTiming+0xd2>
        {
            bestTSEG1 = tempTSEG1;
            bestError = (float)error;
        }

        if (tempSamplePoint < samplePoint)
80002364:	3f 10 18 00 	jlt %d0,%d1,80002394 <IfxCan_Node_setFastBitTiming+0x11a>
    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
80002368:	c2 f4       	add %d4,-1
8000236a:	bf 34 15 00 	jlt %d4,3,80002394 <IfxCan_Node_setFastBitTiming+0x11a>
        sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
8000236e:	3b 00 71 22 	mov %d2,10000
80002372:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80002376:	4b 82 01 22 	div %e2,%d2,%d8
8000237a:	02 20       	mov %d0,%d2
        sint32 error           = __abs(tempSamplePoint - samplePoint);
8000237c:	0b 62 e0 20 	absdif %d2,%d2,%d6
        if (bestError > error)
80002380:	4b 02 41 21 	itof %d2,%d2
80002384:	4b 52 01 30 	cmp.f %d3,%d2,%d5
80002388:	6f 03 ee 7f 	jz.t %d3,0,80002364 <IfxCan_Node_setFastBitTiming+0xea>
            bestError = (float)error;
8000238c:	02 25       	mov %d5,%d2
            bestTSEG1 = tempTSEG1;
8000238e:	02 49       	mov %d9,%d4
80002390:	1d ff ea ff 	j 80002364 <IfxCan_Node_setFastBitTiming+0xea>
        {
            break;  /* least possible error has already occured */
        }
    }

    bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
80002394:	0b 98 80 20 	sub %d2,%d8,%d9
80002398:	1b f2 ff 5f 	addi %d5,%d2,-1

    if (bestTSEG2 > maxTSEG2)
8000239c:	8b 15 81 22 	ge %d2,%d5,17
800023a0:	df 02 07 80 	jne %d2,0,800023ae <IfxCan_Node_setFastBitTiming+0x134>
        bestTSEG2 = maxTSEG2;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if (bestTSEG2 < minTSEG2)
800023a4:	ff 25 07 00 	jge %d5,2,800023b2 <IfxCan_Node_setFastBitTiming+0x138>
    {
        bestTSEG2 = minTSEG2;
800023a8:	82 25       	mov %d5,2
800023aa:	1d 00 04 00 	j 800023b2 <IfxCan_Node_setFastBitTiming+0x138>
        bestTSEG2 = maxTSEG2;
800023ae:	3b 00 01 50 	mov %d5,16

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best SJW */
    bestError = 10000;
800023b2:	7b c0 61 64 	movh %d6,17948
800023b6:	1b 06 00 64 	addi %d6,%d6,16384
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
800023ba:	82 10       	mov %d0,1

    for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
800023bc:	02 04       	mov %d4,%d0
800023be:	1d 00 03 00 	j 800023c4 <IfxCan_Node_setFastBitTiming+0x14a>
800023c2:	c2 14       	add %d4,1
800023c4:	3f 45 13 00 	jlt %d5,%d4,800023ea <IfxCan_Node_setFastBitTiming+0x170>
    {
        sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
800023c8:	3b 00 71 22 	mov %d2,10000
800023cc:	e2 42       	mul %d2,%d4
800023ce:	4b 82 01 22 	div %e2,%d2,%d8
        sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
800023d2:	0b 72 e0 20 	absdif %d2,%d2,%d7

        if (bestError > error)
800023d6:	4b 02 41 21 	itof %d2,%d2
800023da:	4b 62 01 30 	cmp.f %d3,%d2,%d6
800023de:	6f 03 f2 7f 	jz.t %d3,0,800023c2 <IfxCan_Node_setFastBitTiming+0x148>
        {
            bestSJW   = tempSJW;
            bestError = (float)error;
800023e2:	02 26       	mov %d6,%d2
            bestSJW   = tempSJW;
800023e4:	02 40       	mov %d0,%d4
800023e6:	1d ff ee ff 	j 800023c2 <IfxCan_Node_setFastBitTiming+0x148>
        }
    }

    {
        node->DBTP.B.DBRP   = bestBRP - 1;
800023ea:	c2 fa       	add %d10,-1
800023ec:	d9 42 0c 40 	lea %a2,[%a4]268
800023f0:	19 42 0c 40 	ld.w %d2,[%a4]268
800023f4:	37 a2 05 28 	insert %d2,%d2,%d10,16,5
800023f8:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DSJW   = bestSJW - 1;
800023fa:	c2 f0       	add %d0,-1
800023fc:	54 22       	ld.w %d2,[%a2]
800023fe:	37 02 04 20 	insert %d2,%d2,%d0,0,4
80002402:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DTSEG1 = bestTSEG1 - 1;
80002404:	c2 f9       	add %d9,-1
80002406:	54 22       	ld.w %d2,[%a2]
80002408:	37 92 05 24 	insert %d2,%d2,%d9,8,5
8000240c:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DTSEG2 = bestTSEG2 - 1;
8000240e:	c2 f5       	add %d5,-1
80002410:	54 22       	ld.w %d2,[%a2]
80002412:	37 52 04 22 	insert %d2,%d2,%d5,4,4
80002416:	74 22       	st.w [%a2],%d2
    }
}
80002418:	00 90       	ret 

8000241a <IfxCan_Node_setFastBitTimingValues>:


void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
{
8000241a:	40 ae       	mov.aa %a14,%sp
    Ifx_CAN_N_DBTP dbtp;
    dbtp.U        = node->DBTP.U;
8000241c:	d9 42 0c 40 	lea %a2,[%a4]268
80002420:	19 42 0c 40 	ld.w %d2,[%a4]268
    dbtp.B.DSJW   = syncJumpWidth;
80002424:	37 42 04 20 	insert %d2,%d2,%d4,0,4
    dbtp.B.DTSEG1 = timeSegment1;
80002428:	37 62 05 24 	insert %d2,%d2,%d6,8,5
    dbtp.B.DTSEG2 = timeSegment2;
8000242c:	37 52 04 22 	insert %d2,%d2,%d5,4,4
    dbtp.B.DBRP   = prescaler;
80002430:	37 72 05 28 	insert %d2,%d2,%d7,16,5

    node->DBTP.U  = dbtp.U;
80002434:	74 22       	st.w [%a2],%d2
}
80002436:	00 90       	ret 

80002438 <IfxCan_Node_setFrameMode>:


void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode)
{
80002438:	40 ae       	mov.aa %a14,%sp
    switch (frameMode)
8000243a:	df 14 13 00 	jeq %d4,1,80002460 <IfxCan_Node_setFrameMode+0x28>
8000243e:	df 24 1d 00 	jeq %d4,2,80002478 <IfxCan_Node_setFrameMode+0x40>
80002442:	df 04 03 00 	jeq %d4,0,80002448 <IfxCan_Node_setFrameMode+0x10>
    case IfxCan_FrameMode_fdLongAndFast:
        node->CCCR.B.FDOE = 1;
        node->CCCR.B.BRSE = 1;
        break;
    }
}
80002446:	00 90       	ret 
        node->CCCR.B.FDOE = 0;
80002448:	d9 42 18 40 	lea %a2,[%a4]280
8000244c:	19 42 18 40 	ld.w %d2,[%a4]280
80002450:	8f 02 d0 21 	andn %d2,%d2,256
80002454:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 0;
80002456:	54 22       	ld.w %d2,[%a2]
80002458:	b7 02 81 24 	insert %d2,%d2,0,9,1
8000245c:	74 22       	st.w [%a2],%d2
        break;
8000245e:	00 90       	ret 
        node->CCCR.B.FDOE = 1;
80002460:	d9 42 18 40 	lea %a2,[%a4]280
80002464:	19 42 18 40 	ld.w %d2,[%a4]280
80002468:	b7 12 01 24 	insert %d2,%d2,1,8,1
8000246c:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 0;
8000246e:	54 22       	ld.w %d2,[%a2]
80002470:	b7 02 81 24 	insert %d2,%d2,0,9,1
80002474:	74 22       	st.w [%a2],%d2
        break;
80002476:	00 90       	ret 
        node->CCCR.B.FDOE = 1;
80002478:	d9 42 18 40 	lea %a2,[%a4]280
8000247c:	19 42 18 40 	ld.w %d2,[%a4]280
80002480:	b7 12 01 24 	insert %d2,%d2,1,8,1
80002484:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 1;
80002486:	54 22       	ld.w %d2,[%a2]
80002488:	b7 12 81 24 	insert %d2,%d2,1,9,1
8000248c:	74 22       	st.w [%a2],%d2
}
8000248e:	1d ff dc ff 	j 80002446 <IfxCan_Node_setFrameMode+0xe>

80002492 <IfxCan_Node_setFrameModeReq>:


void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode)
{
80002492:	40 ae       	mov.aa %a14,%sp
    switch (frameMode)
80002494:	df 14 13 00 	jeq %d4,1,800024ba <IfxCan_Node_setFrameModeReq+0x28>
80002498:	df 24 1d 00 	jeq %d4,2,800024d2 <IfxCan_Node_setFrameModeReq+0x40>
8000249c:	df 04 03 00 	jeq %d4,0,800024a2 <IfxCan_Node_setFrameModeReq+0x10>
    case IfxCan_FrameMode_fdLongAndFast:
        txBufferElement->T1.B.FDF = 1;
        txBufferElement->T1.B.BRS = 1;
        break;
    }
}
800024a0:	00 90       	ret 
        txBufferElement->T1.B.FDF = 0;
800024a2:	d9 42 04 00 	lea %a2,[%a4]4
800024a6:	19 42 04 00 	ld.w %d2,[%a4]4
800024aa:	b7 02 81 2a 	insert %d2,%d2,0,21,1
800024ae:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 0;
800024b0:	54 22       	ld.w %d2,[%a2]
800024b2:	b7 02 01 2a 	insert %d2,%d2,0,20,1
800024b6:	74 22       	st.w [%a2],%d2
        break;
800024b8:	00 90       	ret 
        txBufferElement->T1.B.FDF = 1;
800024ba:	d9 42 04 00 	lea %a2,[%a4]4
800024be:	19 42 04 00 	ld.w %d2,[%a4]4
800024c2:	b7 12 81 2a 	insert %d2,%d2,1,21,1
800024c6:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 0;
800024c8:	54 22       	ld.w %d2,[%a2]
800024ca:	b7 02 01 2a 	insert %d2,%d2,0,20,1
800024ce:	74 22       	st.w [%a2],%d2
        break;
800024d0:	00 90       	ret 
        txBufferElement->T1.B.FDF = 1;
800024d2:	d9 42 04 00 	lea %a2,[%a4]4
800024d6:	19 42 04 00 	ld.w %d2,[%a4]4
800024da:	b7 12 81 2a 	insert %d2,%d2,1,21,1
800024de:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 1;
800024e0:	54 22       	ld.w %d2,[%a2]
800024e2:	b7 12 01 2a 	insert %d2,%d2,1,20,1
800024e6:	74 22       	st.w [%a2],%d2
}
800024e8:	1d ff dc ff 	j 800024a0 <IfxCan_Node_setFrameModeReq+0xe>

800024ec <IfxCan_Node_setGroupInterruptLine>:
    }
}


void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine)
{
800024ec:	40 ae       	mov.aa %a14,%sp
800024ee:	02 52       	mov %d2,%d5
    if (interruptGroup <= IfxCan_InterruptGroup_loi)
800024f0:	ff 84 0c 80 	jge.u %d4,8,80002508 <IfxCan_Node_setGroupInterruptLine+0x1c>
    {
        node->GRINT1.U |= (interruptLine) << (interruptGroup * 4);
800024f4:	d9 42 14 00 	lea %a2,[%a4]20
800024f8:	19 45 14 00 	ld.w %d5,[%a4]20
800024fc:	06 24       	sh %d4,2
800024fe:	0f 42 00 20 	sh %d2,%d2,%d4
80002502:	a6 52       	or %d2,%d5
80002504:	74 22       	st.w [%a2],%d2
80002506:	00 90       	ret 
    }
    else
    {
        node->GRINT2.U |= (interruptLine) << ((interruptGroup % 8) * 4);
80002508:	d9 42 18 00 	lea %a2,[%a4]24
8000250c:	19 45 18 00 	ld.w %d5,[%a4]24
80002510:	8f 74 00 31 	and %d3,%d4,7
80002514:	06 23       	sh %d3,2
80002516:	0f 32 00 20 	sh %d2,%d2,%d3
8000251a:	a6 52       	or %d2,%d5
8000251c:	74 22       	st.w [%a2],%d2
    }
}
8000251e:	00 90       	ret 

80002520 <IfxCan_Node_writeTxBufData>:
    }
}


void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
{
80002520:	40 ae       	mov.aa %a14,%sp
80002522:	80 49       	mov.d %d9,%a4
80002524:	80 58       	mov.d %d8,%a5
    uint32  i;

    uint32 *destinationAddress = (uint32 *)txBufferElement + 2;
    /* get number of data bytes from data length code (DLC) */
    uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
80002526:	6d ff b9 fc 	call 80001e98 <IfxCan_Node_getDataLength>

    /* write data into the data section of Tx Buffer element  */
    for (i = 0; i < length; i++)
8000252a:	82 03       	mov %d3,0
8000252c:	1d 00 0f 00 	j 8000254a <IfxCan_Node_writeTxBufData+0x2a>
    {
        destinationAddress[i] = data[i];
80002530:	8f 23 00 40 	sh %d4,%d3,2
80002534:	1b 84 00 50 	addi %d5,%d4,8
80002538:	60 92       	mov.a %a2,%d9
8000253a:	01 25 00 36 	addsc.a %a3,%a2,%d5,0
8000253e:	60 82       	mov.a %a2,%d8
80002540:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002544:	54 24       	ld.w %d4,[%a2]
80002546:	74 34       	st.w [%a3],%d4
    for (i = 0; i < length; i++)
80002548:	c2 13       	add %d3,1
8000254a:	3f 23 f3 ff 	jlt.u %d3,%d2,80002530 <IfxCan_Node_writeTxBufData+0x10>
    }
}
8000254e:	00 90       	ret 

80002550 <IfxCan_enableModule>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxCan_enableModule(Ifx_CAN *can)
{
80002550:	40 ae       	mov.aa %a14,%sp
80002552:	80 48       	mov.d %d8,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80002554:	6d ff 7d fa 	call 80001a4e <IfxScuWdt_getCpuWatchdogPassword>
80002558:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
8000255a:	02 24       	mov %d4,%d2
8000255c:	6d ff 9e f9 	call 80001898 <IfxScuWdt_clearCpuEndinit>

    /*Enable module, disregard Sleep Mode request */
    can->CLC.B.DISR = 0U;
80002560:	bb 00 00 28 	mov.u %d2,32768
80002564:	60 82       	mov.a %a2,%d8
80002566:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000256a:	54 23       	ld.w %d3,[%a2]
8000256c:	8f 13 c0 31 	andn %d3,%d3,1
80002570:	74 23       	st.w [%a2],%d3
}


IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
{
    return can->CLC.B.DISS == 0;
80002572:	bb 00 00 38 	mov.u %d3,32768
80002576:	60 82       	mov.a %a2,%d8
80002578:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000257c:	54 23       	ld.w %d3,[%a2]

    /*Wait until module is enabled*/
    while (IfxCan_isModuleEnabled(can) == FALSE)
8000257e:	6f 13 fa ff 	jnz.t %d3,1,80002572 <IfxCan_enableModule+0x22>
    {}

    IfxScuWdt_setCpuEndinit(passwd);
80002582:	02 94       	mov %d4,%d9
80002584:	6d ff 82 fa 	call 80001a88 <IfxScuWdt_setCpuEndinit>
}
80002588:	00 90       	ret 

8000258a <IfxCan_getIndex>:
    return module;
}


IfxCan_Index IfxCan_getIndex(Ifx_CAN *can)
{
8000258a:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxCan_Index result;

    result = IfxCan_Index_none;

    for (index = 0; index < IFXCAN_NUM_MODULES; index++)
8000258c:	82 02       	mov %d2,0
8000258e:	1d 00 03 00 	j 80002594 <IfxCan_getIndex+0xa>
80002592:	c2 12       	add %d2,1
80002594:	ff 32 18 80 	jge.u %d2,3,800025c4 <IfxCan_getIndex+0x3a>
    {
        if (IfxCan_cfg_indexMap[index].module == can)
80002598:	8f 32 00 30 	sh %d3,%d2,3
8000259c:	91 00 00 28 	movh.a %a2,32768
800025a0:	d9 22 1c a0 	lea %a2,[%a2]668 <8000029c <IfxCan_cfg_indexMap>>
800025a4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800025a8:	54 23       	ld.w %d3,[%a2]
800025aa:	80 44       	mov.d %d4,%a4
800025ac:	5f 43 f3 ff 	jne %d3,%d4,80002592 <IfxCan_getIndex+0x8>
        {
            result = (IfxCan_Index)IfxCan_cfg_indexMap[index].index;
800025b0:	06 32       	sh %d2,3
800025b2:	91 00 00 28 	movh.a %a2,32768
800025b6:	d9 22 1c a0 	lea %a2,[%a2]668 <8000029c <IfxCan_cfg_indexMap>>
800025ba:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800025be:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
800025c2:	00 90       	ret 
    result = IfxCan_Index_none;
800025c4:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
800025c6:	00 90       	ret 

800025c8 <IfxCan_getModuleFrequency>:


float32 IfxCan_getModuleFrequency(void)
{
800025c8:	40 ae       	mov.aa %a14,%sp
    float32 moduleFreq = 0;

    moduleFreq = IfxScuCcu_getMcanFrequency();
800025ca:	6d ff e7 f4 	call 80000f98 <IfxScuCcu_getMcanFrequency>

    return moduleFreq;
}
800025ce:	00 90       	ret 

800025d0 <IfxCan_getSrcPointer>:


volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine)
{
800025d0:	40 ae       	mov.aa %a14,%sp
800025d2:	20 10       	sub.a %sp,16
800025d4:	02 4c       	mov %d12,%d4
    IfxCan_Index           canIndex                              = IfxCan_getIndex(can);
800025d6:	6d ff da ff 	call 8000258a <IfxCan_getIndex>
    Ifx_SRC_CAN_CAN *const srcCanBaseAddress[IFXCAN_NUM_MODULES] = {
800025da:	91 00 00 37 	movh.a %a3,28672
800025de:	d9 33 00 00 	lea %a3,[%a3]0 <70000000 <LCF_DSPR0_START>>
800025e2:	d9 e4 f4 ff 	lea %a4,[%a14]-12 <70000000 <LCF_DSPR0_START>>
800025e6:	09 38 48 01 	ld.d %e8,[%a3+]8 <70000008 <LCF_DSPR0_START+0x8>>
800025ea:	89 48 48 01 	st.d [%a4+]8 <70000008 <LCF_DSPR0_START+0x8>>,%e8
800025ee:	44 38       	ld.w %d8,[%a3+]
800025f0:	64 48       	st.w [%a4+],%d8
        &MODULE_SRC.CAN.CAN[0],
        &MODULE_SRC.CAN.CAN[1],
        &MODULE_SRC.CAN.CAN[2],
    };
    return &(srcCanBaseAddress[canIndex]->INT[interruptLine]);
800025f2:	06 22       	sh %d2,2
800025f4:	01 e2 00 36 	addsc.a %a3,%a14,%d2,0
800025f8:	99 32 f4 ff 	ld.a %a2,[%a3]-12
800025fc:	06 2c       	sh %d12,2
}
800025fe:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
80002602:	00 90       	ret 

80002604 <IfxCan_setClockSource>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource)
{
80002604:	40 ae       	mov.aa %a14,%sp
80002606:	80 43       	mov.d %d3,%a4
    Ifx_CAN_MCR mcr;

    /* enable CCCE and CI */
    mcr.U      = can->MCR.U;
80002608:	bb 00 03 28 	mov.u %d2,32816
8000260c:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80002610:	54 22       	ld.w %d2,[%a2]
    mcr.B.CCCE = 1;
80002612:	b7 12 81 2f 	insert %d2,%d2,1,31,1
    mcr.B.CI   = 1;
80002616:	b7 12 01 2f 	insert %d2,%d2,1,30,1
    can->MCR.U = mcr.U;
8000261a:	74 22       	st.w [%a2],%d2

    /* select clock */
    switch (clockSelect)
8000261c:	ff 44 14 80 	jge.u %d4,4,80002644 <IfxCan_setClockSource+0x40>
80002620:	91 00 00 28 	movh.a %a2,32768
80002624:	d9 22 70 82 	lea %a2,[%a2]9776 <80002630 <IfxCan_setClockSource+0x2c>>
80002628:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000262c:	dc 02       	ji %a2
8000262e:	00 00       	nop 
80002630:	1d 00 08 00 	j 80002640 <IfxCan_setClockSource+0x3c>
80002634:	1d 00 12 00 	j 80002658 <IfxCan_setClockSource+0x54>
80002638:	1d 00 14 00 	j 80002660 <IfxCan_setClockSource+0x5c>
8000263c:	1d 00 16 00 	j 80002668 <IfxCan_setClockSource+0x64>
    {
    case IfxCan_ClockSelect_0:
        mcr.B.CLKSEL0 = clockSource;
80002640:	37 52 02 20 	insert %d2,%d2,%d5,0,2
    case IfxCan_ClockSelect_3:
        mcr.B.CLKSEL3 = clockSource;
        break;
    }

    can->MCR.U = mcr.U;
80002644:	bb 00 03 48 	mov.u %d4,32816
80002648:	60 32       	mov.a %a2,%d3
8000264a:	01 24 00 46 	addsc.a %a4,%a2,%d4,0
8000264e:	74 42       	st.w [%a4],%d2

    /* disable CCCE and CI */
    mcr.B.CCCE = 0;
    mcr.B.CI   = 0;
80002650:	b7 02 02 2f 	insert %d2,%d2,0,30,2
    can->MCR.U = mcr.U;
80002654:	74 42       	st.w [%a4],%d2
}
80002656:	00 90       	ret 
        mcr.B.CLKSEL1 = clockSource;
80002658:	37 52 02 21 	insert %d2,%d2,%d5,2,2
        break;
8000265c:	1d ff f4 ff 	j 80002644 <IfxCan_setClockSource+0x40>
        mcr.B.CLKSEL2 = clockSource;
80002660:	37 52 02 22 	insert %d2,%d2,%d5,4,2
        break;
80002664:	1d ff f0 ff 	j 80002644 <IfxCan_setClockSource+0x40>
        mcr.B.CLKSEL3 = clockSource;
80002668:	37 52 02 23 	insert %d2,%d2,%d5,6,2
        break;
8000266c:	1d ff ec ff 	j 80002644 <IfxCan_setClockSource+0x40>

80002670 <IfxCan_Can_initMessage>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxCan_Can_initMessage(IfxCan_Message *message)
{
80002670:	40 ae       	mov.aa %a14,%sp
80002672:	20 20       	sub.a %sp,32
80002674:	40 4d       	mov.aa %a13,%a4
    const IfxCan_Message defaultMessage = {
80002676:	d9 ec e0 ff 	lea %a12,[%a14]-32
8000267a:	3b 00 02 50 	mov %d5,32
8000267e:	82 04       	mov %d4,0
80002680:	40 c4       	mov.aa %a4,%a12
80002682:	6d 00 dc 0f 	call 8000463a <memset>
80002686:	3b 80 00 20 	mov %d2,8
8000268a:	59 e2 f4 ff 	st.w [%a14]-12,%d2
        .readFromRxFifo0       = FALSE,
        .readFromRxFifo1       = FALSE
    };

    /* Default Configuration */
    *message = defaultMessage;
8000268e:	09 c4 48 01 	ld.d %e4,[%a12+]8
80002692:	89 d4 48 01 	st.d [%a13+]8,%e4
80002696:	09 c4 48 01 	ld.d %e4,[%a12+]8
8000269a:	89 d4 48 01 	st.d [%a13+]8,%e4
8000269e:	09 c4 48 01 	ld.d %e4,[%a12+]8
800026a2:	89 d4 48 01 	st.d [%a13+]8,%e4
800026a6:	09 c4 48 01 	ld.d %e4,[%a12+]8
800026aa:	89 d4 48 01 	st.d [%a13+]8,%e4
}
800026ae:	00 90       	ret 

800026b0 <IfxCan_Can_initModule>:


void IfxCan_Can_initModule(IfxCan_Can *can, IfxCan_Can_Config *config)
{
800026b0:	40 ae       	mov.aa %a14,%sp
    can->can = config->can;
800026b2:	54 52       	ld.w %d2,[%a5]
800026b4:	74 42       	st.w [%a4],%d2
}


IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
{
    return can->CLC.B.DISS == 0;
800026b6:	bb 00 00 38 	mov.u %d3,32768
800026ba:	60 22       	mov.a %a2,%d2
800026bc:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800026c0:	54 23       	ld.w %d3,[%a2]

    // if module is not enebled
    if (IfxCan_isModuleEnabled(can->can) != TRUE)
800026c2:	6f 13 03 80 	jnz.t %d3,1,800026c8 <IfxCan_Can_initModule+0x18>
    {
        // Enable module, disregard Sleep Mode request
        IfxCan_enableModule(can->can);
    }
}
800026c6:	00 90       	ret 
        IfxCan_enableModule(can->can);
800026c8:	60 24       	mov.a %a4,%d2
800026ca:	6d ff 43 ff 	call 80002550 <IfxCan_enableModule>
}
800026ce:	1d ff fc ff 	j 800026c6 <IfxCan_Can_initModule+0x16>

800026d2 <IfxCan_Can_initModuleConfig>:


void IfxCan_Can_initModuleConfig(IfxCan_Can_Config *config, Ifx_CAN *can)
{
800026d2:	40 ae       	mov.aa %a14,%sp
    const IfxCan_Can_Config defaultConfig = {
800026d4:	82 02       	mov %d2,0
        .can = NULL_PTR
    };

    /* Default Configuration */
    *config = defaultConfig;
800026d6:	74 42       	st.w [%a4],%d2

    /* take over module pointer */
    config->can = can;
800026d8:	f4 45       	st.a [%a4],%a5
}
800026da:	00 90       	ret 

800026dc <IfxCan_Can_initNode>:


boolean IfxCan_Can_initNode(IfxCan_Can_Node *node, const IfxCan_Can_NodeConfig *config)
{
800026dc:	40 ae       	mov.aa %a14,%sp
800026de:	40 5c       	mov.aa %a12,%a5
    Ifx_CAN   *canSfr  = config->can;
800026e0:	54 59       	ld.w %d9,[%a5]
    node->can = canSfr;
800026e2:	74 49       	st.w [%a4],%d9
    boolean    status  = 0;

    Ifx_CAN_N *nodeSfr = IfxCan_getNodePointer(canSfr, config->nodeId);
800026e4:	19 58 04 00 	ld.w %d8,[%a5]4
    return &(can->N[nodeId]);
800026e8:	8f a8 00 b0 	sh %d11,%d8,10
800026ec:	bb 00 10 28 	mov.u %d2,33024
800026f0:	42 b2       	add %d2,%d11
800026f2:	0b 29 00 a0 	add %d10,%d9,%d2
    node->node       = nodeSfr;
800026f6:	59 4a 04 00 	st.w [%a4]4,%d10

    node->messageRAM = config->messageRAM;
800026fa:	d9 42 0c 00 	lea %a2,[%a4]12
800026fe:	d9 53 2c 10 	lea %a3,[%a5]108
80002702:	09 34 48 01 	ld.d %e4,[%a3+]8
80002706:	89 24 48 01 	st.d [%a2+]8,%e4
8000270a:	09 34 48 01 	ld.d %e4,[%a3+]8
8000270e:	89 24 48 01 	st.d [%a2+]8,%e4
80002712:	44 34       	ld.w %d4,[%a3+]
80002714:	64 24       	st.w [%a2+],%d4

    /* initialise the clock for the selected node */
    IfxCan_ClockSelect clockSelect = (IfxCan_ClockSelect)config->nodeId;
    IfxCan_setClockSource(canSfr, clockSelect, config->clockSource);
80002716:	19 55 08 00 	ld.w %d5,[%a5]8
8000271a:	19 54 04 00 	ld.w %d4,[%a5]4
8000271e:	60 94       	mov.a %a4,%d9
80002720:	6d ff 72 ff 	call 80002604 <IfxCan_setClockSource>
    if (node->CCCR.B.INIT == 1)
80002724:	0b b9 00 20 	add %d2,%d9,%d11
80002728:	bb 80 21 38 	mov.u %d3,33304
8000272c:	60 22       	mov.a %a2,%d2
8000272e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002732:	54 22       	ld.w %d2,[%a2]
80002734:	6f 02 9b 80 	jnz.t %d2,0,8000286a <IfxCan_Can_initNode+0x18e>
    node->CCCR.B.INIT = 1;
80002738:	8f a8 00 20 	sh %d2,%d8,10
8000273c:	42 92       	add %d2,%d9
8000273e:	bb 80 21 38 	mov.u %d3,33304
80002742:	60 22       	mov.a %a2,%d2
80002744:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002748:	54 22       	ld.w %d2,[%a2]
8000274a:	b7 12 01 20 	insert %d2,%d2,1,0,1
8000274e:	74 22       	st.w [%a2],%d2
    while (node->CCCR.B.INIT != 1)
80002750:	8f a8 00 20 	sh %d2,%d8,10
80002754:	42 92       	add %d2,%d9
80002756:	bb 80 21 38 	mov.u %d3,33304
8000275a:	60 22       	mov.a %a2,%d2
8000275c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002760:	54 22       	ld.w %d2,[%a2]
80002762:	6f 02 f7 7f 	jz.t %d2,0,80002750 <IfxCan_Can_initNode+0x74>
        cccr.U       = node->CCCR.U;
80002766:	8f a8 00 20 	sh %d2,%d8,10
8000276a:	42 92       	add %d2,%d9
8000276c:	60 22       	mov.a %a2,%d2
8000276e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002772:	54 22       	ld.w %d2,[%a2]
        cccr.B.INIT  = 1;
80002774:	b7 12 01 20 	insert %d2,%d2,1,0,1
        cccr.B.CCE   = 1;
80002778:	b7 12 81 20 	insert %d2,%d2,1,1,1
        node->CCCR.U = cccr.U;
8000277c:	74 22       	st.w [%a2],%d2

    /* enable configuration change CCCR.CCE = 1, CCCR.INIT = 1 */
    IfxCan_Node_enableConfigurationChange(nodeSfr);

    float32 moduleFreq = IfxCan_getModuleFrequency();
8000277e:	6d ff 25 ff 	call 800025c8 <IfxCan_getModuleFrequency>
80002782:	02 2b       	mov %d11,%d2

    /* set baudrate */
    if (config->calculateBitTimingValues)
80002784:	39 c3 21 50 	ld.bu %d3,[%a12]353
80002788:	df 03 9c 00 	jeq %d3,0,800028c0 <IfxCan_Can_initNode+0x1e4>
    {
        IfxCan_Node_setBitTiming(nodeSfr, moduleFreq, config->baudRate.baudrate, config->baudRate.samplePoint, config->baudRate.syncJumpWidth);
8000278c:	b9 c7 1a 00 	ld.hu %d7,[%a12]26
80002790:	b9 c6 18 00 	ld.hu %d6,[%a12]24
80002794:	19 c5 14 00 	ld.w %d5,[%a12]20
80002798:	02 24       	mov %d4,%d2
8000279a:	60 a4       	mov.a %a4,%d10
8000279c:	6d ff 91 fc 	call 800020be <IfxCan_Node_setBitTiming>
    {
        IfxCan_Node_setBitTimingValues(nodeSfr, config->baudRate.syncJumpWidth, config->baudRate.timeSegment2, config->baudRate.timeSegment1, config->baudRate.prescaler);
    }

    /* for CAN FD frames, set fast baudrate */
    if (config->frame.mode != IfxCan_FrameMode_standard)
800027a0:	19 c2 10 00 	ld.w %d2,[%a12]16
800027a4:	df 02 29 00 	jeq %d2,0,800027f6 <IfxCan_Can_initNode+0x11a>
    {
        if (config->calculateBitTimingValues)
800027a8:	39 c2 21 50 	ld.bu %d2,[%a12]353
800027ac:	df 02 97 00 	jeq %d2,0,800028da <IfxCan_Can_initNode+0x1fe>
        {
            IfxCan_Node_setFastBitTiming(nodeSfr, moduleFreq, config->fastBaudRate.baudrate, config->fastBaudRate.samplePoint, config->fastBaudRate.syncJumpWidth);
800027b0:	b9 c7 26 00 	ld.hu %d7,[%a12]38
800027b4:	b9 c6 24 00 	ld.hu %d6,[%a12]36
800027b8:	19 c5 20 00 	ld.w %d5,[%a12]32
800027bc:	02 b4       	mov %d4,%d11
800027be:	60 a4       	mov.a %a4,%d10
800027c0:	6d ff 5d fd 	call 8000227a <IfxCan_Node_setFastBitTiming>
        {
            IfxCan_Node_setFastBitTimingValues(nodeSfr, config->fastBaudRate.syncJumpWidth, config->fastBaudRate.timeSegment2, config->fastBaudRate.timeSegment1, config->fastBaudRate.prescaler);
        }

        /* set transceiver delay compensation offset */
        if (config->fastBaudRate.tranceiverDelayOffset != 0)
800027c4:	39 c3 2c 00 	ld.bu %d3,[%a12]44
800027c8:	df 03 17 00 	jeq %d3,0,800027f6 <IfxCan_Can_initNode+0x11a>
    node->DBTP.B.TDC  = 1;
800027cc:	8f a8 00 40 	sh %d4,%d8,10
800027d0:	42 94       	add %d4,%d9
800027d2:	bb c0 20 28 	mov.u %d2,33292
800027d6:	60 42       	mov.a %a2,%d4
800027d8:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800027dc:	54 22       	ld.w %d2,[%a2]
800027de:	b7 12 81 2b 	insert %d2,%d2,1,23,1
800027e2:	74 22       	st.w [%a2],%d2
    node->TDCR.B.TDCO = delay;
800027e4:	bb 80 24 28 	mov.u %d2,33352
800027e8:	60 42       	mov.a %a2,%d4
800027ea:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800027ee:	54 22       	ld.w %d2,[%a2]
800027f0:	37 32 07 24 	insert %d2,%d2,%d3,8,7
800027f4:	74 22       	st.w [%a2],%d2

    /* transmit frame configuration */

    if ((config->frame.type == IfxCan_FrameType_transmit) ||
        (config->frame.type == IfxCan_FrameType_transmitAndReceive) ||
        (config->frame.type == IfxCan_FrameType_remoteRequest) ||
800027f6:	19 c2 0c 00 	ld.w %d2,[%a12]12
800027fa:	c2 f2       	add %d2,-1
    if ((config->frame.type == IfxCan_FrameType_transmit) ||
800027fc:	ff 42 e3 80 	jge.u %d2,4,800029c2 <IfxCan_Can_initNode+0x2e6>
        (config->frame.type == IfxCan_FrameType_remoteAnswer))
    {
        uint32 id; /* used for enabling transmit interrupts for individual Tx buffers */

        /* set Tx element data field size */
        IfxCan_Node_setTxBufferDataFieldSize(nodeSfr, config->txConfig.txBufferDataFieldSize);
80002800:	19 c3 38 00 	ld.w %d3,[%a12]56
    node->TX.ESC.B.TBDS = size;
80002804:	8f a8 00 40 	sh %d4,%d8,10
80002808:	42 94       	add %d4,%d9
8000280a:	bb 80 2c 28 	mov.u %d2,33480
8000280e:	60 42       	mov.a %a2,%d4
80002810:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002814:	54 22       	ld.w %d2,[%a2]
80002816:	37 32 03 20 	insert %d2,%d2,%d3,0,3
8000281a:	74 22       	st.w [%a2],%d2

        /* set Tx buffers start address in the Message RAM */
        IfxCan_Node_setTxBuffersStartAddress(nodeSfr, config->messageRAM.txBuffersStartAddress);
8000281c:	b9 c3 3c 10 	ld.hu %d3,[%a12]124
    node->TX.BC.B.TBSA = address >> 2;
80002820:	06 e3       	sh %d3,-2
80002822:	bb 00 2c 28 	mov.u %d2,33472
80002826:	60 42       	mov.a %a2,%d4
80002828:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000282c:	54 22       	ld.w %d2,[%a2]
8000282e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002832:	74 22       	st.w [%a2],%d2

        if ((config->txConfig.txMode == IfxCan_TxMode_dedicatedBuffers) ||
80002834:	19 c2 30 00 	ld.w %d2,[%a12]48
            (config->txConfig.txMode == IfxCan_TxMode_sharedFifo) ||
80002838:	1b e2 ff 3f 	addi %d3,%d2,-2
        if ((config->txConfig.txMode == IfxCan_TxMode_dedicatedBuffers) ||
8000283c:	ff 33 19 86 	jge.u %d3,3,8000346e <IfxCan_Can_initNode+0xd92>
            (config->txConfig.txMode == IfxCan_TxMode_sharedQueue))
        {
            /* dedicated TX buffers operation */
            /* select number of Tx buffers */
            IfxCan_Node_setDedicatedTxBuffersNumber(nodeSfr, config->txConfig.dedicatedTxBuffersNumber);
80002840:	39 c3 34 00 	ld.bu %d3,[%a12]52
    node->TX.BC.B.NDTB = number;
80002844:	02 42       	mov %d2,%d4
80002846:	bb 00 2c 48 	mov.u %d4,33472
8000284a:	60 22       	mov.a %a2,%d2
8000284c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002850:	54 22       	ld.w %d2,[%a2]
80002852:	37 32 06 28 	insert %d2,%d2,%d3,16,6
80002856:	74 22       	st.w [%a2],%d2

            /* shared operation */
            if ((config->txConfig.txMode == IfxCan_TxMode_sharedFifo) || (config->txConfig.txMode == IfxCan_TxMode_sharedQueue))
80002858:	19 c3 30 00 	ld.w %d3,[%a12]48
8000285c:	1b d3 ff 2f 	addi %d2,%d3,-3
80002860:	bf 22 4a 80 	jlt.u %d2,2,800028f4 <IfxCan_Can_initNode+0x218>
{
80002864:	82 02       	mov %d2,0
80002866:	1d 00 84 00 	j 8000296e <IfxCan_Can_initNode+0x292>
        node->CCCR.B.CCE = 0;
8000286a:	02 b2       	mov %d2,%d11
8000286c:	42 92       	add %d2,%d9
8000286e:	60 22       	mov.a %a2,%d2
80002870:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002874:	54 22       	ld.w %d2,[%a2]
80002876:	8f 22 c0 21 	andn %d2,%d2,2
8000287a:	74 22       	st.w [%a2],%d2
        while (node->CCCR.B.CCE != 0)
8000287c:	8f a8 00 20 	sh %d2,%d8,10
80002880:	42 92       	add %d2,%d9
80002882:	bb 80 21 38 	mov.u %d3,33304
80002886:	60 22       	mov.a %a2,%d2
80002888:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000288c:	54 22       	ld.w %d2,[%a2]
8000288e:	6f 12 f7 ff 	jnz.t %d2,1,8000287c <IfxCan_Can_initNode+0x1a0>
        node->CCCR.B.INIT = 0;
80002892:	8f a8 00 20 	sh %d2,%d8,10
80002896:	42 92       	add %d2,%d9
80002898:	60 22       	mov.a %a2,%d2
8000289a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000289e:	54 22       	ld.w %d2,[%a2]
800028a0:	8f 12 c0 21 	andn %d2,%d2,1
800028a4:	74 22       	st.w [%a2],%d2
        while (node->CCCR.B.INIT != 0)
800028a6:	8f a8 00 20 	sh %d2,%d8,10
800028aa:	42 92       	add %d2,%d9
800028ac:	bb 80 21 38 	mov.u %d3,33304
800028b0:	60 22       	mov.a %a2,%d2
800028b2:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800028b6:	54 22       	ld.w %d2,[%a2]
800028b8:	6f 02 f7 ff 	jnz.t %d2,0,800028a6 <IfxCan_Can_initNode+0x1ca>
800028bc:	1d ff 3e ff 	j 80002738 <IfxCan_Can_initNode+0x5c>
        IfxCan_Node_setBitTimingValues(nodeSfr, config->baudRate.syncJumpWidth, config->baudRate.timeSegment2, config->baudRate.timeSegment1, config->baudRate.prescaler);
800028c0:	b9 c7 1c 00 	ld.hu %d7,[%a12]28
800028c4:	39 c6 1e 00 	ld.bu %d6,[%a12]30
800028c8:	39 c5 1f 00 	ld.bu %d5,[%a12]31
800028cc:	b9 c4 1a 00 	ld.hu %d4,[%a12]26
800028d0:	60 a4       	mov.a %a4,%d10
800028d2:	6d ff c5 fc 	call 8000225c <IfxCan_Node_setBitTimingValues>
800028d6:	1d ff 65 ff 	j 800027a0 <IfxCan_Can_initNode+0xc4>
            IfxCan_Node_setFastBitTimingValues(nodeSfr, config->fastBaudRate.syncJumpWidth, config->fastBaudRate.timeSegment2, config->fastBaudRate.timeSegment1, config->fastBaudRate.prescaler);
800028da:	b9 c7 28 00 	ld.hu %d7,[%a12]40
800028de:	39 c6 2a 00 	ld.bu %d6,[%a12]42
800028e2:	39 c5 2b 00 	ld.bu %d5,[%a12]43
800028e6:	b9 c4 26 00 	ld.hu %d4,[%a12]38
800028ea:	60 a4       	mov.a %a4,%d10
800028ec:	6d ff 97 fd 	call 8000241a <IfxCan_Node_setFastBitTimingValues>
800028f0:	1d ff 6a ff 	j 800027c4 <IfxCan_Can_initNode+0xe8>
            {
                if (config->txConfig.txMode == IfxCan_TxMode_sharedFifo)
800028f4:	df 33 16 00 	jeq %d3,3,80002920 <IfxCan_Can_initNode+0x244>
                {
                    /* set Tx FIFO mode */
                    IfxCan_Node_setTransmitFifoQueueMode(nodeSfr, IfxCan_TxMode_fifo);
                }

                if (config->txConfig.txMode == IfxCan_TxMode_sharedQueue)
800028f8:	19 c2 30 00 	ld.w %d2,[%a12]48
800028fc:	df 42 1e 00 	jeq %d2,4,80002938 <IfxCan_Can_initNode+0x25c>
                    /* set Tx Queue mode */
                    IfxCan_Node_setTransmitFifoQueueMode(nodeSfr, IfxCan_TxMode_queue);
                }

                /* select number of Tx buffers to be used as Tx FIFO/Queue */
                IfxCan_Node_setTransmitFifoQueueSize(nodeSfr, config->txConfig.txFifoQueueSize);
80002900:	39 c3 35 00 	ld.bu %d3,[%a12]53
    node->TX.BC.B.TFQS = number;
80002904:	8f a8 00 20 	sh %d2,%d8,10
80002908:	42 92       	add %d2,%d9
8000290a:	bb 00 2c 48 	mov.u %d4,33472
8000290e:	60 22       	mov.a %a2,%d2
80002910:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002914:	54 22       	ld.w %d2,[%a2]
80002916:	37 32 06 2c 	insert %d2,%d2,%d3,24,6
8000291a:	74 22       	st.w [%a2],%d2
}
8000291c:	1d ff a4 ff 	j 80002864 <IfxCan_Can_initNode+0x188>
        node->TX.BC.B.TFQM = mode;
80002920:	8f a8 00 20 	sh %d2,%d8,10
80002924:	42 92       	add %d2,%d9
80002926:	60 22       	mov.a %a2,%d2
80002928:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000292c:	54 22       	ld.w %d2,[%a2]
8000292e:	b7 02 01 2f 	insert %d2,%d2,0,30,1
80002932:	74 22       	st.w [%a2],%d2
}
80002934:	1d ff e2 ff 	j 800028f8 <IfxCan_Can_initNode+0x21c>
        node->TX.BC.B.TFQM = mode;
80002938:	8f a8 00 20 	sh %d2,%d8,10
8000293c:	42 92       	add %d2,%d9
8000293e:	bb 00 2c 38 	mov.u %d3,33472
80002942:	60 22       	mov.a %a2,%d2
80002944:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002948:	54 22       	ld.w %d2,[%a2]
8000294a:	b7 12 01 2f 	insert %d2,%d2,1,30,1
8000294e:	74 22       	st.w [%a2],%d2
}
80002950:	1d ff d8 ff 	j 80002900 <IfxCan_Can_initNode+0x224>
    node->TX.BTIE.U = node->TX.BTIE.U | (mask);
80002954:	8f a8 00 30 	sh %d3,%d8,10
80002958:	42 93       	add %d3,%d9
8000295a:	bb 00 2e 48 	mov.u %d4,33504
8000295e:	60 32       	mov.a %a2,%d3
80002960:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002964:	54 23       	ld.w %d3,[%a2]
80002966:	d7 13 01 32 	insert %d3,%d3,1,%d2,1
8000296a:	74 23       	st.w [%a2],%d3
            }

            /* enable transmission interrupt on selected buffers */
            for (id = 0; id < (config->txConfig.dedicatedTxBuffersNumber + config->txConfig.txFifoQueueSize); ++id)
8000296c:	c2 12       	add %d2,1
8000296e:	39 c4 34 00 	ld.bu %d4,[%a12]52
80002972:	39 c3 35 00 	ld.bu %d3,[%a12]53
80002976:	42 43       	add %d3,%d4
80002978:	3f 32 ee ff 	jlt.u %d2,%d3,80002954 <IfxCan_Can_initNode+0x278>
        {
            IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, 0);
        }

        /* set the Tx event fifo size and start address if selected */
        if ((config->txConfig.txEventFifoSize > 0) && (config->txConfig.txEventFifoSize <= 32))
8000297c:	39 c2 3c 00 	ld.bu %d2,[%a12]60
80002980:	c2 f2       	add %d2,-1
80002982:	8f f2 0f 21 	and %d2,%d2,255
80002986:	3b f0 01 30 	mov %d3,31
8000298a:	3f 23 17 80 	jlt.u %d3,%d2,800029b8 <IfxCan_Can_initNode+0x2dc>
        {
            IfxCan_Node_setTxEventFifoStartAddress(nodeSfr, config->messageRAM.txEventFifoStartAddress);
8000298e:	b9 c3 3a 10 	ld.hu %d3,[%a12]122
    node->TX.EFC.B.EFSA = address >> 2;
80002992:	06 e3       	sh %d3,-2
80002994:	8f a8 00 20 	sh %d2,%d8,10
80002998:	42 92       	add %d2,%d9
8000299a:	bb 00 2f 48 	mov.u %d4,33520
8000299e:	60 22       	mov.a %a2,%d2
800029a0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800029a4:	54 22       	ld.w %d2,[%a2]
800029a6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
800029aa:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setTxEventFifoSize(nodeSfr, config->txConfig.txEventFifoSize);
800029ac:	39 c3 3c 00 	ld.bu %d3,[%a12]60
    node->TX.EFC.B.EFS = size;
800029b0:	54 22       	ld.w %d2,[%a2]
800029b2:	37 32 06 28 	insert %d2,%d2,%d3,16,6
800029b6:	74 22       	st.w [%a2],%d2
        {
            IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->txConfig.txEventFifoSize <= 32);
        }

        /* enable CAN frame mode of transmission Standard or CAN FD Long or FD Long and Fast frames*/
        IfxCan_Node_setFrameMode(nodeSfr, config->frame.mode);
800029b8:	19 c4 10 00 	ld.w %d4,[%a12]16
800029bc:	60 a4       	mov.a %a4,%d10
800029be:	6d ff 3d fd 	call 80002438 <IfxCan_Node_setFrameMode>
    }

    /* receive frame configuration */

    if ((config->frame.type == IfxCan_FrameType_receive) ||
800029c2:	19 c2 0c 00 	ld.w %d2,[%a12]12
800029c6:	8b 02 00 32 	eq %d3,%d2,0
800029ca:	8b 22 e0 34 	or.eq %d3,%d2,2
800029ce:	df 03 04 80 	jne %d3,0,800029d6 <IfxCan_Can_initNode+0x2fa>
        (config->frame.type == IfxCan_FrameType_transmitAndReceive) ||
800029d2:	df 42 ca 80 	jne %d2,4,80002b66 <IfxCan_Can_initNode+0x48a>
        (config->frame.type == IfxCan_FrameType_remoteAnswer))
    {
        if ((config->rxConfig.rxMode == IfxCan_RxMode_dedicatedBuffers) ||
800029d6:	19 c2 10 10 	ld.w %d2,[%a12]80
800029da:	8b 02 00 32 	eq %d3,%d2,0
800029de:	8b 32 e0 34 	or.eq %d3,%d2,3
800029e2:	df 03 06 80 	jne %d3,0,800029ee <IfxCan_Can_initNode+0x312>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo0) ||
800029e6:	df 42 04 00 	jeq %d2,4,800029ee <IfxCan_Can_initNode+0x312>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo1) ||
800029ea:	df 52 1c 80 	jne %d2,5,80002a22 <IfxCan_Can_initNode+0x346>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx buffer data length */
            IfxCan_Node_setRxBufferDataFieldSize(nodeSfr, config->rxConfig.rxBufferDataFieldSize);
800029ee:	19 c3 14 10 	ld.w %d3,[%a12]84
    node->RX.ESC.B.RBDS = size;
800029f2:	8f a8 00 40 	sh %d4,%d8,10
800029f6:	42 94       	add %d4,%d9
800029f8:	bb c0 2b 28 	mov.u %d2,33468
800029fc:	60 42       	mov.a %a2,%d4
800029fe:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a02:	54 22       	ld.w %d2,[%a2]
80002a04:	37 32 03 24 	insert %d2,%d2,%d3,8,3
80002a08:	74 22       	st.w [%a2],%d2

            /* set Rx buffers start address in the Message RAM */
            IfxCan_Node_setRxBuffersStartAddress(nodeSfr, config->messageRAM.rxBuffersStartAddress);
80002a0a:	b9 c3 38 10 	ld.hu %d3,[%a12]120
    node->RX.BC.B.RBSA = address >> 2;
80002a0e:	06 e3       	sh %d3,-2
80002a10:	bb c0 2a 28 	mov.u %d2,33452
80002a14:	60 42       	mov.a %a2,%d4
80002a16:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a1a:	54 22       	ld.w %d2,[%a2]
80002a1c:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002a20:	74 22       	st.w [%a2],%d2
        }

        if ((config->rxConfig.rxMode == IfxCan_RxMode_fifo0) ||
80002a22:	19 c2 10 10 	ld.w %d2,[%a12]80
80002a26:	8b 12 00 32 	eq %d3,%d2,1
80002a2a:	8b 32 e0 34 	or.eq %d3,%d2,3
80002a2e:	df 03 04 80 	jne %d3,0,80002a36 <IfxCan_Can_initNode+0x35a>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo0) ||
80002a32:	df 52 2e 80 	jne %d2,5,80002a8e <IfxCan_Can_initNode+0x3b2>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx FIFO 0 data length */
            IfxCan_Node_setRxFifo0DataFieldSize(nodeSfr, config->rxConfig.rxFifo0DataFieldSize);
80002a36:	19 c3 18 10 	ld.w %d3,[%a12]88
    node->RX.ESC.B.F0DS = size;
80002a3a:	8f a8 00 40 	sh %d4,%d8,10
80002a3e:	42 94       	add %d4,%d9
80002a40:	bb c0 2b 28 	mov.u %d2,33468
80002a44:	60 42       	mov.a %a2,%d4
80002a46:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a4a:	54 22       	ld.w %d2,[%a2]
80002a4c:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80002a50:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 start address in the Message RAM */
            IfxCan_Node_setRxFifo0StartAddress(nodeSfr, config->messageRAM.rxFifo0StartAddress);
80002a52:	b9 c3 34 10 	ld.hu %d3,[%a12]116
    node->RX.F0C.B.F0SA = address >> 2;
80002a56:	06 e3       	sh %d3,-2
80002a58:	bb 00 2a 28 	mov.u %d2,33440
80002a5c:	60 42       	mov.a %a2,%d4
80002a5e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a62:	54 22       	ld.w %d2,[%a2]
80002a64:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002a68:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 size */
            IfxCan_Node_setRxFifo0Size(nodeSfr, config->rxConfig.rxFifo0Size);
80002a6a:	39 c3 2a 10 	ld.bu %d3,[%a12]106
    node->RX.F0C.B.F0S = size;
80002a6e:	54 22       	ld.w %d2,[%a2]
80002a70:	37 32 07 28 	insert %d2,%d2,%d3,16,7
80002a74:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 operating mode */
            IfxCan_Node_setRxFifo0OperatingMode(nodeSfr, config->rxConfig.rxFifo0OperatingMode);
80002a76:	19 c3 20 10 	ld.w %d3,[%a12]96
    node->RX.F0C.B.F0OM = mode;
80002a7a:	54 22       	ld.w %d2,[%a2]
80002a7c:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
80002a80:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 watermark level */
            IfxCan_Node_setRxFifo0WatermarkLevel(nodeSfr, config->rxConfig.rxFifo0WatermarkLevel);
80002a82:	39 c3 28 10 	ld.bu %d3,[%a12]104
    node->RX.F0C.B.F0WM = level;
80002a86:	54 22       	ld.w %d2,[%a2]
80002a88:	37 32 07 2c 	insert %d2,%d2,%d3,24,7
80002a8c:	74 22       	st.w [%a2],%d2
        }

        if ((config->rxConfig.rxMode == IfxCan_RxMode_fifo1) ||
80002a8e:	19 c2 10 10 	ld.w %d2,[%a12]80
80002a92:	8b 22 00 32 	eq %d3,%d2,2
80002a96:	8b 42 e0 34 	or.eq %d3,%d2,4
80002a9a:	df 03 04 80 	jne %d3,0,80002aa2 <IfxCan_Can_initNode+0x3c6>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo1) ||
80002a9e:	df 52 2e 80 	jne %d2,5,80002afa <IfxCan_Can_initNode+0x41e>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx FIFO 1 data length */
            IfxCan_Node_setRxFifo1DataFieldSize(nodeSfr, config->rxConfig.rxFifo1DataFieldSize);
80002aa2:	19 c3 1c 10 	ld.w %d3,[%a12]92
    node->RX.ESC.B.F1DS = size;
80002aa6:	8f a8 00 40 	sh %d4,%d8,10
80002aaa:	42 94       	add %d4,%d9
80002aac:	bb c0 2b 28 	mov.u %d2,33468
80002ab0:	60 42       	mov.a %a2,%d4
80002ab2:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ab6:	54 22       	ld.w %d2,[%a2]
80002ab8:	37 32 03 22 	insert %d2,%d2,%d3,4,3
80002abc:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 start address in the Message RAM */
            IfxCan_Node_setRxFifo1StartAddress(nodeSfr, config->messageRAM.rxFifo1StartAddress);
80002abe:	b9 c3 36 10 	ld.hu %d3,[%a12]118
    node->RX.F1C.B.F1SA = address >> 2;
80002ac2:	06 e3       	sh %d3,-2
80002ac4:	bb 00 2b 28 	mov.u %d2,33456
80002ac8:	60 42       	mov.a %a2,%d4
80002aca:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ace:	54 22       	ld.w %d2,[%a2]
80002ad0:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002ad4:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 size */
            IfxCan_Node_setRxFifo1Size(nodeSfr, config->rxConfig.rxFifo1Size);
80002ad6:	39 c3 2b 10 	ld.bu %d3,[%a12]107
    node->RX.F1C.B.F1S = size;
80002ada:	54 22       	ld.w %d2,[%a2]
80002adc:	37 32 07 28 	insert %d2,%d2,%d3,16,7
80002ae0:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 operating mode */
            IfxCan_Node_setRxFifo1OperatingMode(nodeSfr, config->rxConfig.rxFifo1OperatingMode);
80002ae2:	19 c3 24 10 	ld.w %d3,[%a12]100
    node->RX.F1C.B.F1OM = mode;
80002ae6:	54 22       	ld.w %d2,[%a2]
80002ae8:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
80002aec:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 watermark level */
            IfxCan_Node_setRxFifo1WatermarkLevel(nodeSfr, config->rxConfig.rxFifo1WatermarkLevel);
80002aee:	39 c3 29 10 	ld.bu %d3,[%a12]105
    node->RX.F1C.B.F1WM = level;
80002af2:	54 22       	ld.w %d2,[%a2]
80002af4:	37 32 07 2c 	insert %d2,%d2,%d3,24,7
80002af8:	74 22       	st.w [%a2],%d2
        }

        /* enable CAN frame mode of transmission */
        IfxCan_Node_setFrameMode(nodeSfr, config->frame.mode);
80002afa:	19 c4 10 00 	ld.w %d4,[%a12]16
80002afe:	60 a4       	mov.a %a4,%d10
80002b00:	6d ff 9c fc 	call 80002438 <IfxCan_Node_setFrameMode>

        /* filter configuration */

        if ((config->filterConfig.messageIdLength == IfxCan_MessageIdLength_standard) ||
80002b04:	19 c3 00 10 	ld.w %d3,[%a12]64
80002b08:	8b 03 00 22 	eq %d2,%d3,0
80002b0c:	8b 23 e0 24 	or.eq %d2,%d3,2
80002b10:	df 02 26 00 	jeq %d2,0,80002b5c <IfxCan_Can_initNode+0x480>
            (config->filterConfig.messageIdLength == IfxCan_MessageIdLength_both))
        {
            IfxCan_Node_setStandardFilterListStartAddress(nodeSfr, config->messageRAM.standardFilterListStartAddress);
80002b14:	b9 c3 30 10 	ld.hu %d3,[%a12]112
    node->SIDFC.B.FLSSA = address >> 2;
80002b18:	06 e3       	sh %d3,-2
80002b1a:	8f a8 00 40 	sh %d4,%d8,10
80002b1e:	42 94       	add %d4,%d9
80002b20:	bb 40 28 28 	mov.u %d2,33412
80002b24:	60 42       	mov.a %a2,%d4
80002b26:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002b2a:	54 22       	ld.w %d2,[%a2]
80002b2c:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002b30:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setStandardFilterListSize(nodeSfr, config->filterConfig.standardListSize);
80002b32:	39 c3 04 10 	ld.bu %d3,[%a12]68
    node->SIDFC.B.LSS = size;
80002b36:	54 22       	ld.w %d2,[%a2]
80002b38:	37 32 08 28 	insert %d2,%d2,%d3,16,8
80002b3c:	74 22       	st.w [%a2],%d2
            IfxCan_Node_configureStandardFilterForNonMatchingFrames(nodeSfr, config->filterConfig.standardFilterForNonMatchingFrames);
80002b3e:	19 c3 08 10 	ld.w %d3,[%a12]72
    node->GFC.B.ANFS = filter;
80002b42:	bb 00 28 28 	mov.u %d2,33408
80002b46:	60 42       	mov.a %a2,%d4
80002b48:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002b4c:	54 22       	ld.w %d2,[%a2]
80002b4e:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80002b52:	74 22       	st.w [%a2],%d2

            if (config->filterConfig.rejectRemoteFramesWithStandardId == 1U)
80002b54:	39 c2 06 10 	ld.bu %d2,[%a12]70
80002b58:	df 12 b5 04 	jeq %d2,1,800034c2 <IfxCan_Can_initNode+0xde6>
            {
                IfxCan_Node_rejectRemoteFramesWithStandardId(nodeSfr);
            }
        }

        if ((config->filterConfig.messageIdLength == IfxCan_MessageIdLength_extended) ||
80002b5c:	19 c2 00 10 	ld.w %d2,[%a12]64
80002b60:	c2 f2       	add %d2,-1
80002b62:	bf 22 bb 84 	jlt.u %d2,2,800034d8 <IfxCan_Can_initNode+0xdfc>
        }
    }

    /* pins initialisation */

    if (config->pins != NULL_PTR)
80002b66:	99 c2 1c 50 	ld.a %a2,[%a12]348
80002b6a:	bd 02 e9 04 	jz.a %a2,8000353c <IfxCan_Can_initNode+0xe60>
    {
        if (config->pins->txPin != NULL_PTR)
80002b6e:	d4 24       	ld.a %a4,[%a2]
80002b70:	bd 04 e3 04 	jz.a %a4,80003536 <IfxCan_Can_initNode+0xe5a>
        {
            status |= (IfxCan_Node_initTxPin(config->pins->txPin, config->pins->txPinMode, config->pins->padDriver));
80002b74:	19 25 10 00 	ld.w %d5,[%a2]16
80002b78:	19 24 04 00 	ld.w %d4,[%a2]4
80002b7c:	6d ff 75 fa 	call 80002066 <IfxCan_Node_initTxPin>
80002b80:	02 2b       	mov %d11,%d2
        }

        if (config->pins->rxPin != NULL_PTR)
80002b82:	99 c2 1c 50 	ld.a %a2,[%a12]348
80002b86:	99 25 08 00 	ld.a %a5,[%a2]8
80002b8a:	bd 05 0c 00 	jz.a %a5,80002ba2 <IfxCan_Can_initNode+0x4c6>
        {
            status |= (IfxCan_Node_initRxPin(nodeSfr, config->pins->rxPin, config->pins->rxPinMode, config->pins->padDriver));
80002b8e:	19 25 10 00 	ld.w %d5,[%a2]16
80002b92:	19 24 0c 00 	ld.w %d4,[%a2]12
80002b96:	60 a4       	mov.a %a4,%d10
80002b98:	6d ff 4a fa 	call 8000202c <IfxCan_Node_initRxPin>
80002b9c:	a6 2b       	or %d11,%d2
80002b9e:	8f fb 0f b1 	and %d11,%d11,255
        }
    }

    /* enable internal virtual CAN bus loopback mode if selected */
    if (config->busLoopbackEnabled)
80002ba2:	39 c2 20 50 	ld.bu %d2,[%a12]352
80002ba6:	df 02 0e 00 	jeq %d2,0,80002bc2 <IfxCan_Can_initNode+0x4e6>
    node->NPCR.B.LBM = 1;
80002baa:	8f a8 00 20 	sh %d2,%d8,10
80002bae:	42 92       	add %d2,%d9
80002bb0:	bb 00 14 38 	mov.u %d3,33088
80002bb4:	60 22       	mov.a %a2,%d2
80002bb6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002bba:	54 22       	ld.w %d2,[%a2]
80002bbc:	b7 12 01 24 	insert %d2,%d2,1,8,1
80002bc0:	74 22       	st.w [%a2],%d2
    }

    // interrupt groups configuration
    volatile Ifx_SRC_SRCR *srcPointer;

    if ((config->interruptConfig.tefifo.priority > 0) || (config->interruptConfig.tefifo.typeOfService == IfxSrc_Tos_dma))
80002bc2:	b9 c2 20 20 	ld.hu %d2,[%a12]160
80002bc6:	df 02 06 80 	jne %d2,0,80002bd2 <IfxCan_Can_initNode+0x4f6>
80002bca:	19 c2 24 20 	ld.w %d2,[%a12]164
80002bce:	df 12 21 80 	jne %d2,1,80002c10 <IfxCan_Can_initNode+0x534>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_tefifo, config->interruptConfig.tefifo.interruptLine);
80002bd2:	19 c5 1c 20 	ld.w %d5,[%a12]156
80002bd6:	82 04       	mov %d4,0
80002bd8:	60 a4       	mov.a %a4,%d10
80002bda:	6d ff 89 fc 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.tefifo.interruptLine);
80002bde:	19 c4 1c 20 	ld.w %d4,[%a12]156
80002be2:	d4 c4       	ld.a %a4,[%a12]
80002be4:	6d ff f6 fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.tefifo.typeOfService, config->interruptConfig.tefifo.priority);
80002be8:	19 c4 24 20 	ld.w %d4,[%a12]164
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80002bec:	39 c2 20 20 	ld.bu %d2,[%a12]160
80002bf0:	54 23       	ld.w %d3,[%a2]
80002bf2:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002bf6:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002bf8:	54 23       	ld.w %d3,[%a2]
80002bfa:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002bfe:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002c00:	54 23       	ld.w %d3,[%a2]
80002c02:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002c06:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002c08:	54 23       	ld.w %d3,[%a2]
80002c0a:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002c0e:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.hpe.priority > 0) || (config->interruptConfig.hpe.typeOfService == IfxSrc_Tos_dma))
80002c10:	b9 c2 2c 20 	ld.hu %d2,[%a12]172
80002c14:	df 02 06 80 	jne %d2,0,80002c20 <IfxCan_Can_initNode+0x544>
80002c18:	19 c2 30 20 	ld.w %d2,[%a12]176
80002c1c:	df 12 21 80 	jne %d2,1,80002c5e <IfxCan_Can_initNode+0x582>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_hpe, config->interruptConfig.hpe.interruptLine);
80002c20:	19 c5 28 20 	ld.w %d5,[%a12]168
80002c24:	82 14       	mov %d4,1
80002c26:	60 a4       	mov.a %a4,%d10
80002c28:	6d ff 62 fc 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.hpe.interruptLine);
80002c2c:	19 c4 28 20 	ld.w %d4,[%a12]168
80002c30:	d4 c4       	ld.a %a4,[%a12]
80002c32:	6d ff cf fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.hpe.typeOfService, config->interruptConfig.hpe.priority);
80002c36:	19 c4 30 20 	ld.w %d4,[%a12]176
    src->B.SRPN = priority;
80002c3a:	39 c2 2c 20 	ld.bu %d2,[%a12]172
80002c3e:	54 23       	ld.w %d3,[%a2]
80002c40:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002c44:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002c46:	54 23       	ld.w %d3,[%a2]
80002c48:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002c4c:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002c4e:	54 23       	ld.w %d3,[%a2]
80002c50:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002c54:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002c56:	54 23       	ld.w %d3,[%a2]
80002c58:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002c5c:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.wati.priority > 0) || (config->interruptConfig.wati.typeOfService == IfxSrc_Tos_dma))
80002c5e:	b9 c2 38 20 	ld.hu %d2,[%a12]184
80002c62:	df 02 06 80 	jne %d2,0,80002c6e <IfxCan_Can_initNode+0x592>
80002c66:	19 c2 3c 20 	ld.w %d2,[%a12]188
80002c6a:	df 12 21 80 	jne %d2,1,80002cac <IfxCan_Can_initNode+0x5d0>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_wati, config->interruptConfig.wati.interruptLine);
80002c6e:	19 c5 34 20 	ld.w %d5,[%a12]180
80002c72:	82 24       	mov %d4,2
80002c74:	60 a4       	mov.a %a4,%d10
80002c76:	6d ff 3b fc 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.wati.interruptLine);
80002c7a:	19 c4 34 20 	ld.w %d4,[%a12]180
80002c7e:	d4 c4       	ld.a %a4,[%a12]
80002c80:	6d ff a8 fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.wati.typeOfService, config->interruptConfig.wati.priority);
80002c84:	19 c4 3c 20 	ld.w %d4,[%a12]188
    src->B.SRPN = priority;
80002c88:	39 c2 38 20 	ld.bu %d2,[%a12]184
80002c8c:	54 23       	ld.w %d3,[%a2]
80002c8e:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002c92:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002c94:	54 23       	ld.w %d3,[%a2]
80002c96:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002c9a:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002c9c:	54 23       	ld.w %d3,[%a2]
80002c9e:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002ca2:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002ca4:	54 23       	ld.w %d3,[%a2]
80002ca6:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002caa:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.alrt.priority > 0) || (config->interruptConfig.alrt.typeOfService == IfxSrc_Tos_dma))
80002cac:	b9 c2 04 30 	ld.hu %d2,[%a12]196
80002cb0:	df 02 06 80 	jne %d2,0,80002cbc <IfxCan_Can_initNode+0x5e0>
80002cb4:	19 c2 08 30 	ld.w %d2,[%a12]200
80002cb8:	df 12 21 80 	jne %d2,1,80002cfa <IfxCan_Can_initNode+0x61e>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_alrt, config->interruptConfig.alrt.interruptLine);
80002cbc:	19 c5 00 30 	ld.w %d5,[%a12]192
80002cc0:	82 34       	mov %d4,3
80002cc2:	60 a4       	mov.a %a4,%d10
80002cc4:	6d ff 14 fc 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.alrt.interruptLine);
80002cc8:	19 c4 00 30 	ld.w %d4,[%a12]192
80002ccc:	d4 c4       	ld.a %a4,[%a12]
80002cce:	6d ff 81 fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.alrt.typeOfService, config->interruptConfig.alrt.priority);
80002cd2:	19 c4 08 30 	ld.w %d4,[%a12]200
    src->B.SRPN = priority;
80002cd6:	39 c2 04 30 	ld.bu %d2,[%a12]196
80002cda:	54 23       	ld.w %d3,[%a2]
80002cdc:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002ce0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002ce2:	54 23       	ld.w %d3,[%a2]
80002ce4:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002ce8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002cea:	54 23       	ld.w %d3,[%a2]
80002cec:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002cf0:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002cf2:	54 23       	ld.w %d3,[%a2]
80002cf4:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002cf8:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.moer.priority > 0) || (config->interruptConfig.moer.typeOfService == IfxSrc_Tos_dma))
80002cfa:	b9 c2 10 30 	ld.hu %d2,[%a12]208
80002cfe:	df 02 06 80 	jne %d2,0,80002d0a <IfxCan_Can_initNode+0x62e>
80002d02:	19 c2 14 30 	ld.w %d2,[%a12]212
80002d06:	df 12 21 80 	jne %d2,1,80002d48 <IfxCan_Can_initNode+0x66c>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_moer, config->interruptConfig.moer.interruptLine);
80002d0a:	19 c5 0c 30 	ld.w %d5,[%a12]204
80002d0e:	82 44       	mov %d4,4
80002d10:	60 a4       	mov.a %a4,%d10
80002d12:	6d ff ed fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.moer.interruptLine);
80002d16:	19 c4 0c 30 	ld.w %d4,[%a12]204
80002d1a:	d4 c4       	ld.a %a4,[%a12]
80002d1c:	6d ff 5a fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.moer.typeOfService, config->interruptConfig.moer.priority);
80002d20:	19 c4 14 30 	ld.w %d4,[%a12]212
    src->B.SRPN = priority;
80002d24:	39 c2 10 30 	ld.bu %d2,[%a12]208
80002d28:	54 23       	ld.w %d3,[%a2]
80002d2a:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002d2e:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002d30:	54 23       	ld.w %d3,[%a2]
80002d32:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002d36:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002d38:	54 23       	ld.w %d3,[%a2]
80002d3a:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002d3e:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002d40:	54 23       	ld.w %d3,[%a2]
80002d42:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002d46:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.safe.priority > 0) || (config->interruptConfig.safe.typeOfService == IfxSrc_Tos_dma))
80002d48:	b9 c2 1c 30 	ld.hu %d2,[%a12]220
80002d4c:	df 02 06 80 	jne %d2,0,80002d58 <IfxCan_Can_initNode+0x67c>
80002d50:	19 c2 20 30 	ld.w %d2,[%a12]224
80002d54:	df 12 21 80 	jne %d2,1,80002d96 <IfxCan_Can_initNode+0x6ba>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_safe, config->interruptConfig.safe.interruptLine);
80002d58:	19 c5 18 30 	ld.w %d5,[%a12]216
80002d5c:	82 54       	mov %d4,5
80002d5e:	60 a4       	mov.a %a4,%d10
80002d60:	6d ff c6 fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.safe.interruptLine);
80002d64:	19 c4 18 30 	ld.w %d4,[%a12]216
80002d68:	d4 c4       	ld.a %a4,[%a12]
80002d6a:	6d ff 33 fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.safe.typeOfService, config->interruptConfig.safe.priority);
80002d6e:	19 c4 20 30 	ld.w %d4,[%a12]224
    src->B.SRPN = priority;
80002d72:	39 c2 1c 30 	ld.bu %d2,[%a12]220
80002d76:	54 23       	ld.w %d3,[%a2]
80002d78:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002d7c:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002d7e:	54 23       	ld.w %d3,[%a2]
80002d80:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002d84:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002d86:	54 23       	ld.w %d3,[%a2]
80002d88:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002d8c:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002d8e:	54 23       	ld.w %d3,[%a2]
80002d90:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002d94:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.boff.priority > 0) || (config->interruptConfig.boff.typeOfService == IfxSrc_Tos_dma))
80002d96:	b9 c2 28 30 	ld.hu %d2,[%a12]232
80002d9a:	df 02 06 80 	jne %d2,0,80002da6 <IfxCan_Can_initNode+0x6ca>
80002d9e:	19 c2 2c 30 	ld.w %d2,[%a12]236
80002da2:	df 12 21 80 	jne %d2,1,80002de4 <IfxCan_Can_initNode+0x708>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_boff, config->interruptConfig.boff.interruptLine);
80002da6:	19 c5 24 30 	ld.w %d5,[%a12]228
80002daa:	82 64       	mov %d4,6
80002dac:	60 a4       	mov.a %a4,%d10
80002dae:	6d ff 9f fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.boff.interruptLine);
80002db2:	19 c4 24 30 	ld.w %d4,[%a12]228
80002db6:	d4 c4       	ld.a %a4,[%a12]
80002db8:	6d ff 0c fc 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.boff.typeOfService, config->interruptConfig.boff.priority);
80002dbc:	19 c4 2c 30 	ld.w %d4,[%a12]236
    src->B.SRPN = priority;
80002dc0:	39 c2 28 30 	ld.bu %d2,[%a12]232
80002dc4:	54 23       	ld.w %d3,[%a2]
80002dc6:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002dca:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002dcc:	54 23       	ld.w %d3,[%a2]
80002dce:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002dd2:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002dd4:	54 23       	ld.w %d3,[%a2]
80002dd6:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002dda:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002ddc:	54 23       	ld.w %d3,[%a2]
80002dde:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002de2:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.loi.priority > 0) || (config->interruptConfig.loi.typeOfService == IfxSrc_Tos_dma))
80002de4:	b9 c2 34 30 	ld.hu %d2,[%a12]244
80002de8:	df 02 06 80 	jne %d2,0,80002df4 <IfxCan_Can_initNode+0x718>
80002dec:	19 c2 38 30 	ld.w %d2,[%a12]248
80002df0:	df 12 21 80 	jne %d2,1,80002e32 <IfxCan_Can_initNode+0x756>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_loi, config->interruptConfig.loi.interruptLine);
80002df4:	19 c5 30 30 	ld.w %d5,[%a12]240
80002df8:	82 74       	mov %d4,7
80002dfa:	60 a4       	mov.a %a4,%d10
80002dfc:	6d ff 78 fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.loi.interruptLine);
80002e00:	19 c4 30 30 	ld.w %d4,[%a12]240
80002e04:	d4 c4       	ld.a %a4,[%a12]
80002e06:	6d ff e5 fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.loi.typeOfService, config->interruptConfig.loi.priority);
80002e0a:	19 c4 38 30 	ld.w %d4,[%a12]248
    src->B.SRPN = priority;
80002e0e:	39 c2 34 30 	ld.bu %d2,[%a12]244
80002e12:	54 23       	ld.w %d3,[%a2]
80002e14:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002e18:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002e1a:	54 23       	ld.w %d3,[%a2]
80002e1c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002e20:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002e22:	54 23       	ld.w %d3,[%a2]
80002e24:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002e28:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002e2a:	54 23       	ld.w %d3,[%a2]
80002e2c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002e30:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.reint.priority > 0) || (config->interruptConfig.reint.typeOfService == IfxSrc_Tos_dma))
80002e32:	b9 c2 00 40 	ld.hu %d2,[%a12]256
80002e36:	df 02 06 80 	jne %d2,0,80002e42 <IfxCan_Can_initNode+0x766>
80002e3a:	19 c2 04 40 	ld.w %d2,[%a12]260
80002e3e:	df 12 22 80 	jne %d2,1,80002e82 <IfxCan_Can_initNode+0x7a6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_reint, config->interruptConfig.reint.interruptLine);
80002e42:	19 c5 3c 30 	ld.w %d5,[%a12]252
80002e46:	3b 80 00 40 	mov %d4,8
80002e4a:	60 a4       	mov.a %a4,%d10
80002e4c:	6d ff 50 fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.reint.interruptLine);
80002e50:	19 c4 3c 30 	ld.w %d4,[%a12]252
80002e54:	d4 c4       	ld.a %a4,[%a12]
80002e56:	6d ff bd fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.reint.typeOfService, config->interruptConfig.reint.priority);
80002e5a:	19 c4 04 40 	ld.w %d4,[%a12]260
    src->B.SRPN = priority;
80002e5e:	39 c2 00 40 	ld.bu %d2,[%a12]256
80002e62:	54 23       	ld.w %d3,[%a2]
80002e64:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002e68:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002e6a:	54 23       	ld.w %d3,[%a2]
80002e6c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002e70:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002e72:	54 23       	ld.w %d3,[%a2]
80002e74:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002e78:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002e7a:	54 23       	ld.w %d3,[%a2]
80002e7c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002e80:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf1f.priority > 0) || (config->interruptConfig.rxf1f.typeOfService == IfxSrc_Tos_dma))
80002e82:	b9 c2 0c 40 	ld.hu %d2,[%a12]268
80002e86:	df 02 06 80 	jne %d2,0,80002e92 <IfxCan_Can_initNode+0x7b6>
80002e8a:	19 c2 10 40 	ld.w %d2,[%a12]272
80002e8e:	df 12 22 80 	jne %d2,1,80002ed2 <IfxCan_Can_initNode+0x7f6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf1f, config->interruptConfig.rxf1f.interruptLine);
80002e92:	19 c5 08 40 	ld.w %d5,[%a12]264
80002e96:	3b 90 00 40 	mov %d4,9
80002e9a:	60 a4       	mov.a %a4,%d10
80002e9c:	6d ff 28 fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf1f.interruptLine);
80002ea0:	19 c4 08 40 	ld.w %d4,[%a12]264
80002ea4:	d4 c4       	ld.a %a4,[%a12]
80002ea6:	6d ff 95 fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf1f.typeOfService, config->interruptConfig.rxf1f.priority);
80002eaa:	19 c4 10 40 	ld.w %d4,[%a12]272
    src->B.SRPN = priority;
80002eae:	39 c2 0c 40 	ld.bu %d2,[%a12]268
80002eb2:	54 23       	ld.w %d3,[%a2]
80002eb4:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002eb8:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002eba:	54 23       	ld.w %d3,[%a2]
80002ebc:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002ec0:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002ec2:	54 23       	ld.w %d3,[%a2]
80002ec4:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002ec8:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002eca:	54 23       	ld.w %d3,[%a2]
80002ecc:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002ed0:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf0f.priority > 0) || (config->interruptConfig.rxf0f.typeOfService == IfxSrc_Tos_dma))
80002ed2:	b9 c2 18 40 	ld.hu %d2,[%a12]280
80002ed6:	df 02 06 80 	jne %d2,0,80002ee2 <IfxCan_Can_initNode+0x806>
80002eda:	19 c2 1c 40 	ld.w %d2,[%a12]284
80002ede:	df 12 22 80 	jne %d2,1,80002f22 <IfxCan_Can_initNode+0x846>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf0f, config->interruptConfig.rxf0f.interruptLine);
80002ee2:	19 c5 14 40 	ld.w %d5,[%a12]276
80002ee6:	3b a0 00 40 	mov %d4,10
80002eea:	60 a4       	mov.a %a4,%d10
80002eec:	6d ff 00 fb 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf0f.interruptLine);
80002ef0:	19 c4 14 40 	ld.w %d4,[%a12]276
80002ef4:	d4 c4       	ld.a %a4,[%a12]
80002ef6:	6d ff 6d fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf0f.typeOfService, config->interruptConfig.rxf0f.priority);
80002efa:	19 c4 1c 40 	ld.w %d4,[%a12]284
    src->B.SRPN = priority;
80002efe:	39 c2 18 40 	ld.bu %d2,[%a12]280
80002f02:	54 23       	ld.w %d3,[%a2]
80002f04:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002f08:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002f0a:	54 23       	ld.w %d3,[%a2]
80002f0c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002f10:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002f12:	54 23       	ld.w %d3,[%a2]
80002f14:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002f18:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002f1a:	54 23       	ld.w %d3,[%a2]
80002f1c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002f20:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf1n.priority > 0) || (config->interruptConfig.rxf1f.typeOfService == IfxSrc_Tos_dma))
80002f22:	b9 c2 24 40 	ld.hu %d2,[%a12]292
80002f26:	df 02 06 80 	jne %d2,0,80002f32 <IfxCan_Can_initNode+0x856>
80002f2a:	19 c2 10 40 	ld.w %d2,[%a12]272
80002f2e:	df 12 22 80 	jne %d2,1,80002f72 <IfxCan_Can_initNode+0x896>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf1n, config->interruptConfig.rxf1n.interruptLine);
80002f32:	19 c5 20 40 	ld.w %d5,[%a12]288
80002f36:	3b b0 00 40 	mov %d4,11
80002f3a:	60 a4       	mov.a %a4,%d10
80002f3c:	6d ff d8 fa 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf1n.interruptLine);
80002f40:	19 c4 20 40 	ld.w %d4,[%a12]288
80002f44:	d4 c4       	ld.a %a4,[%a12]
80002f46:	6d ff 45 fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf1n.typeOfService, config->interruptConfig.rxf1n.priority);
80002f4a:	19 c4 28 40 	ld.w %d4,[%a12]296
    src->B.SRPN = priority;
80002f4e:	39 c2 24 40 	ld.bu %d2,[%a12]292
80002f52:	54 23       	ld.w %d3,[%a2]
80002f54:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002f58:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002f5a:	54 23       	ld.w %d3,[%a2]
80002f5c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002f60:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002f62:	54 23       	ld.w %d3,[%a2]
80002f64:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002f68:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002f6a:	54 23       	ld.w %d3,[%a2]
80002f6c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002f70:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf0n.priority > 0) || (config->interruptConfig.rxf0n.typeOfService == IfxSrc_Tos_dma))
80002f72:	b9 c2 30 40 	ld.hu %d2,[%a12]304
80002f76:	df 02 06 80 	jne %d2,0,80002f82 <IfxCan_Can_initNode+0x8a6>
80002f7a:	19 c2 34 40 	ld.w %d2,[%a12]308
80002f7e:	df 12 22 80 	jne %d2,1,80002fc2 <IfxCan_Can_initNode+0x8e6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf0n, config->interruptConfig.rxf0n.interruptLine);
80002f82:	19 c5 2c 40 	ld.w %d5,[%a12]300
80002f86:	3b c0 00 40 	mov %d4,12
80002f8a:	60 a4       	mov.a %a4,%d10
80002f8c:	6d ff b0 fa 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf0n.interruptLine);
80002f90:	19 c4 2c 40 	ld.w %d4,[%a12]300
80002f94:	d4 c4       	ld.a %a4,[%a12]
80002f96:	6d ff 1d fb 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf0n.typeOfService, config->interruptConfig.rxf0n.priority);
80002f9a:	19 c4 34 40 	ld.w %d4,[%a12]308
    src->B.SRPN = priority;
80002f9e:	39 c2 30 40 	ld.bu %d2,[%a12]304
80002fa2:	54 23       	ld.w %d3,[%a2]
80002fa4:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002fa8:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002faa:	54 23       	ld.w %d3,[%a2]
80002fac:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002fb0:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002fb2:	54 23       	ld.w %d3,[%a2]
80002fb4:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002fb8:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002fba:	54 23       	ld.w %d3,[%a2]
80002fbc:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002fc0:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.reti.priority > 0) || (config->interruptConfig.reti.typeOfService == IfxSrc_Tos_dma))
80002fc2:	b9 c2 3c 40 	ld.hu %d2,[%a12]316
80002fc6:	df 02 06 80 	jne %d2,0,80002fd2 <IfxCan_Can_initNode+0x8f6>
80002fca:	19 c2 00 50 	ld.w %d2,[%a12]320
80002fce:	df 12 22 80 	jne %d2,1,80003012 <IfxCan_Can_initNode+0x936>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_reti, config->interruptConfig.reti.interruptLine);
80002fd2:	19 c5 38 40 	ld.w %d5,[%a12]312
80002fd6:	3b d0 00 40 	mov %d4,13
80002fda:	60 a4       	mov.a %a4,%d10
80002fdc:	6d ff 88 fa 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.reti.interruptLine);
80002fe0:	19 c4 38 40 	ld.w %d4,[%a12]312
80002fe4:	d4 c4       	ld.a %a4,[%a12]
80002fe6:	6d ff f5 fa 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.reti.typeOfService, config->interruptConfig.reti.priority);
80002fea:	19 c4 00 50 	ld.w %d4,[%a12]320
    src->B.SRPN = priority;
80002fee:	39 c2 3c 40 	ld.bu %d2,[%a12]316
80002ff2:	54 23       	ld.w %d3,[%a2]
80002ff4:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002ff8:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002ffa:	54 23       	ld.w %d3,[%a2]
80002ffc:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80003000:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80003002:	54 23       	ld.w %d3,[%a2]
80003004:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80003008:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
8000300a:	54 23       	ld.w %d3,[%a2]
8000300c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80003010:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.traq.priority > 0) || (config->interruptConfig.traq.typeOfService == IfxSrc_Tos_dma))
80003012:	b9 c2 08 50 	ld.hu %d2,[%a12]328
80003016:	df 02 06 80 	jne %d2,0,80003022 <IfxCan_Can_initNode+0x946>
8000301a:	19 c2 0c 50 	ld.w %d2,[%a12]332
8000301e:	df 12 22 80 	jne %d2,1,80003062 <IfxCan_Can_initNode+0x986>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_traq, config->interruptConfig.traq.interruptLine);
80003022:	19 c5 04 50 	ld.w %d5,[%a12]324
80003026:	3b e0 00 40 	mov %d4,14
8000302a:	60 a4       	mov.a %a4,%d10
8000302c:	6d ff 60 fa 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.traq.interruptLine);
80003030:	19 c4 04 50 	ld.w %d4,[%a12]324
80003034:	d4 c4       	ld.a %a4,[%a12]
80003036:	6d ff cd fa 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.traq.typeOfService, config->interruptConfig.traq.priority);
8000303a:	19 c4 0c 50 	ld.w %d4,[%a12]332
    src->B.SRPN = priority;
8000303e:	39 c2 08 50 	ld.bu %d2,[%a12]328
80003042:	54 23       	ld.w %d3,[%a2]
80003044:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80003048:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
8000304a:	54 23       	ld.w %d3,[%a2]
8000304c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80003050:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80003052:	54 23       	ld.w %d3,[%a2]
80003054:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80003058:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
8000305a:	54 23       	ld.w %d3,[%a2]
8000305c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80003060:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.traco.priority > 0) || (config->interruptConfig.traco.typeOfService == IfxSrc_Tos_dma))
80003062:	b9 c2 14 50 	ld.hu %d2,[%a12]340
80003066:	df 02 06 80 	jne %d2,0,80003072 <IfxCan_Can_initNode+0x996>
8000306a:	19 c2 18 50 	ld.w %d2,[%a12]344
8000306e:	df 12 22 80 	jne %d2,1,800030b2 <IfxCan_Can_initNode+0x9d6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_traco, config->interruptConfig.traco.interruptLine);
80003072:	19 c5 10 50 	ld.w %d5,[%a12]336
80003076:	3b f0 00 40 	mov %d4,15
8000307a:	60 a4       	mov.a %a4,%d10
8000307c:	6d ff 38 fa 	call 800024ec <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.traco.interruptLine);
80003080:	19 c4 10 50 	ld.w %d4,[%a12]336
80003084:	d4 c4       	ld.a %a4,[%a12]
80003086:	6d ff a5 fa 	call 800025d0 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.traco.typeOfService, config->interruptConfig.traco.priority);
8000308a:	19 c4 18 50 	ld.w %d4,[%a12]344
    src->B.SRPN = priority;
8000308e:	39 c2 14 50 	ld.bu %d2,[%a12]340
80003092:	54 23       	ld.w %d3,[%a2]
80003094:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80003098:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
8000309a:	54 23       	ld.w %d3,[%a2]
8000309c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
800030a0:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
800030a2:	54 23       	ld.w %d3,[%a2]
800030a4:	b7 13 81 3c 	insert %d3,%d3,1,25,1
800030a8:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
800030aa:	54 23       	ld.w %d3,[%a2]
800030ac:	b7 13 01 35 	insert %d3,%d3,1,10,1
800030b0:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    /* enable the selected interrupts */
    if (config->interruptConfig.rxFifo0NewMessageEnabled)
800030b2:	39 c2 00 20 	ld.bu %d2,[%a12]128
800030b6:	df 02 0e 00 	jeq %d2,0,800030d2 <IfxCan_Can_initNode+0x9f6>
    node->IE.U = node->IE.U | (mask);
800030ba:	8f a8 00 20 	sh %d2,%d8,10
800030be:	42 92       	add %d2,%d9
800030c0:	bb 40 25 38 	mov.u %d3,33364
800030c4:	60 22       	mov.a %a2,%d2
800030c6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800030ca:	54 22       	ld.w %d2,[%a2]
800030cc:	8f 12 40 21 	or %d2,%d2,1
800030d0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0NewMessage);
    }

    if (config->interruptConfig.rxFifo0WatermarkEnabled)
800030d2:	39 c2 01 20 	ld.bu %d2,[%a12]129
800030d6:	df 02 0e 00 	jeq %d2,0,800030f2 <IfxCan_Can_initNode+0xa16>
800030da:	8f a8 00 20 	sh %d2,%d8,10
800030de:	42 92       	add %d2,%d9
800030e0:	bb 40 25 38 	mov.u %d3,33364
800030e4:	60 22       	mov.a %a2,%d2
800030e6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800030ea:	54 22       	ld.w %d2,[%a2]
800030ec:	8f 22 40 21 	or %d2,%d2,2
800030f0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0WatermarkReached);
    }

    if (config->interruptConfig.rxFifo0FullEnabled)
800030f2:	39 c2 02 20 	ld.bu %d2,[%a12]130
800030f6:	df 02 0e 00 	jeq %d2,0,80003112 <IfxCan_Can_initNode+0xa36>
800030fa:	8f a8 00 20 	sh %d2,%d8,10
800030fe:	42 92       	add %d2,%d9
80003100:	bb 40 25 38 	mov.u %d3,33364
80003104:	60 22       	mov.a %a2,%d2
80003106:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000310a:	54 22       	ld.w %d2,[%a2]
8000310c:	8f 42 40 21 	or %d2,%d2,4
80003110:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0Full);
    }

    if (config->interruptConfig.rxFifo0MessageLostEnabled)
80003112:	39 c2 03 20 	ld.bu %d2,[%a12]131
80003116:	df 02 0e 00 	jeq %d2,0,80003132 <IfxCan_Can_initNode+0xa56>
8000311a:	8f a8 00 20 	sh %d2,%d8,10
8000311e:	42 92       	add %d2,%d9
80003120:	bb 40 25 38 	mov.u %d3,33364
80003124:	60 22       	mov.a %a2,%d2
80003126:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000312a:	54 22       	ld.w %d2,[%a2]
8000312c:	8f 82 40 21 	or %d2,%d2,8
80003130:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0MessageLost);
    }

    if (config->interruptConfig.rxFifo1NewMessageEnabled)
80003132:	39 c2 04 20 	ld.bu %d2,[%a12]132
80003136:	df 02 0e 00 	jeq %d2,0,80003152 <IfxCan_Can_initNode+0xa76>
8000313a:	8f a8 00 20 	sh %d2,%d8,10
8000313e:	42 92       	add %d2,%d9
80003140:	bb 40 25 38 	mov.u %d3,33364
80003144:	60 22       	mov.a %a2,%d2
80003146:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000314a:	54 22       	ld.w %d2,[%a2]
8000314c:	8f 02 41 21 	or %d2,%d2,16
80003150:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1NewMessage);
    }

    if (config->interruptConfig.rxFifo1WatermarkEnabled)
80003152:	39 c2 05 20 	ld.bu %d2,[%a12]133
80003156:	df 02 0e 00 	jeq %d2,0,80003172 <IfxCan_Can_initNode+0xa96>
8000315a:	8f a8 00 20 	sh %d2,%d8,10
8000315e:	42 92       	add %d2,%d9
80003160:	bb 40 25 38 	mov.u %d3,33364
80003164:	60 22       	mov.a %a2,%d2
80003166:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000316a:	54 22       	ld.w %d2,[%a2]
8000316c:	8f 02 42 21 	or %d2,%d2,32
80003170:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1WatermarkReached);
    }

    if (config->interruptConfig.rxFifo1FullEnabled)
80003172:	39 c2 06 20 	ld.bu %d2,[%a12]134
80003176:	df 02 0e 00 	jeq %d2,0,80003192 <IfxCan_Can_initNode+0xab6>
8000317a:	8f a8 00 20 	sh %d2,%d8,10
8000317e:	42 92       	add %d2,%d9
80003180:	bb 40 25 38 	mov.u %d3,33364
80003184:	60 22       	mov.a %a2,%d2
80003186:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000318a:	54 22       	ld.w %d2,[%a2]
8000318c:	8f 02 44 21 	or %d2,%d2,64
80003190:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1Full);
    }

    if (config->interruptConfig.rxFifo1MessageLostEnabled)
80003192:	39 c2 07 20 	ld.bu %d2,[%a12]135
80003196:	df 02 0e 00 	jeq %d2,0,800031b2 <IfxCan_Can_initNode+0xad6>
8000319a:	8f a8 00 20 	sh %d2,%d8,10
8000319e:	42 92       	add %d2,%d9
800031a0:	bb 40 25 38 	mov.u %d3,33364
800031a4:	60 22       	mov.a %a2,%d2
800031a6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031aa:	54 22       	ld.w %d2,[%a2]
800031ac:	8f 02 48 21 	or %d2,%d2,128
800031b0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1MessageLost);
    }

    if (config->interruptConfig.highPriorityMessageEnabled)
800031b2:	39 c2 08 20 	ld.bu %d2,[%a12]136
800031b6:	df 02 0e 00 	jeq %d2,0,800031d2 <IfxCan_Can_initNode+0xaf6>
800031ba:	8f a8 00 20 	sh %d2,%d8,10
800031be:	42 92       	add %d2,%d9
800031c0:	bb 40 25 38 	mov.u %d3,33364
800031c4:	60 22       	mov.a %a2,%d2
800031c6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031ca:	54 22       	ld.w %d2,[%a2]
800031cc:	8f 02 50 21 	or %d2,%d2,256
800031d0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_highPriorityMessage);
    }

    if (config->interruptConfig.transmissionCompletedEnabled)
800031d2:	39 c2 09 20 	ld.bu %d2,[%a12]137
800031d6:	df 02 0e 00 	jeq %d2,0,800031f2 <IfxCan_Can_initNode+0xb16>
800031da:	8f a8 00 20 	sh %d2,%d8,10
800031de:	42 92       	add %d2,%d9
800031e0:	bb 40 25 38 	mov.u %d3,33364
800031e4:	60 22       	mov.a %a2,%d2
800031e6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031ea:	54 22       	ld.w %d2,[%a2]
800031ec:	b7 f2 81 24 	insert %d2,%d2,15,9,1
800031f0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_transmissionCompleted);
    }

    if (config->interruptConfig.transmissionCancellationFinishedEnabled)
800031f2:	39 c2 0a 20 	ld.bu %d2,[%a12]138
800031f6:	df 02 0e 00 	jeq %d2,0,80003212 <IfxCan_Can_initNode+0xb36>
800031fa:	8f a8 00 20 	sh %d2,%d8,10
800031fe:	42 92       	add %d2,%d9
80003200:	bb 40 25 38 	mov.u %d3,33364
80003204:	60 22       	mov.a %a2,%d2
80003206:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000320a:	54 22       	ld.w %d2,[%a2]
8000320c:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80003210:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_transmissionCancellationFinished);
    }

    if (config->interruptConfig.txFifoEmptyEnabled)
80003212:	39 c2 0b 20 	ld.bu %d2,[%a12]139
80003216:	df 02 0e 00 	jeq %d2,0,80003232 <IfxCan_Can_initNode+0xb56>
8000321a:	8f a8 00 20 	sh %d2,%d8,10
8000321e:	42 92       	add %d2,%d9
80003220:	bb 40 25 38 	mov.u %d3,33364
80003224:	60 22       	mov.a %a2,%d2
80003226:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000322a:	54 22       	ld.w %d2,[%a2]
8000322c:	b7 f2 81 25 	insert %d2,%d2,15,11,1
80003230:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txFifoEmpty);
    }

    if (config->interruptConfig.txEventFifoNewEntryEnabled)
80003232:	39 c2 0c 20 	ld.bu %d2,[%a12]140
80003236:	df 02 0e 00 	jeq %d2,0,80003252 <IfxCan_Can_initNode+0xb76>
8000323a:	8f a8 00 20 	sh %d2,%d8,10
8000323e:	42 92       	add %d2,%d9
80003240:	bb 40 25 38 	mov.u %d3,33364
80003244:	60 22       	mov.a %a2,%d2
80003246:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000324a:	54 22       	ld.w %d2,[%a2]
8000324c:	b7 f2 01 26 	insert %d2,%d2,15,12,1
80003250:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoNewEntry);
    }

    if (config->interruptConfig.txEventFifoWatermarkEnabled)
80003252:	39 c2 0d 20 	ld.bu %d2,[%a12]141
80003256:	df 02 0e 00 	jeq %d2,0,80003272 <IfxCan_Can_initNode+0xb96>
8000325a:	8f a8 00 20 	sh %d2,%d8,10
8000325e:	42 92       	add %d2,%d9
80003260:	bb 40 25 38 	mov.u %d3,33364
80003264:	60 22       	mov.a %a2,%d2
80003266:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000326a:	54 22       	ld.w %d2,[%a2]
8000326c:	b7 f2 81 26 	insert %d2,%d2,15,13,1
80003270:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoWatermarkReached);
    }

    if (config->interruptConfig.txEventFifoFullEnabled)
80003272:	39 c2 0e 20 	ld.bu %d2,[%a12]142
80003276:	df 02 0e 00 	jeq %d2,0,80003292 <IfxCan_Can_initNode+0xbb6>
8000327a:	8f a8 00 20 	sh %d2,%d8,10
8000327e:	42 92       	add %d2,%d9
80003280:	bb 40 25 38 	mov.u %d3,33364
80003284:	60 22       	mov.a %a2,%d2
80003286:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000328a:	54 22       	ld.w %d2,[%a2]
8000328c:	b7 f2 01 27 	insert %d2,%d2,15,14,1
80003290:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoFull);
    }

    if (config->interruptConfig.txEventFifoEventLostEnabled)
80003292:	39 c2 0f 20 	ld.bu %d2,[%a12]143
80003296:	df 02 0e 00 	jeq %d2,0,800032b2 <IfxCan_Can_initNode+0xbd6>
8000329a:	8f a8 00 20 	sh %d2,%d8,10
8000329e:	42 92       	add %d2,%d9
800032a0:	bb 40 25 38 	mov.u %d3,33364
800032a4:	60 22       	mov.a %a2,%d2
800032a6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032aa:	54 22       	ld.w %d2,[%a2]
800032ac:	b7 f2 81 27 	insert %d2,%d2,15,15,1
800032b0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoEventLost);
    }

    if (config->interruptConfig.timestampWraparoundEnabled)
800032b2:	39 c2 10 20 	ld.bu %d2,[%a12]144
800032b6:	df 02 0e 00 	jeq %d2,0,800032d2 <IfxCan_Can_initNode+0xbf6>
800032ba:	8f a8 00 20 	sh %d2,%d8,10
800032be:	42 92       	add %d2,%d9
800032c0:	bb 40 25 38 	mov.u %d3,33364
800032c4:	60 22       	mov.a %a2,%d2
800032c6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032ca:	54 22       	ld.w %d2,[%a2]
800032cc:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800032d0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_timestampWraparound);
    }

    if (config->interruptConfig.messageRAMAccessFailureEnabled)
800032d2:	39 c2 11 20 	ld.bu %d2,[%a12]145
800032d6:	df 02 0e 00 	jeq %d2,0,800032f2 <IfxCan_Can_initNode+0xc16>
800032da:	8f a8 00 20 	sh %d2,%d8,10
800032de:	42 92       	add %d2,%d9
800032e0:	bb 40 25 38 	mov.u %d3,33364
800032e4:	60 22       	mov.a %a2,%d2
800032e6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032ea:	54 22       	ld.w %d2,[%a2]
800032ec:	b7 f2 81 28 	insert %d2,%d2,15,17,1
800032f0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_messageRAMAccessFailure);
    }

    if (config->interruptConfig.timeoutOccurredEnabled)
800032f2:	39 c2 12 20 	ld.bu %d2,[%a12]146
800032f6:	df 02 0e 00 	jeq %d2,0,80003312 <IfxCan_Can_initNode+0xc36>
800032fa:	8f a8 00 20 	sh %d2,%d8,10
800032fe:	42 92       	add %d2,%d9
80003300:	bb 40 25 38 	mov.u %d3,33364
80003304:	60 22       	mov.a %a2,%d2
80003306:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000330a:	54 22       	ld.w %d2,[%a2]
8000330c:	b7 f2 01 29 	insert %d2,%d2,15,18,1
80003310:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_timeoutOccurred);
    }

    if (config->interruptConfig.messageStoredToDedicatedRxBufferEnabled)
80003312:	39 c2 13 20 	ld.bu %d2,[%a12]147
80003316:	df 02 0e 00 	jeq %d2,0,80003332 <IfxCan_Can_initNode+0xc56>
8000331a:	8f a8 00 20 	sh %d2,%d8,10
8000331e:	42 92       	add %d2,%d9
80003320:	bb 40 25 38 	mov.u %d3,33364
80003324:	60 22       	mov.a %a2,%d2
80003326:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000332a:	54 22       	ld.w %d2,[%a2]
8000332c:	b7 f2 81 29 	insert %d2,%d2,15,19,1
80003330:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_messageStoredToDedicatedRxBuffer);
    }

    if (config->interruptConfig.errorLoggingOverflowEnabled)
80003332:	39 c2 14 20 	ld.bu %d2,[%a12]148
80003336:	df 02 0e 00 	jeq %d2,0,80003352 <IfxCan_Can_initNode+0xc76>
8000333a:	8f a8 00 20 	sh %d2,%d8,10
8000333e:	42 92       	add %d2,%d9
80003340:	bb 40 25 38 	mov.u %d3,33364
80003344:	60 22       	mov.a %a2,%d2
80003346:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000334a:	54 22       	ld.w %d2,[%a2]
8000334c:	b7 f2 01 2b 	insert %d2,%d2,15,22,1
80003350:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_errorLoggingOverflow);
    }

    if (config->interruptConfig.errorPassiveEnabled)
80003352:	39 c2 15 20 	ld.bu %d2,[%a12]149
80003356:	df 02 0e 00 	jeq %d2,0,80003372 <IfxCan_Can_initNode+0xc96>
8000335a:	8f a8 00 20 	sh %d2,%d8,10
8000335e:	42 92       	add %d2,%d9
80003360:	bb 40 25 38 	mov.u %d3,33364
80003364:	60 22       	mov.a %a2,%d2
80003366:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000336a:	54 22       	ld.w %d2,[%a2]
8000336c:	b7 f2 81 2b 	insert %d2,%d2,15,23,1
80003370:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_errorPassive);
    }

    if (config->interruptConfig.warningStatusEnabled)
80003372:	39 c2 16 20 	ld.bu %d2,[%a12]150
80003376:	df 02 0e 00 	jeq %d2,0,80003392 <IfxCan_Can_initNode+0xcb6>
8000337a:	8f a8 00 20 	sh %d2,%d8,10
8000337e:	42 92       	add %d2,%d9
80003380:	bb 40 25 38 	mov.u %d3,33364
80003384:	60 22       	mov.a %a2,%d2
80003386:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000338a:	54 22       	ld.w %d2,[%a2]
8000338c:	b7 f2 01 2c 	insert %d2,%d2,15,24,1
80003390:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_warningStatus);
    }

    if (config->interruptConfig.busOffStatusEnabled)
80003392:	39 c2 17 20 	ld.bu %d2,[%a12]151
80003396:	df 02 0e 00 	jeq %d2,0,800033b2 <IfxCan_Can_initNode+0xcd6>
8000339a:	8f a8 00 20 	sh %d2,%d8,10
8000339e:	42 92       	add %d2,%d9
800033a0:	bb 40 25 38 	mov.u %d3,33364
800033a4:	60 22       	mov.a %a2,%d2
800033a6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800033aa:	54 22       	ld.w %d2,[%a2]
800033ac:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800033b0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_busOffStatus);
    }

    if (config->interruptConfig.watchdogEnabled)
800033b2:	39 c2 18 20 	ld.bu %d2,[%a12]152
800033b6:	df 02 0e 00 	jeq %d2,0,800033d2 <IfxCan_Can_initNode+0xcf6>
800033ba:	8f a8 00 20 	sh %d2,%d8,10
800033be:	42 92       	add %d2,%d9
800033c0:	bb 40 25 38 	mov.u %d3,33364
800033c4:	60 22       	mov.a %a2,%d2
800033c6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800033ca:	54 22       	ld.w %d2,[%a2]
800033cc:	b7 f2 01 2d 	insert %d2,%d2,15,26,1
800033d0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_watchdog);
    }

    if (config->interruptConfig.protocolErrorArbitrationEnabled)
800033d2:	39 c2 19 20 	ld.bu %d2,[%a12]153
800033d6:	df 02 0e 00 	jeq %d2,0,800033f2 <IfxCan_Can_initNode+0xd16>
800033da:	8f a8 00 20 	sh %d2,%d8,10
800033de:	42 92       	add %d2,%d9
800033e0:	bb 40 25 38 	mov.u %d3,33364
800033e4:	60 22       	mov.a %a2,%d2
800033e6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800033ea:	54 22       	ld.w %d2,[%a2]
800033ec:	b7 f2 81 2d 	insert %d2,%d2,15,27,1
800033f0:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_protocolErrorArbitration);
    }

    if (config->interruptConfig.protocolErrorDataEnabled)
800033f2:	39 c2 1a 20 	ld.bu %d2,[%a12]154
800033f6:	df 02 0e 00 	jeq %d2,0,80003412 <IfxCan_Can_initNode+0xd36>
800033fa:	8f a8 00 20 	sh %d2,%d8,10
800033fe:	42 92       	add %d2,%d9
80003400:	bb 40 25 38 	mov.u %d3,33364
80003404:	60 22       	mov.a %a2,%d2
80003406:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000340a:	54 22       	ld.w %d2,[%a2]
8000340c:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80003410:	74 22       	st.w [%a2],%d2
    node->CCCR.B.CCE = 0;
80003412:	8f a8 00 20 	sh %d2,%d8,10
80003416:	42 92       	add %d2,%d9
80003418:	bb 80 21 38 	mov.u %d3,33304
8000341c:	60 22       	mov.a %a2,%d2
8000341e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003422:	54 23       	ld.w %d3,[%a2]
80003424:	8f 23 c0 31 	andn %d3,%d3,2
80003428:	74 23       	st.w [%a2],%d3
    while (node->CCCR.B.CCE != 0)
8000342a:	8f a8 00 30 	sh %d3,%d8,10
8000342e:	42 93       	add %d3,%d9
80003430:	bb 80 21 48 	mov.u %d4,33304
80003434:	60 32       	mov.a %a2,%d3
80003436:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000343a:	54 23       	ld.w %d3,[%a2]
8000343c:	6f 13 f7 ff 	jnz.t %d3,1,8000342a <IfxCan_Can_initNode+0xd4e>
    node->CCCR.B.INIT = 0;
80003440:	8f a8 00 20 	sh %d2,%d8,10
80003444:	42 92       	add %d2,%d9
80003446:	60 22       	mov.a %a2,%d2
80003448:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000344c:	54 23       	ld.w %d3,[%a2]
8000344e:	8f 13 c0 31 	andn %d3,%d3,1
80003452:	74 23       	st.w [%a2],%d3
    while (node->CCCR.B.INIT != 0)
80003454:	8f a8 00 30 	sh %d3,%d8,10
80003458:	42 93       	add %d3,%d9
8000345a:	bb 80 21 48 	mov.u %d4,33304
8000345e:	60 32       	mov.a %a2,%d3
80003460:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003464:	54 23       	ld.w %d3,[%a2]
80003466:	6f 03 f7 ff 	jnz.t %d3,0,80003454 <IfxCan_Can_initNode+0xd78>

    /* disable configuration change CCCR.CCE = 0 */
    IfxCan_Node_disableConfigurationChange(nodeSfr);

    return status;
}
8000346a:	02 b2       	mov %d2,%d11
8000346c:	00 90       	ret 
        else if ((config->txConfig.txMode == IfxCan_TxMode_fifo) || (config->txConfig.txMode == IfxCan_TxMode_queue))
8000346e:	ff 22 87 fa 	jge.u %d2,2,8000297c <IfxCan_Can_initNode+0x2a0>
        node->TX.BC.B.TFQM = mode;
80003472:	8f a8 00 30 	sh %d3,%d8,10
80003476:	42 93       	add %d3,%d9
80003478:	bb 00 2c 48 	mov.u %d4,33472
8000347c:	60 32       	mov.a %a2,%d3
8000347e:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003482:	54 23       	ld.w %d3,[%a2]
80003484:	67 23 1e 30 	ins.t %d3,%d3,30,%d2,0
80003488:	74 23       	st.w [%a2],%d3
            IfxCan_Node_setTransmitFifoQueueSize(nodeSfr, config->txConfig.txFifoQueueSize);
8000348a:	39 c3 35 00 	ld.bu %d3,[%a12]53
    node->TX.BC.B.TFQS = number;
8000348e:	54 22       	ld.w %d2,[%a2]
80003490:	37 32 06 2c 	insert %d2,%d2,%d3,24,6
80003494:	74 22       	st.w [%a2],%d2
            for (id = 0; id < config->txConfig.txFifoQueueSize; ++id)
80003496:	82 02       	mov %d2,0
80003498:	1d 00 0f 00 	j 800034b6 <IfxCan_Can_initNode+0xdda>
    node->TX.BTIE.U = node->TX.BTIE.U | (mask);
8000349c:	8f a8 00 30 	sh %d3,%d8,10
800034a0:	42 93       	add %d3,%d9
800034a2:	bb 00 2e 48 	mov.u %d4,33504
800034a6:	60 32       	mov.a %a2,%d3
800034a8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800034ac:	54 23       	ld.w %d3,[%a2]
800034ae:	d7 13 01 32 	insert %d3,%d3,1,%d2,1
800034b2:	74 23       	st.w [%a2],%d3
800034b4:	c2 12       	add %d2,1
800034b6:	39 c3 35 00 	ld.bu %d3,[%a12]53
800034ba:	3f 32 f1 ff 	jlt.u %d2,%d3,8000349c <IfxCan_Can_initNode+0xdc0>
800034be:	1d ff 5f fa 	j 8000297c <IfxCan_Can_initNode+0x2a0>
    node->GFC.B.RRFS = 1U;
800034c2:	bb 00 28 38 	mov.u %d3,33408
800034c6:	60 42       	mov.a %a2,%d4
800034c8:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800034cc:	54 22       	ld.w %d2,[%a2]
800034ce:	b7 12 81 20 	insert %d2,%d2,1,1,1
800034d2:	74 22       	st.w [%a2],%d2
}
800034d4:	1d ff 44 fb 	j 80002b5c <IfxCan_Can_initNode+0x480>
            IfxCan_Node_setExtendedFilterListStartAddress(nodeSfr, config->messageRAM.extendedFilterListStartAddress);
800034d8:	b9 c3 32 10 	ld.hu %d3,[%a12]114
    node->XIDFC.B.FLESA = address >> 2;
800034dc:	06 e3       	sh %d3,-2
800034de:	8f a8 00 40 	sh %d4,%d8,10
800034e2:	42 94       	add %d4,%d9
800034e4:	bb 80 28 28 	mov.u %d2,33416
800034e8:	60 42       	mov.a %a2,%d4
800034ea:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800034ee:	54 22       	ld.w %d2,[%a2]
800034f0:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
800034f4:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setExtendedFilterListSize(nodeSfr, config->filterConfig.extendedListSize);
800034f6:	39 c3 05 10 	ld.bu %d3,[%a12]69
    node->XIDFC.B.LSE = size;
800034fa:	54 22       	ld.w %d2,[%a2]
800034fc:	37 32 07 28 	insert %d2,%d2,%d3,16,7
80003500:	74 22       	st.w [%a2],%d2
            IfxCan_Node_configureExtendedFilterForNonMatchingFrames(nodeSfr, config->filterConfig.extendedFilterForNonMatchingFrames);
80003502:	19 c3 0c 10 	ld.w %d3,[%a12]76
    node->GFC.B.ANFE = filter;
80003506:	bb 00 28 28 	mov.u %d2,33408
8000350a:	60 42       	mov.a %a2,%d4
8000350c:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003510:	54 22       	ld.w %d2,[%a2]
80003512:	37 32 02 21 	insert %d2,%d2,%d3,2,2
80003516:	74 22       	st.w [%a2],%d2
            if (config->filterConfig.rejectRemoteFramesWithExtendedId == 1U)
80003518:	39 c2 07 10 	ld.bu %d2,[%a12]71
8000351c:	df 12 25 fb 	jne %d2,1,80002b66 <IfxCan_Can_initNode+0x48a>
    node->GFC.B.RRFE = 1U;
80003520:	bb 00 28 38 	mov.u %d3,33408
80003524:	60 42       	mov.a %a2,%d4
80003526:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000352a:	54 22       	ld.w %d2,[%a2]
8000352c:	b7 12 01 20 	insert %d2,%d2,1,0,1
80003530:	74 22       	st.w [%a2],%d2
}
80003532:	1d ff 1a fb 	j 80002b66 <IfxCan_Can_initNode+0x48a>
    boolean    status  = 0;
80003536:	82 0b       	mov %d11,0
80003538:	1d ff 25 fb 	j 80002b82 <IfxCan_Can_initNode+0x4a6>
8000353c:	82 0b       	mov %d11,0
8000353e:	1d ff 32 fb 	j 80002ba2 <IfxCan_Can_initNode+0x4c6>

80003542 <IfxCan_Can_initNodeConfig>:


void IfxCan_Can_initNodeConfig(IfxCan_Can_NodeConfig *config, IfxCan_Can *can)
{
80003542:	40 ae       	mov.aa %a14,%sp
80003544:	d9 aa d8 af 	lea %sp,[%sp]-360
80003548:	40 4f       	mov.aa %a15,%a4
8000354a:	40 5c       	mov.aa %a12,%a5
    const IfxCan_Can_NodeConfig defaultConfig = {
8000354c:	d9 ed dc af 	lea %a13,[%a14]-356
80003550:	3b 40 16 50 	mov %d5,356
80003554:	82 04       	mov %d4,0
80003556:	40 d4       	mov.aa %a4,%a13
80003558:	6d 00 71 08 	call 8000463a <memset>
8000355c:	82 32       	mov %d2,3
8000355e:	59 e2 e4 af 	st.w [%a14]-348,%d2
80003562:	7b 80 00 30 	movh %d3,8
80003566:	1b 03 12 3a 	addi %d3,%d3,-24288
8000356a:	59 e3 f0 af 	st.w [%a14]-336,%d3
8000356e:	3b 00 f4 31 	mov %d3,8000
80003572:	f9 e3 f4 af 	st.h [%a14]-332,%d3
80003576:	f9 e2 f6 af 	st.h [%a14]-330,%d2
8000357a:	e9 e2 fa af 	st.b [%a14]-326,%d2
8000357e:	3b a0 00 40 	mov %d4,10
80003582:	e9 e4 fb af 	st.b [%a14]-325,%d4
80003586:	7b f0 00 50 	movh %d5,15
8000358a:	1b 05 24 54 	addi %d5,%d5,16960
8000358e:	59 e5 fc af 	st.w [%a14]-324,%d5
80003592:	f9 e3 c0 bf 	st.h [%a14]-320,%d3
80003596:	f9 e2 c2 bf 	st.h [%a14]-318,%d2
8000359a:	82 13       	mov %d3,1
8000359c:	f9 e3 c4 bf 	st.h [%a14]-316,%d3
800035a0:	e9 e2 c6 bf 	st.b [%a14]-314,%d2
800035a4:	e9 e4 c7 bf 	st.b [%a14]-313,%d4
800035a8:	82 22       	mov %d2,2
800035aa:	59 e2 cc bf 	st.w [%a14]-308,%d2
800035ae:	e9 e2 d0 bf 	st.b [%a14]-304,%d2
800035b2:	e9 e2 e0 bf 	st.b [%a14]-288,%d2
800035b6:	54 c2       	ld.w %d2,[%a12]
800035b8:	59 e2 c8 cf 	st.w [%a14]-248,%d2
800035bc:	3b 00 08 20 	mov %d2,128
800035c0:	f9 e2 ce cf 	st.h [%a14]-242,%d2
800035c4:	3b 00 10 20 	mov %d2,256
800035c8:	f9 e2 d0 cf 	st.h [%a14]-240,%d2
800035cc:	3b 00 20 20 	mov %d2,512
800035d0:	f9 e2 d2 cf 	st.h [%a14]-238,%d2
800035d4:	3b 00 30 20 	mov %d2,768
800035d8:	f9 e2 d4 cf 	st.h [%a14]-236,%d2
800035dc:	3b 00 40 20 	mov %d2,1024
800035e0:	f9 e2 d6 cf 	st.h [%a14]-234,%d2
800035e4:	3b 00 44 20 	mov %d2,1088
800035e8:	f9 e2 d8 cf 	st.h [%a14]-232,%d2
800035ec:	e9 e3 fd ff 	st.b [%a14]-3,%d3
        .busLoopbackEnabled       = FALSE,
        .calculateBitTimingValues = TRUE
    };

    /* Default Configuration */
    *config = defaultConfig;
800035f0:	40 f2       	mov.aa %a2,%a15
800035f2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035f6:	89 24 48 01 	st.d [%a2+]8,%e4
800035fa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035fe:	89 24 48 01 	st.d [%a2+]8,%e4
80003602:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003606:	89 24 48 01 	st.d [%a2+]8,%e4
8000360a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000360e:	89 24 48 01 	st.d [%a2+]8,%e4
80003612:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003616:	89 24 48 01 	st.d [%a2+]8,%e4
8000361a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000361e:	89 24 48 01 	st.d [%a2+]8,%e4
80003622:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003626:	89 24 48 01 	st.d [%a2+]8,%e4
8000362a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000362e:	89 24 48 01 	st.d [%a2+]8,%e4
80003632:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003636:	89 24 48 01 	st.d [%a2+]8,%e4
8000363a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000363e:	89 24 48 01 	st.d [%a2+]8,%e4
80003642:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003646:	89 24 48 01 	st.d [%a2+]8,%e4
8000364a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000364e:	89 24 48 01 	st.d [%a2+]8,%e4
80003652:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003656:	89 24 48 01 	st.d [%a2+]8,%e4
8000365a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000365e:	89 24 48 01 	st.d [%a2+]8,%e4
80003662:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003666:	89 24 48 01 	st.d [%a2+]8,%e4
8000366a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000366e:	89 24 48 01 	st.d [%a2+]8,%e4
80003672:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003676:	89 24 48 01 	st.d [%a2+]8,%e4
8000367a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000367e:	89 24 48 01 	st.d [%a2+]8,%e4
80003682:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003686:	89 24 48 01 	st.d [%a2+]8,%e4
8000368a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000368e:	89 24 48 01 	st.d [%a2+]8,%e4
80003692:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003696:	89 24 48 01 	st.d [%a2+]8,%e4
8000369a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000369e:	89 24 48 01 	st.d [%a2+]8,%e4
800036a2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036a6:	89 24 48 01 	st.d [%a2+]8,%e4
800036aa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036ae:	89 24 48 01 	st.d [%a2+]8,%e4
800036b2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036b6:	89 24 48 01 	st.d [%a2+]8,%e4
800036ba:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036be:	89 24 48 01 	st.d [%a2+]8,%e4
800036c2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036c6:	89 24 48 01 	st.d [%a2+]8,%e4
800036ca:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036ce:	89 24 48 01 	st.d [%a2+]8,%e4
800036d2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036d6:	89 24 48 01 	st.d [%a2+]8,%e4
800036da:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036de:	89 24 48 01 	st.d [%a2+]8,%e4
800036e2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036e6:	89 24 48 01 	st.d [%a2+]8,%e4
800036ea:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036ee:	89 24 48 01 	st.d [%a2+]8,%e4
800036f2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036f6:	89 24 48 01 	st.d [%a2+]8,%e4
800036fa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036fe:	89 24 48 01 	st.d [%a2+]8,%e4
80003702:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003706:	89 24 48 01 	st.d [%a2+]8,%e4
8000370a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000370e:	89 24 48 01 	st.d [%a2+]8,%e4
80003712:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003716:	89 24 48 01 	st.d [%a2+]8,%e4
8000371a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000371e:	89 24 48 01 	st.d [%a2+]8,%e4
80003722:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003726:	89 24 48 01 	st.d [%a2+]8,%e4
8000372a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000372e:	89 24 48 01 	st.d [%a2+]8,%e4
80003732:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003736:	89 24 48 01 	st.d [%a2+]8,%e4
8000373a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000373e:	89 24 48 01 	st.d [%a2+]8,%e4
80003742:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003746:	89 24 48 01 	st.d [%a2+]8,%e4
8000374a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000374e:	89 24 48 01 	st.d [%a2+]8,%e4
80003752:	44 d4       	ld.w %d4,[%a13+]
80003754:	64 24       	st.w [%a2+],%d4

    /* take over module pointer */
    config->can = can->can;
80003756:	54 c2       	ld.w %d2,[%a12]
80003758:	68 02       	st.w [%a15]0,%d2
}
8000375a:	00 90       	ret 

8000375c <IfxCan_Can_readMessage>:


void IfxCan_Can_readMessage(IfxCan_Can_Node *node, IfxCan_Message *message, uint32 *data)
{
8000375c:	40 ae       	mov.aa %a14,%sp
8000375e:	40 4d       	mov.aa %a13,%a4
80003760:	40 5c       	mov.aa %a12,%a5
80003762:	80 69       	mov.d %d9,%a6
    IfxCan_RxBufferId bufferId = IfxCan_RxBufferId_0;

    Ifx_CAN_RXMSG    *rxBufferElement;

    if ((message->readFromRxFifo0) || (message->readFromRxFifo1))
80003764:	19 52 1c 00 	ld.w %d2,[%a5]28
80003768:	b7 02 10 20 	insert %d2,%d2,0,0,16
8000376c:	df 02 5a 00 	jeq %d2,0,80003820 <IfxCan_Can_readMessage+0xc4>
    {
        if (message->readFromRxFifo0)
80003770:	39 52 1e 00 	ld.bu %d2,[%a5]30
80003774:	df 02 46 00 	jeq %d2,0,80003800 <IfxCan_Can_readMessage+0xa4>
        {
            /* get the Tx FIFO 0 ELement address */
            bufferId        = IfxCan_Node_getRxFifo0GetIndex(node->node);
80003778:	99 44 04 00 	ld.a %a4,[%a4]4
    return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
8000377c:	19 48 24 60 	ld.w %d8,[%a4]420
80003780:	37 08 66 84 	extr.u %d8,%d8,8,6
            rxBufferElement = IfxCan_Node_getRxFifo0ElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxFifo0StartAddress, bufferId);
80003784:	02 86       	mov %d6,%d8
80003786:	b9 d5 14 00 	ld.hu %d5,[%a13]20
8000378a:	19 d4 0c 00 	ld.w %d4,[%a13]12
8000378e:	6d ff df f3 	call 80001f4c <IfxCan_Node_getRxFifo0ElementAddress>
80003792:	40 2f       	mov.aa %a15,%a2
    IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
80003794:	48 03       	ld.w %d3,[%a15]0
    return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
80003796:	48 02       	ld.w %d2,[%a15]0
80003798:	37 02 7d 20 	extr.u %d2,%d2,0,29
8000379c:	ef e3 4f 00 	jz.t %d3,30,8000383a <IfxCan_Can_readMessage+0xde>
800037a0:	82 04       	mov %d4,0
800037a2:	8b 04 00 31 	rsub %d3,%d4,0
800037a6:	0f 32 20 30 	shas %d3,%d2,%d3
        bufferId        = (IfxCan_RxBufferId)message->bufferNumber;
        rxBufferElement = IfxCan_Node_getRxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxBuffersStartAddress, bufferId);
    }

    /*get message ID */
    message->messageId = IfxCan_Node_getMesssageId(rxBufferElement);
800037aa:	59 c3 04 00 	st.w [%a12]4,%d3

    /* get message ID length */
    message->messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
800037ae:	48 02       	ld.w %d2,[%a15]0
800037b0:	37 02 61 2f 	extr.u %d2,%d2,30,1
800037b4:	59 c2 0c 00 	st.w [%a12]12,%d2
    return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
800037b8:	48 12       	ld.w %d2,[%a15]4
800037ba:	37 02 64 28 	extr.u %d2,%d2,16,4

    /* get data length code*/
    message->dataLengthCode = (IfxCan_DataLengthCode)IfxCan_Node_getDataLengthCode(rxBufferElement);
800037be:	59 c2 14 00 	st.w [%a12]20,%d2

    /* get CAN frame mode of operation */
    message->frameMode = IfxCan_Node_getFrameMode(rxBufferElement);
800037c2:	40 f4       	mov.aa %a4,%a15
800037c4:	6d ff 7c f3 	call 80001ebc <IfxCan_Node_getFrameMode>
800037c8:	59 c2 18 00 	st.w [%a12]24,%d2

    /*get message bufferNumber*/
    message->bufferNumber = bufferId;
800037cc:	34 c8       	st.b [%a12],%d8

    /* read data */
    IfxCan_Node_readData(rxBufferElement, message->dataLengthCode, data);
800037ce:	60 95       	mov.a %a5,%d9
800037d0:	19 c4 14 00 	ld.w %d4,[%a12]20
800037d4:	40 f4       	mov.aa %a4,%a15
800037d6:	6d ff 5d f4 	call 80002090 <IfxCan_Node_readData>

    /* write acknowledgement index incase of FIFO */
    if (message->readFromRxFifo0)
800037da:	39 c2 1e 00 	ld.bu %d2,[%a12]30
800037de:	df 02 32 00 	jeq %d2,0,80003842 <IfxCan_Can_readMessage+0xe6>
    {
        IfxCan_Node_setRxFifo0AcknowledgeIndex(node->node, bufferId);
800037e2:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->RX.F0A.B.F0AI = RxBufferNumber;
800037e6:	d9 23 28 60 	lea %a3,[%a2]424
800037ea:	19 22 28 60 	ld.w %d2,[%a2]424
800037ee:	37 82 06 20 	insert %d2,%d2,%d8,0,6
800037f2:	74 32       	st.w [%a3],%d2
    {
        IfxCan_Node_setRxFifo1AcknowledgeIndex(node->node, bufferId);
    }

    /* clear newdata flag after reading */
    IfxCan_Node_clearRxBufferNewDataFlag(node->node, bufferId);
800037f4:	02 84       	mov %d4,%d8
800037f6:	99 d4 04 00 	ld.a %a4,[%a13]4
800037fa:	6d ff 3c f3 	call 80001e72 <IfxCan_Node_clearRxBufferNewDataFlag>

}
800037fe:	00 90       	ret 
            bufferId        = IfxCan_Node_getRxFifo1GetIndex(node->node);
80003800:	99 44 04 00 	ld.a %a4,[%a4]4
    return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
80003804:	19 48 34 60 	ld.w %d8,[%a4]436
80003808:	37 08 66 84 	extr.u %d8,%d8,8,6
            rxBufferElement = IfxCan_Node_getRxFifo1ElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxFifo1StartAddress, bufferId);
8000380c:	02 86       	mov %d6,%d8
8000380e:	b9 d5 16 00 	ld.hu %d5,[%a13]22
80003812:	19 d4 0c 00 	ld.w %d4,[%a13]12
80003816:	6d ff c4 f3 	call 80001f9e <IfxCan_Node_getRxFifo1ElementAddress>
8000381a:	40 2f       	mov.aa %a15,%a2
8000381c:	1d ff bc ff 	j 80003794 <IfxCan_Can_readMessage+0x38>
        bufferId        = (IfxCan_RxBufferId)message->bufferNumber;
80003820:	14 58       	ld.bu %d8,[%a5]
        rxBufferElement = IfxCan_Node_getRxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxBuffersStartAddress, bufferId);
80003822:	02 86       	mov %d6,%d8
80003824:	b9 45 18 00 	ld.hu %d5,[%a4]24
80003828:	19 44 0c 00 	ld.w %d4,[%a4]12
8000382c:	99 44 04 00 	ld.a %a4,[%a4]4
80003830:	6d ff 67 f3 	call 80001efe <IfxCan_Node_getRxBufferElementAddress>
80003834:	40 2f       	mov.aa %a15,%a2
80003836:	1d ff af ff 	j 80003794 <IfxCan_Can_readMessage+0x38>
    return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
8000383a:	3b 20 01 40 	mov %d4,18
8000383e:	1d ff b2 ff 	j 800037a2 <IfxCan_Can_readMessage+0x46>
    else if (message->readFromRxFifo1)
80003842:	39 c2 1f 00 	ld.bu %d2,[%a12]31
80003846:	df 02 d7 7f 	jeq %d2,0,800037f4 <IfxCan_Can_readMessage+0x98>
        IfxCan_Node_setRxFifo1AcknowledgeIndex(node->node, bufferId);
8000384a:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->RX.F1A.B.F1AI = RxBufferNumber;
8000384e:	d9 23 38 60 	lea %a3,[%a2]440
80003852:	19 22 38 60 	ld.w %d2,[%a2]440
80003856:	37 82 06 20 	insert %d2,%d2,%d8,0,6
8000385a:	74 32       	st.w [%a3],%d2
}
8000385c:	1d ff cc ff 	j 800037f4 <IfxCan_Can_readMessage+0x98>

80003860 <IfxCan_Can_sendMessage>:


IfxCan_Status IfxCan_Can_sendMessage(IfxCan_Can_Node *node, IfxCan_Message *message, uint32 *data)
{
80003860:	40 ae       	mov.aa %a14,%sp
80003862:	40 4f       	mov.aa %a15,%a4
80003864:	40 5d       	mov.aa %a13,%a5
80003866:	80 6b       	mov.d %d11,%a6
    IfxCan_Status     status   = IfxCan_Status_ok;

    IfxCan_TxBufferId bufferId = IfxCan_TxBufferId_0;

    if (!message->storeInTxFifoQueue)
80003868:	39 52 1d 00 	ld.bu %d2,[%a5]29
8000386c:	df 02 54 80 	jne %d2,0,80003914 <IfxCan_Can_sendMessage+0xb4>
    {
        bufferId = (IfxCan_TxBufferId)message->bufferNumber;
80003870:	14 59       	ld.bu %d9,[%a5]
}


IFX_INLINE boolean IfxCan_Can_isTxBufferRequestPending(IfxCan_Can_Node *node, IfxCan_TxBufferId txBufferId)
{
    return IfxCan_Node_isTxBufferRequestPending(node->node, txBufferId);
80003872:	c8 14       	ld.a %a4,[%a15]4
    uint32  mask    = (1U << txBufferId);
80003874:	82 1a       	mov %d10,1
80003876:	0f 9a 00 a0 	sh %d10,%d10,%d9
    boolean tempVar = (boolean)((node->TX.BRP.U & mask) != 0 ? 1 : 0);
8000387a:	19 48 0c 70 	ld.w %d8,[%a4]460
8000387e:	26 a8       	and %d8,%d10
80003880:	df 08 6f 80 	jne %d8,0,8000395e <IfxCan_Can_sendMessage+0xfe>
        status = IfxCan_Status_notSentBusy;
    }
    else
    {
        /* get the Tx Bufer ELement address */
        Ifx_CAN_TXMSG *txBufferElement = IfxCan_Node_getTxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.txBuffersStartAddress, bufferId);
80003884:	02 96       	mov %d6,%d9
80003886:	b9 f5 1c 00 	ld.hu %d5,[%a15]28
8000388a:	48 34       	ld.w %d4,[%a15]12
8000388c:	6d ff b8 f3 	call 80001ffc <IfxCan_Node_getTxBufferElementAddress>
80003890:	40 2c       	mov.aa %a12,%a2

        /*set message Id (ID and XTD) */
        IfxCan_Node_setMsgId(txBufferElement, message->messageId, message->messageIdLength);
80003892:	19 d4 04 00 	ld.w %d4,[%a13]4
80003896:	19 d3 0c 00 	ld.w %d3,[%a13]12
    txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
8000389a:	8b 13 00 52 	eq %d5,%d3,1
8000389e:	54 22       	ld.w %d2,[%a2]
800038a0:	67 52 1e 20 	ins.t %d2,%d2,30,%d5,0
800038a4:	74 22       	st.w [%a2],%d2
    txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
800038a6:	df 03 3f 00 	jeq %d3,0,80003924 <IfxCan_Can_sendMessage+0xc4>
800038aa:	82 02       	mov %d2,0
800038ac:	0f 24 00 40 	sh %d4,%d4,%d2
800038b0:	54 c2       	ld.w %d2,[%a12]
800038b2:	37 42 1d 20 	insert %d2,%d2,%d4,0,29
800038b6:	74 c2       	st.w [%a12],%d2

        /* set TX FIFO Event control (EFC) and Message Marker (MM) if Tx Event Fifo is chosen */
        if (message->txEventFifoControl == TRUE)
800038b8:	39 d3 1c 00 	ld.bu %d3,[%a13]28
800038bc:	df 13 38 00 	jeq %d3,1,8000392c <IfxCan_Can_sendMessage+0xcc>
            IfxCan_Node_setTxEventFifoCtrl(txBufferElement, message->txEventFifoControl);
            IfxCan_Node_setMessageMarker(txBufferElement, bufferId);
        }

        /* set Remote Transmit request if selected (RTR)*/
        IfxCan_Node_setRemoteTransmitReq(txBufferElement, message->remoteTransmitRequest);
800038c0:	39 d3 08 00 	ld.bu %d3,[%a13]8
    txBufferElement->T0.B.RTR = enable ? 1 : 0;
800038c4:	8b 03 20 32 	ne %d3,%d3,0
800038c8:	54 c2       	ld.w %d2,[%a12]
800038ca:	67 32 1d 20 	ins.t %d2,%d2,29,%d3,0
800038ce:	74 c2       	st.w [%a12],%d2

        /* set Error State Indicator if selected (ESI)*/
        if ((message->frameMode == IfxCan_FrameMode_fdLong) || (message->frameMode == IfxCan_FrameMode_fdLongAndFast))
800038d0:	19 d2 18 00 	ld.w %d2,[%a13]24
800038d4:	c2 f2       	add %d2,-1
800038d6:	bf 22 3a 80 	jlt.u %d2,2,8000394a <IfxCan_Can_sendMessage+0xea>
        {
            IfxCan_Node_setErrStateIndicator(txBufferElement, message->errorStateIndicator);
        }

        /* set data length code (DLC) */
        IfxCan_Node_setDataLength(txBufferElement, message->dataLengthCode);
800038da:	19 d3 14 00 	ld.w %d3,[%a13]20
    txBufferElement->T1.B.DLC = dataLengthCode;
800038de:	d9 c2 04 00 	lea %a2,[%a12]4
800038e2:	19 c2 04 00 	ld.w %d2,[%a12]4
800038e6:	37 32 04 28 	insert %d2,%d2,%d3,16,4
800038ea:	74 22       	st.w [%a2],%d2

        /* write data (DBx) */
        IfxCan_Node_writeTxBufData(txBufferElement, message->dataLengthCode, data);
800038ec:	60 b5       	mov.a %a5,%d11
800038ee:	19 d4 14 00 	ld.w %d4,[%a13]20
800038f2:	40 c4       	mov.aa %a4,%a12
800038f4:	6d ff 16 f6 	call 80002520 <IfxCan_Node_writeTxBufData>

        /* set CAN frame mode request (FDF and BRS) */
        IfxCan_Node_setFrameModeReq(txBufferElement, message->frameMode);
800038f8:	19 d4 18 00 	ld.w %d4,[%a13]24
800038fc:	40 c4       	mov.aa %a4,%a12
800038fe:	6d ff ca f5 	call 80002492 <IfxCan_Node_setFrameModeReq>

        /*set transmit request */
        IfxCan_Node_setTxBufferAddRequest(node->node, bufferId);
80003902:	c8 12       	ld.a %a2,[%a15]4
    node->TX.BAR.U = node->TX.BAR.U | (mask);
80003904:	d9 23 10 70 	lea %a3,[%a2]464
80003908:	19 22 10 70 	ld.w %d2,[%a2]464
8000390c:	a6 a2       	or %d2,%d10
8000390e:	74 32       	st.w [%a3],%d2
    }

    return status;
}
80003910:	02 82       	mov %d2,%d8
80003912:	00 90       	ret 
        bufferId = IfxCan_Node_getTxFifoQueuePutIndex(node->node);
80003914:	99 42 04 00 	ld.a %a2,[%a4]4
    return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
80003918:	19 29 04 70 	ld.w %d9,[%a2]452
8000391c:	37 09 65 98 	extr.u %d9,%d9,16,5
80003920:	1d ff a9 ff 	j 80003872 <IfxCan_Can_sendMessage+0x12>
    txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
80003924:	3b 20 01 20 	mov %d2,18
80003928:	1d ff c2 ff 	j 800038ac <IfxCan_Can_sendMessage+0x4c>
    txBufferElement->T1.B.EFC = enable ? 1 : 0;
8000392c:	8b 03 20 32 	ne %d3,%d3,0
80003930:	d9 c2 04 00 	lea %a2,[%a12]4
80003934:	19 c2 04 00 	ld.w %d2,[%a12]4
80003938:	67 32 17 20 	ins.t %d2,%d2,23,%d3,0
8000393c:	74 22       	st.w [%a2],%d2
    txBufferElement->T1.B.MM = bufferId;
8000393e:	54 22       	ld.w %d2,[%a2]
80003940:	37 92 08 2c 	insert %d2,%d2,%d9,24,8
80003944:	74 22       	st.w [%a2],%d2
}
80003946:	1d ff bd ff 	j 800038c0 <IfxCan_Can_sendMessage+0x60>
            IfxCan_Node_setErrStateIndicator(txBufferElement, message->errorStateIndicator);
8000394a:	39 d3 10 00 	ld.bu %d3,[%a13]16
    txBufferElement->T0.B.ESI = enable ? 1 : 0;
8000394e:	8b 03 20 32 	ne %d3,%d3,0
80003952:	54 c2       	ld.w %d2,[%a12]
80003954:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
80003958:	74 c2       	st.w [%a12],%d2
}
8000395a:	1d ff c0 ff 	j 800038da <IfxCan_Can_sendMessage+0x7a>
        status = IfxCan_Status_notSentBusy;
8000395e:	3b 00 02 80 	mov %d8,32
    return status;
80003962:	1d ff d7 ff 	j 80003910 <IfxCan_Can_sendMessage+0xb0>

80003966 <IfxCan_Can_setStandardFilter>:
    IfxCan_Node_disableConfigurationChange(node->node);
}


void IfxCan_Can_setStandardFilter(IfxCan_Can_Node *node, IfxCan_Filter *filter)
{
80003966:	40 ae       	mov.aa %a14,%sp
80003968:	40 4d       	mov.aa %a13,%a4
8000396a:	40 5c       	mov.aa %a12,%a5
    /* get the standard filter element address */
    Ifx_CAN_STDMSG *standardFilterElement = IfxCan_Node_getStandardFilterElementAddress(node->messageRAM.baseAddress, node->messageRAM.standardFilterListStartAddress, filter->number);
8000396c:	14 56       	ld.bu %d6,[%a5]
8000396e:	b9 45 10 00 	ld.hu %d5,[%a4]16
80003972:	19 44 0c 00 	ld.w %d4,[%a4]12
80003976:	6d ff 2c f3 	call 80001fce <IfxCan_Node_getStandardFilterElementAddress>

    /* enable configuration change CCCR.CCE = 1, CCCR.INIT = 1 */
    IfxCan_Node_enableConfigurationChange(node->node);
8000397a:	99 d3 04 00 	ld.a %a3,[%a13]4
    if (node->CCCR.B.INIT == 1)
8000397e:	d9 34 18 40 	lea %a4,[%a3]280
80003982:	19 32 18 40 	ld.w %d2,[%a3]280
80003986:	6f 02 49 80 	jnz.t %d2,0,80003a18 <IfxCan_Can_setStandardFilter+0xb2>
    node->CCCR.B.INIT = 1;
8000398a:	d9 34 18 40 	lea %a4,[%a3]280
8000398e:	19 32 18 40 	ld.w %d2,[%a3]280
80003992:	b7 12 01 20 	insert %d2,%d2,1,0,1
80003996:	74 42       	st.w [%a4],%d2
    while (node->CCCR.B.INIT != 1)
80003998:	d9 34 18 40 	lea %a4,[%a3]280
8000399c:	19 32 18 40 	ld.w %d2,[%a3]280
800039a0:	6f 02 fc 7f 	jz.t %d2,0,80003998 <IfxCan_Can_setStandardFilter+0x32>
        cccr.U       = node->CCCR.U;
800039a4:	54 42       	ld.w %d2,[%a4]
        cccr.B.INIT  = 1;
800039a6:	b7 12 01 20 	insert %d2,%d2,1,0,1
        cccr.B.CCE   = 1;
800039aa:	b7 12 81 20 	insert %d2,%d2,1,1,1
        node->CCCR.U = cccr.U;
800039ae:	74 42       	st.w [%a4],%d2

    if (filter->elementConfiguration != IfxCan_FilterElementConfiguration_storeInRxBuffer)
800039b0:	19 c2 04 00 	ld.w %d2,[%a12]4
800039b4:	df 72 46 00 	jeq %d2,7,80003a40 <IfxCan_Can_setStandardFilter+0xda>
    {
        IfxCan_Node_setStandardFilterId2(standardFilterElement, filter->id2);
800039b8:	19 c3 10 00 	ld.w %d3,[%a12]16
    standardFilterElement->S0.B.SFID2 = id;
800039bc:	54 22       	ld.w %d2,[%a2]
800039be:	37 32 0b 20 	insert %d2,%d2,%d3,0,11
800039c2:	74 22       	st.w [%a2],%d2
    else
    {
        IfxCan_Node_setStandardFilterRxBufferOffset(standardFilterElement, filter->rxBufferOffset);
    }

    IfxCan_Node_setStandardFilterId1(standardFilterElement, filter->id1);
800039c4:	19 c3 0c 00 	ld.w %d3,[%a12]12
    standardFilterElement->S0.B.SFID1 = id;
800039c8:	54 22       	ld.w %d2,[%a2]
800039ca:	37 32 0b 28 	insert %d2,%d2,%d3,16,11
800039ce:	74 22       	st.w [%a2],%d2
    //IfxCan_Node_setStandardFilterId2(standardFilterElement, filter->id2);
    IfxCan_Node_setStandardFilterConfiguration(standardFilterElement, filter->elementConfiguration);
800039d0:	19 c3 04 00 	ld.w %d3,[%a12]4
    standardFilterElement->S0.B.SFEC = filterElementConfiguration;
800039d4:	54 22       	ld.w %d2,[%a2]
800039d6:	37 32 83 2d 	insert %d2,%d2,%d3,27,3
800039da:	74 22       	st.w [%a2],%d2
    IfxCan_Node_setStandardFilterType(standardFilterElement, filter->type);
800039dc:	19 c3 08 00 	ld.w %d3,[%a12]8
    standardFilterElement->S0.B.SFT = filterType;
800039e0:	54 22       	ld.w %d2,[%a2]
800039e2:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
800039e6:	74 22       	st.w [%a2],%d2

    /* disable configuration change CCCR.CCE = 0, CCCR.INIT = 0 */
    IfxCan_Node_disableConfigurationChange(node->node);
800039e8:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->CCCR.B.CCE = 0;
800039ec:	d9 23 18 40 	lea %a3,[%a2]280
800039f0:	19 22 18 40 	ld.w %d2,[%a2]280
800039f4:	8f 22 c0 21 	andn %d2,%d2,2
800039f8:	74 32       	st.w [%a3],%d2
    while (node->CCCR.B.CCE != 0)
800039fa:	d9 23 18 40 	lea %a3,[%a2]280
800039fe:	19 22 18 40 	ld.w %d2,[%a2]280
80003a02:	6f 12 fc ff 	jnz.t %d2,1,800039fa <IfxCan_Can_setStandardFilter+0x94>
    node->CCCR.B.INIT = 0;
80003a06:	54 32       	ld.w %d2,[%a3]
80003a08:	8f 12 c0 21 	andn %d2,%d2,1
80003a0c:	74 32       	st.w [%a3],%d2
    while (node->CCCR.B.INIT != 0)
80003a0e:	19 22 18 40 	ld.w %d2,[%a2]280
80003a12:	6f 02 fe ff 	jnz.t %d2,0,80003a0e <IfxCan_Can_setStandardFilter+0xa8>
}
80003a16:	00 90       	ret 
        node->CCCR.B.CCE = 0;
80003a18:	54 42       	ld.w %d2,[%a4]
80003a1a:	8f 22 c0 21 	andn %d2,%d2,2
80003a1e:	74 42       	st.w [%a4],%d2
        while (node->CCCR.B.CCE != 0)
80003a20:	d9 34 18 40 	lea %a4,[%a3]280
80003a24:	19 32 18 40 	ld.w %d2,[%a3]280
80003a28:	6f 12 fc ff 	jnz.t %d2,1,80003a20 <IfxCan_Can_setStandardFilter+0xba>
        node->CCCR.B.INIT = 0;
80003a2c:	54 42       	ld.w %d2,[%a4]
80003a2e:	8f 12 c0 21 	andn %d2,%d2,1
80003a32:	74 42       	st.w [%a4],%d2
        while (node->CCCR.B.INIT != 0)
80003a34:	19 32 18 40 	ld.w %d2,[%a3]280
80003a38:	6f 02 fe ff 	jnz.t %d2,0,80003a34 <IfxCan_Can_setStandardFilter+0xce>
80003a3c:	1d ff a7 ff 	j 8000398a <IfxCan_Can_setStandardFilter+0x24>
    standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
80003a40:	39 c3 14 00 	ld.bu %d3,[%a12]20
80003a44:	54 22       	ld.w %d2,[%a2]
80003a46:	37 32 0b 20 	insert %d2,%d2,%d3,0,11
80003a4a:	74 22       	st.w [%a2],%d2
}
80003a4c:	1d ff bc ff 	j 800039c4 <IfxCan_Can_setStandardFilter+0x5e>

80003a50 <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003a50:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80003a52:	54 42       	ld.w %d2,[%a4]
80003a54:	6f 12 0b 00 	jz.t %d2,1,80003a6a <Ifx_Ssw_clearCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a58:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a5c:	54 42       	ld.w %d2,[%a4]
80003a5e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a62:	a6 32       	or %d2,%d3
80003a64:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a68:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a6a:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a6c:	54 42       	ld.w %d2,[%a4]
80003a6e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a72:	a6 42       	or %d2,%d4
80003a74:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a78:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003a7a:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
}
80003a7c:	00 90       	ret 

80003a7e <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003a7e:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80003a80:	54 42       	ld.w %d2,[%a4]
80003a82:	6f 12 0b 00 	jz.t %d2,1,80003a98 <Ifx_Ssw_setCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a86:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a8a:	54 42       	ld.w %d2,[%a4]
80003a8c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a90:	a6 32       	or %d2,%d3
80003a92:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a96:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a98:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a9a:	54 42       	ld.w %d2,[%a4]
80003a9c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003aa0:	a6 42       	or %d2,%d4
80003aa2:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003aa6:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003aa8:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80003aaa:	00 90       	ret 

80003aac <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
80003aac:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003aae:	91 30 00 2f 	movh.a %a2,61443
80003ab2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003ab6:	54 22       	ld.w %d2,[%a2]
80003ab8:	6f 12 0b 00 	jz.t %d2,1,80003ace <Ifx_Ssw_clearSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003abc:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003ac0:	54 22       	ld.w %d2,[%a2]
80003ac2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003ac6:	a6 32       	or %d2,%d3
80003ac8:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003acc:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003ace:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003ad0:	91 30 00 2f 	movh.a %a2,61443
80003ad4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003ad8:	54 22       	ld.w %d2,[%a2]
80003ada:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003ade:	a6 42       	or %d2,%d4
80003ae0:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003ae4:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003ae6:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_clearSafetyEndinitInline(password);
}
80003ae8:	00 90       	ret 

80003aea <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
80003aea:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003aec:	91 30 00 2f 	movh.a %a2,61443
80003af0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003af4:	54 22       	ld.w %d2,[%a2]
80003af6:	6f 12 0b 00 	jz.t %d2,1,80003b0c <Ifx_Ssw_setSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003afa:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003afe:	54 22       	ld.w %d2,[%a2]
80003b00:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b04:	a6 32       	or %d2,%d3
80003b06:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003b0a:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b0c:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003b0e:	91 30 00 2f 	movh.a %a2,61443
80003b12:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003b16:	54 22       	ld.w %d2,[%a2]
80003b18:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b1c:	a6 42       	or %d2,%d4
80003b1e:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003b22:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003b24:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80003b26:	00 90       	ret 

80003b28 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003b28:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80003b2a:	54 42       	ld.w %d2,[%a4]
80003b2c:	6f 12 0b 00 	jz.t %d2,1,80003b42 <Ifx_Ssw_serviceCpuWatchdog+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003b30:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003b34:	54 42       	ld.w %d2,[%a4]
80003b36:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003b3a:	a6 32       	or %d2,%d3
80003b3c:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003b40:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003b42:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003b44:	54 42       	ld.w %d2,[%a4]
80003b46:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003b4a:	a6 42       	or %d2,%d4
80003b4c:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003b50:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003b52:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80003b54:	00 90       	ret 

80003b56 <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
80003b56:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003b58:	91 30 00 2f 	movh.a %a2,61443
80003b5c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003b60:	54 22       	ld.w %d2,[%a2]
80003b62:	6f 12 0b 00 	jz.t %d2,1,80003b78 <Ifx_Ssw_serviceSafetyWatchdog+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b66:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003b6a:	54 22       	ld.w %d2,[%a2]
80003b6c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b70:	a6 32       	or %d2,%d3
80003b72:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003b76:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b78:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003b7a:	91 30 00 2f 	movh.a %a2,61443
80003b7e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003b82:	54 22       	ld.w %d2,[%a2]
80003b84:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b88:	a6 42       	or %d2,%d4
80003b8a:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003b8e:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003b90:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80003b92:	00 90       	ret 

80003b94 <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003b94:	40 ae       	mov.aa %a14,%sp
80003b96:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003b9a:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003b9e:	8f 72 00 21 	and %d2,%d2,7
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
80003ba2:	82 53       	mov %d3,5
80003ba4:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003ba8:	7b 30 00 3f 	movh %d3,61443
80003bac:	1b c3 24 36 	addi %d3,%d3,25164
80003bb0:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003bb4:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003bb6:	02 84       	mov %d4,%d8
80003bb8:	60 24       	mov.a %a4,%d2
80003bba:	6d ff 4b ff 	call 80003a50 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
80003bbe:	d9 c2 04 00 	lea %a2,[%a12]4
80003bc2:	19 c2 04 00 	ld.w %d2,[%a12]4
80003bc6:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003bca:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003bcc:	02 84       	mov %d4,%d8
80003bce:	40 c4       	mov.aa %a4,%a12
80003bd0:	6d ff 57 ff 	call 80003a7e <Ifx_Ssw_setCpuEndinit>
}
80003bd4:	00 90       	ret 

80003bd6 <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003bd6:	40 ae       	mov.aa %a14,%sp
80003bd8:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003bdc:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003be0:	8f 72 00 21 	and %d2,%d2,7
80003be4:	82 53       	mov %d3,5
80003be6:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003bea:	7b 30 00 3f 	movh %d3,61443
80003bee:	1b c3 24 36 	addi %d3,%d3,25164
80003bf2:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003bf6:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003bf8:	02 84       	mov %d4,%d8
80003bfa:	60 24       	mov.a %a4,%d2
80003bfc:	6d ff 2a ff 	call 80003a50 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
80003c00:	d9 c2 04 00 	lea %a2,[%a12]4
80003c04:	19 c2 04 00 	ld.w %d2,[%a12]4
80003c08:	8f 82 c0 21 	andn %d2,%d2,8
80003c0c:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003c0e:	02 84       	mov %d4,%d8
80003c10:	40 c4       	mov.aa %a4,%a12
80003c12:	6d ff 36 ff 	call 80003a7e <Ifx_Ssw_setCpuEndinit>
}
80003c16:	00 90       	ret 

80003c18 <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
80003c18:	40 ae       	mov.aa %a14,%sp
80003c1a:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80003c1e:	02 84       	mov %d4,%d8
80003c20:	6d ff 46 ff 	call 80003aac <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
80003c24:	91 30 00 2f 	movh.a %a2,61443
80003c28:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80003c2c:	54 22       	ld.w %d2,[%a2]
80003c2e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003c32:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003c34:	02 84       	mov %d4,%d8
80003c36:	6d ff 5a ff 	call 80003aea <Ifx_Ssw_setSafetyEndinit>
}
80003c3a:	00 90       	ret 

80003c3c <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
80003c3c:	40 ae       	mov.aa %a14,%sp
80003c3e:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80003c42:	02 84       	mov %d4,%d8
80003c44:	6d ff 34 ff 	call 80003aac <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
80003c48:	91 30 00 2f 	movh.a %a2,61443
80003c4c:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80003c50:	54 22       	ld.w %d2,[%a2]
80003c52:	8f 82 c0 21 	andn %d2,%d2,8
80003c56:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003c58:	02 84       	mov %d4,%d8
80003c5a:	6d ff 48 ff 	call 80003aea <Ifx_Ssw_setSafetyEndinit>
}
80003c5e:	00 90       	ret 

80003c60 <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
80003c60:	40 ae       	mov.aa %a14,%sp
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
80003c62:	7b 20 00 20 	movh %d2,2
80003c66:	1b 82 e0 2f 	addi %d2,%d2,-504
80003c6a:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80003c6e:	54 22       	ld.w %d2,[%a2]
80003c70:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80003c74:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
80003c76:	7b 20 00 20 	movh %d2,2
80003c7a:	1b 42 e1 2f 	addi %d2,%d2,-492
80003c7e:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80003c82:	54 22       	ld.w %d2,[%a2]

    if (syscon.B.BHALT)
80003c84:	ef 82 0b 00 	jz.t %d2,24,80003c9a <Ifx_Ssw_startCore+0x3a>
    {
        syscon.B.BHALT = 0U;
80003c88:	b7 02 01 2c 	insert %d2,%d2,0,24,1
        cpu->SYSCON    = syscon;
80003c8c:	7b 20 00 40 	movh %d4,2
80003c90:	1b 44 e1 4f 	addi %d4,%d4,-492
80003c94:	01 44 00 26 	addsc.a %a2,%a4,%d4,0
80003c98:	74 22       	st.w [%a2],%d2
    }

}
80003c9a:	00 90       	ret 

80003c9c <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
80003c9c:	40 ae       	mov.aa %a14,%sp
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
80003c9e:	91 30 00 2f 	movh.a %a2,61443
80003ca2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80003ca6:	54 22       	ld.w %d2,[%a2]
80003ca8:	8f 22 1e 20 	sh %d2,%d2,-30

    if (insel == 2U)
80003cac:	df 22 40 00 	jeq %d2,2,80003d2c <Ifx_Ssw_getStmFrequency+0x90>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
    }
    else if (insel == 1U)
80003cb0:	df 12 38 00 	jeq %d2,1,80003d20 <Ifx_Ssw_getStmFrequency+0x84>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003cb4:	7b f0 cb 34 	movh %d3,19647
80003cb8:	1b 03 c2 3b 	addi %d3,%d3,-17376
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
80003cbc:	91 30 00 2f 	movh.a %a2,61443
80003cc0:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80003cc4:	54 22       	ld.w %d2,[%a2]
80003cc6:	37 02 62 2e 	extr.u %d2,%d2,28,2
80003cca:	df 02 37 00 	jeq %d2,0,80003d38 <Ifx_Ssw_getStmFrequency+0x9c>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003cce:	91 30 00 2f 	movh.a %a2,61443
80003cd2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80003cd6:	54 22       	ld.w %d2,[%a2]
80003cd8:	37 02 e7 24 	extr.u %d2,%d2,9,7
80003cdc:	c2 12       	add %d2,1
80003cde:	4b 02 61 21 	utof %d2,%d2
80003ce2:	4b 32 41 30 	mul.f %d3,%d2,%d3
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
80003ce6:	54 24       	ld.w %d4,[%a2]
80003ce8:	37 04 63 4c 	extr.u %d4,%d4,24,3
80003cec:	91 30 00 2f 	movh.a %a2,61443
80003cf0:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80003cf4:	54 22       	ld.w %d2,[%a2]
80003cf6:	8f 72 00 21 	and %d2,%d2,7
80003cfa:	c2 12       	add %d2,1
80003cfc:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003d00:	4b 02 61 21 	utof %d2,%d2
80003d04:	4b 23 51 40 	div.f %d4,%d3,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
80003d08:	91 30 00 2f 	movh.a %a2,61443
80003d0c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80003d10:	54 22       	ld.w %d2,[%a2]
80003d12:	8f f2 00 21 	and %d2,%d2,15
80003d16:	4b 02 41 21 	itof %d2,%d2
}
80003d1a:	4b 24 51 20 	div.f %d2,%d4,%d2
80003d1e:	00 90       	ret 
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
80003d20:	7b 90 b9 34 	movh %d3,19353
80003d24:	1b 03 68 39 	addi %d3,%d3,-27008
80003d28:	1d ff ca ff 	j 80003cbc <Ifx_Ssw_getStmFrequency+0x20>
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
80003d2c:	7b 90 b9 34 	movh %d3,19353
80003d30:	1b 03 68 39 	addi %d3,%d3,-27008
80003d34:	1d ff c4 ff 	j 80003cbc <Ifx_Ssw_getStmFrequency+0x20>
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003d38:	7b f0 cb 44 	movh %d4,19647
80003d3c:	1b 04 c2 4b 	addi %d4,%d4,-17376
80003d40:	1d ff e4 ff 	j 80003d08 <Ifx_Ssw_getStmFrequency+0x6c>

80003d44 <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
80003d44:	40 ae       	mov.aa %a14,%sp
80003d46:	20 08       	sub.a %sp,8
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
80003d48:	91 00 00 28 	movh.a %a2,32768
80003d4c:	d9 22 68 70 	lea %a2,[%a2]1512 <800005e8 <__clear_table>>

    while (pTable)
80003d50:	1d 00 32 00 	j 80003db4 <Ifx_Ssw_doCppInit+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80003d54:	91 00 00 28 	movh.a %a2,32768
80003d58:	d9 22 48 a0 	lea %a2,[%a2]1672 <80000688 <__copy_table>>
80003d5c:	1d 00 7c 00 	j 80003e54 <Ifx_Ssw_doCppInit+0x110>
            *pBlockDest.ullPtr++ = 0;
80003d60:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d64:	80 22       	mov.d %d2,%a2
80003d66:	1b 82 00 20 	addi %d2,%d2,8
80003d6a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003d6e:	d2 02       	mov %e2,0
80003d70:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80003d74:	02 52       	mov %d2,%d5
80003d76:	1b f2 ff 5f 	addi %d5,%d2,-1
80003d7a:	df 02 f3 ff 	jne %d2,0,80003d60 <Ifx_Ssw_doCppInit+0x1c>
        if (uiLength & 0x4)
80003d7e:	6f 24 0a 00 	jz.t %d4,2,80003d92 <Ifx_Ssw_doCppInit+0x4e>
            *pBlockDest.uiPtr++ = 0;
80003d82:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d86:	80 22       	mov.d %d2,%a2
80003d88:	c2 42       	add %d2,4
80003d8a:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003d8e:	82 02       	mov %d2,0
80003d90:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80003d92:	6f 14 0a 00 	jz.t %d4,1,80003da6 <Ifx_Ssw_doCppInit+0x62>
            *pBlockDest.usPtr++ = 0;
80003d96:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d9a:	80 22       	mov.d %d2,%a2
80003d9c:	c2 22       	add %d2,2
80003d9e:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003da2:	82 02       	mov %d2,0
80003da4:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80003da6:	6f 04 06 00 	jz.t %d4,0,80003db2 <Ifx_Ssw_doCppInit+0x6e>
            *pBlockDest.ucPtr = 0;
80003daa:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003dae:	82 02       	mov %d2,0
80003db0:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80003db2:	40 32       	mov.aa %a2,%a3
    while (pTable)
80003db4:	bd 02 d0 7f 	jz.a %a2,80003d54 <Ifx_Ssw_doCppInit+0x10>
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003db8:	d9 23 08 00 	lea %a3,[%a2]8
80003dbc:	54 22       	ld.w %d2,[%a2]
80003dbe:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80003dc2:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80003dc6:	df f4 c7 7f 	jeq %d4,-1,80003d54 <Ifx_Ssw_doCppInit+0x10>
        uiCnt = uiLength / 8;
80003dca:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80003dce:	1d ff d4 ff 	j 80003d76 <Ifx_Ssw_doCppInit+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80003dd2:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003dd6:	80 22       	mov.d %d2,%a2
80003dd8:	1b 82 00 20 	addi %d2,%d2,8
80003ddc:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003de0:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80003de4:	80 32       	mov.d %d2,%a3
80003de6:	1b 82 00 20 	addi %d2,%d2,8
80003dea:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003dee:	09 26 40 09 	ld.d %e6,[%a2]
80003df2:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80003df6:	02 42       	mov %d2,%d4
80003df8:	1b f2 ff 4f 	addi %d4,%d2,-1
80003dfc:	df 02 eb ff 	jne %d2,0,80003dd2 <Ifx_Ssw_doCppInit+0x8e>
        }

        if (uiLength & 0x4)
80003e00:	6f 23 10 00 	jz.t %d3,2,80003e20 <Ifx_Ssw_doCppInit+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80003e04:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003e08:	80 22       	mov.d %d2,%a2
80003e0a:	c2 42       	add %d2,4
80003e0c:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003e10:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80003e14:	80 32       	mov.d %d2,%a3
80003e16:	c2 42       	add %d2,4
80003e18:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003e1c:	54 22       	ld.w %d2,[%a2]
80003e1e:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80003e20:	6f 13 11 00 	jz.t %d3,1,80003e42 <Ifx_Ssw_doCppInit+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80003e24:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80003e28:	80 32       	mov.d %d2,%a3
80003e2a:	c2 22       	add %d2,2
80003e2c:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003e30:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003e34:	80 22       	mov.d %d2,%a2
80003e36:	c2 22       	add %d2,2
80003e38:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003e3c:	b9 32 00 00 	ld.hu %d2,[%a3]0
80003e40:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80003e42:	6f 03 08 00 	jz.t %d3,0,80003e52 <Ifx_Ssw_doCppInit+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80003e46:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80003e4a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003e4e:	14 32       	ld.bu %d2,[%a3]
80003e50:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80003e52:	60 52       	mov.a %a2,%d5
    while (pTable)
80003e54:	bd 02 14 00 	jz.a %a2,80003e7c <Ifx_Ssw_doCppInit+0x138>
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
80003e58:	54 22       	ld.w %d2,[%a2]
80003e5a:	59 e2 fc ff 	st.w [%a14]-4,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003e5e:	19 22 04 00 	ld.w %d2,[%a2]4
80003e62:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80003e66:	80 22       	mov.d %d2,%a2
80003e68:	1b c2 00 50 	addi %d5,%d2,12
80003e6c:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80003e70:	df f3 06 00 	jeq %d3,-1,80003e7c <Ifx_Ssw_doCppInit+0x138>
        uiCnt = uiLength / 8;
80003e74:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80003e78:	1d ff c0 ff 	j 80003df8 <Ifx_Ssw_doCppInit+0xb4>
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
80003e7c:	6d ff 90 e6 	call 80000b9c <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
80003e80:	00 90       	ret 

80003e82 <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
80003e82:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
80003e84:	91 30 00 2f 	movh.a %a2,61443
80003e88:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80003e8c:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003e90:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
80003e94:	91 50 02 2f 	movh.a %a2,61477
80003e98:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80003e9c:	54 23       	ld.w %d3,[%a2]
80003e9e:	6f 03 04 80 	jnz.t %d3,0,80003ea6 <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
80003ea2:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
80003ea4:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
80003ea6:	91 00 00 28 	movh.a %a2,32768
80003eaa:	d9 23 6c 10 	lea %a3,[%a2]1132 <8000046c <IfxPmsEvr_cfgSequenceDefault>>
80003eae:	b0 43       	add.a %a3,4
80003eb0:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003eb2:	39 27 6c 10 	ld.bu %d7,[%a2]1132 <8000046c <IfxPmsEvr_cfgSequenceDefault>>
80003eb6:	53 c7 20 70 	mul %d7,%d7,12
80003eba:	80 33       	mov.d %d3,%a3
80003ebc:	42 73       	add %d3,%d7
80003ebe:	80 34       	mov.d %d4,%a3
80003ec0:	7f 34 f1 ff 	jge.u %d4,%d3,80003ea2 <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
80003ec4:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003ec8:	06 22       	sh %d2,2
80003eca:	7b c0 ff 1f 	movh %d1,65532
80003ece:	a6 21       	or %d1,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80003ed0:	7b c0 ff 0f 	movh %d0,65532
80003ed4:	c2 20       	add %d0,2
80003ed6:	a6 20       	or %d0,%d2
    boolean                                     pmsInitDone    = TRUE;
80003ed8:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003eda:	91 30 00 4f 	movh.a %a4,61443
80003ede:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80003ee2:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
80003ee4:	91 50 02 5f 	movh.a %a5,61477
80003ee8:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <bmhd_3_copy+0x40e46b08>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
80003eec:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80003eee:	7b c0 bf 64 	movh %d6,19452
80003ef2:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80003ef6:	c5 f6 10 01 	lea %a6,f0001010 <bmhd_3_copy+0x40bffa10>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003efa:	d9 2c 6c 10 	lea %a12,[%a2]1132 <8000046c <IfxPmsEvr_cfgSequenceDefault>>
80003efe:	1d 00 15 00 	j 80003f28 <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80003f02:	19 32 08 00 	ld.w %d2,[%a3]8
80003f06:	4b 26 41 20 	mul.f %d2,%d6,%d2
80003f0a:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80003f0e:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80003f10:	54 62       	ld.w %d2,[%a6]
80003f12:	a2 52       	sub %d2,%d5
80003f14:	3f 32 fe ff 	jlt.u %d2,%d3,80003f10 <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
80003f18:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003f1c:	19 c2 04 00 	ld.w %d2,[%a12]4
80003f20:	42 72       	add %d2,%d7
80003f22:	80 33       	mov.d %d3,%a3
80003f24:	7f 23 3d 80 	jge.u %d3,%d2,80003f9e <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003f28:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80003f2c:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003f30:	37 02 e1 20 	extr.u %d2,%d2,1,1
80003f34:	5f 42 fc 7f 	jeq %d2,%d4,80003f2c <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
80003f38:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
80003f3c:	14 32       	ld.bu %d2,[%a3]
80003f3e:	80 23       	mov.d %d3,%a2
80003f40:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003f44:	7f 23 16 80 	jge.u %d3,%d2,80003f70 <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
80003f48:	d4 27       	ld.a %a7,[%a2]
80003f4a:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
80003f4c:	19 23 08 00 	ld.w %d3,[%a2]8
80003f50:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
80003f54:	19 23 04 00 	ld.w %d3,[%a2]4
80003f58:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
80003f5a:	74 72       	st.w [%a7],%d2
                 regConfig++)
80003f5c:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
80003f60:	14 32       	ld.bu %d2,[%a3]
80003f62:	19 33 04 00 	ld.w %d3,[%a3]4
80003f66:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003f6a:	80 23       	mov.d %d3,%a2
80003f6c:	3f 23 ee ff 	jlt.u %d3,%d2,80003f48 <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
80003f70:	54 52       	ld.w %d2,[%a5]
80003f72:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80003f76:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80003f78:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
80003f7c:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003f80:	6f 12 fe 7f 	jz.t %d2,1,80003f7c <Ifx_Ssw_Pms_Init+0xfa>
80003f84:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
80003f88:	54 53       	ld.w %d3,[%a5]
80003f8a:	37 03 61 3f 	extr.u %d3,%d3,30,1
80003f8e:	5f 43 ba ff 	jne %d3,%d4,80003f02 <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
80003f92:	c2 f2       	add %d2,-1
80003f94:	df 02 fa ff 	jne %d2,0,80003f88 <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
80003f98:	02 98       	mov %d8,%d9
80003f9a:	1d ff b4 ff 	j 80003f02 <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
80003f9e:	df 08 82 ff 	jne %d8,0,80003ea2 <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
80003fa2:	00 a0       	debug 
}
80003fa4:	1d ff 7f ff 	j 80003ea2 <Ifx_Ssw_Pms_Init+0x20>

80003fa8 <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
80003fa8:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
80003faa:	91 50 02 2f 	movh.a %a2,61477
80003fae:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80003fb2:	54 22       	ld.w %d2,[%a2]
80003fb4:	6f 02 04 80 	jnz.t %d2,0,80003fbc <Ifx_Ssw_Pms_InitCheck+0x14>
80003fb8:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
80003fba:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003fbc:	91 00 00 28 	movh.a %a2,32768
80003fc0:	39 25 1c d0 	ld.bu %d5,[%a2]860 <8000035c <IfxPmsEvr_checkRegCfgDefault>>
80003fc4:	bf 15 1d 00 	jlt %d5,1,80003ffe <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
80003fc8:	d9 22 1c d0 	lea %a2,[%a2]860 <8000035c <IfxPmsEvr_checkRegCfgDefault>>
80003fcc:	b0 42       	add.a %a2,4
80003fce:	d4 22       	ld.a %a2,[%a2]
    boolean allRight = TRUE;
80003fd0:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003fd2:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
80003fd4:	d4 23       	ld.a %a3,[%a2]
80003fd6:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
80003fd8:	19 26 08 00 	ld.w %d6,[%a2]8
80003fdc:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
80003fde:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
80003fe2:	0b 64 00 41 	eq %d4,%d4,%d6
80003fe6:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003fea:	c2 13       	add %d3,1
80003fec:	d9 22 0c 00 	lea %a2,[%a2]12
80003ff0:	5f 53 f2 ff 	jne %d3,%d5,80003fd4 <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
80003ff4:	df 12 05 00 	jeq %d2,1,80003ffe <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
80003ff8:	00 a0       	debug 
}
80003ffa:	1d ff df ff 	j 80003fb8 <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
80003ffe:	91 50 02 2f 	movh.a %a2,61477
80004002:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80004006:	54 22       	ld.w %d2,[%a2]
80004008:	ef 52 d8 ff 	jnz.t %d2,21,80003fb8 <Ifx_Ssw_Pms_InitCheck+0x10>
8000400c:	1d ff f6 ff 	j 80003ff8 <Ifx_Ssw_Pms_InitCheck+0x50>

80004010 <canIsrTxHandler>:

/* Interrupt Service Routine (ISR) called once the TX interrupt has been generated.
 * Turns on the LED1 to indicate successful CAN message transmission.
 */
void canIsrTxHandler(void)
{
80004010:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Transmission Completed" interrupt flag */
    //����
    IfxCan_Node_clearInterruptFlag(g_mcmcan.canSrcNode.node, IfxCan_Interrupt_transmissionCompleted);
80004012:	91 00 00 27 	movh.a %a2,28672
80004016:	d9 22 74 10 	lea %a2,[%a2]1140 <70000474 <g_mcmcan>>
8000401a:	d9 22 0c 00 	lea %a2,[%a2]12 <7000000c <LCF_DSPR0_START+0xc>>
8000401e:	d4 22       	ld.a %a2,[%a2]
    node->IR.U = value;
80004020:	3b 00 20 20 	mov %d2,512
80004024:	59 22 10 50 	st.w [%a2]336,%d2
    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    IfxPort_setPinLow(g_led1.port, g_led1.pinIndex);
80004028:	91 00 00 27 	movh.a %a2,28672
8000402c:	d9 23 3c 00 	lea %a3,[%a2]60 <7000003c <g_led1>>
80004030:	99 22 3c 00 	ld.a %a2,[%a2]60 <7000003c <g_led1>>
80004034:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000003c <g_led1>>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80004038:	7b 10 00 30 	movh %d3,1
8000403c:	0f 23 00 20 	sh %d2,%d3,%d2
80004040:	59 22 04 00 	st.w [%a2]4,%d2
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }

}
80004044:	0d 00 40 02 	rslcx 
80004048:	00 80       	rfe 

8000404a <canIsrTxHandler1>:

void canIsrTxHandler1(void)
{
8000404a:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Transmission Completed" interrupt flag */
    //����
    IfxCan_Node_clearInterruptFlag(g_mcmcan1.canSrcNode.node, IfxCan_Interrupt_transmissionCompleted);
8000404c:	91 00 00 27 	movh.a %a2,28672
80004050:	d9 22 20 90 	lea %a2,[%a2]608 <70000260 <g_mcmcan1>>
80004054:	d9 22 0c 00 	lea %a2,[%a2]12 <7000000c <LCF_DSPR0_START+0xc>>
80004058:	d4 22       	ld.a %a2,[%a2]
8000405a:	3b 00 20 20 	mov %d2,512
8000405e:	59 22 10 50 	st.w [%a2]336,%d2
    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    IfxPort_setPinLow(g_led3.port, g_led3.pinIndex);
80004062:	91 00 00 27 	movh.a %a2,28672
80004066:	d9 23 1c 00 	lea %a3,[%a2]28 <7000001c <g_led3>>
8000406a:	99 22 1c 00 	ld.a %a2,[%a2]28 <7000001c <g_led3>>
8000406e:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000001c <g_led3>>
80004072:	7b 10 00 30 	movh %d3,1
80004076:	0f 23 00 20 	sh %d2,%d3,%d2
8000407a:	59 22 04 00 	st.w [%a2]4,%d2
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }

}
8000407e:	0d 00 40 02 	rslcx 
80004082:	00 80       	rfe 

80004084 <canIsrTxHandler2>:

void canIsrTxHandler2(void)
{
80004084:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Transmission Completed" interrupt flag */
    //����
    IfxCan_Node_clearInterruptFlag(g_mcmcan2.canSrcNode.node, IfxCan_Interrupt_transmissionCompleted);
80004086:	91 00 00 27 	movh.a %a2,28672
8000408a:	d9 22 0c 10 	lea %a2,[%a2]76 <7000004c <g_mcmcan2>>
8000408e:	d9 22 0c 00 	lea %a2,[%a2]12 <7000000c <LCF_DSPR0_START+0xc>>
80004092:	d4 22       	ld.a %a2,[%a2]
80004094:	3b 00 20 20 	mov %d2,512
80004098:	59 22 10 50 	st.w [%a2]336,%d2
    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    IfxPort_setPinLow(g_led3.port, g_led3.pinIndex);
8000409c:	91 00 00 27 	movh.a %a2,28672
800040a0:	d9 23 1c 00 	lea %a3,[%a2]28 <7000001c <g_led3>>
800040a4:	99 22 1c 00 	ld.a %a2,[%a2]28 <7000001c <g_led3>>
800040a8:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000001c <g_led3>>
800040ac:	7b 10 00 30 	movh %d3,1
800040b0:	0f 23 00 20 	sh %d2,%d3,%d2
800040b4:	59 22 04 00 	st.w [%a2]4,%d2
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }

}
800040b8:	0d 00 40 02 	rslcx 
800040bc:	00 80       	rfe 

800040be <canIsrRxHandler>:
/* Interrupt Service Routine (ISR) called once the RX interrupt has been generated.
 * Compares the content of the received CAN message with the content of the transmitted CAN message
 * and in case of success, turns on the LED2 to indicate successful CAN message reception.
 */
void canIsrRxHandler(void)
{
800040be:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Message stored to Dedicated RX Buffer" interrupt flag */
    IfxCan_Node_clearInterruptFlag(g_mcmcan.canDstNode.node, IfxCan_Interrupt_rxFifo0NewMessage);
800040c0:	91 00 00 47 	movh.a %a4,28672
800040c4:	d9 44 74 10 	lea %a4,[%a4]1140 <70000474 <g_mcmcan>>
800040c8:	99 42 2c 00 	ld.a %a2,[%a4]44 <7000002c <g_led2>>
800040cc:	82 12       	mov %d2,1
800040ce:	59 22 10 50 	st.w [%a2]336,%d2

    /* Read the received CAN message */
    g_mcmcan.rxMsg.readFromRxFifo0 = TRUE;
800040d2:	e9 42 02 80 	st.b [%a4]514 <70000202 <g_mcmcan2+0x1b6>>,%d2
    //g_mcmcan.rxMsg.readFromRxFifo1 = FALSE;

    IfxCan_Can_readMessage(&g_mcmcan.canDstNode, &g_mcmcan.rxMsg, g_mcmcan.rxData);
800040d6:	d9 46 0c 80 	lea %a6,[%a4]524 <7000020c <g_mcmcan2+0x1c0>>
800040da:	d9 45 24 70 	lea %a5,[%a4]484 <700001e4 <g_mcmcan2+0x198>>
800040de:	d9 44 28 00 	lea %a4,[%a4]40 <70000028 <g_led3+0xc>>
800040e2:	6d ff 3d fb 	call 8000375c <IfxCan_Can_readMessage>
    IfxPort_setPinState(g_led2.port, g_led2.pinIndex,  IfxPort_State_toggled);
800040e6:	91 00 00 27 	movh.a %a2,28672
800040ea:	d9 23 2c 00 	lea %a3,[%a2]44 <7000002c <g_led2>>
800040ee:	99 22 2c 00 	ld.a %a2,[%a2]44 <7000002c <g_led2>>
800040f2:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000002c <g_led2>>
800040f6:	7b 10 00 30 	movh %d3,1
800040fa:	c2 13       	add %d3,1
800040fc:	0f 23 00 20 	sh %d2,%d3,%d2
80004100:	59 22 04 00 	st.w [%a2]4,%d2
//        ( g_mcmcan.rxMsg.messageId == g_mcmcan.txMsg.messageId ) )
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }
}
80004104:	0d 00 40 02 	rslcx 
80004108:	00 80       	rfe 

8000410a <canIsrRxHandler1>:

void canIsrRxHandler1(void)
{
8000410a:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Message stored to Dedicated RX Buffer" interrupt flag */
    IfxCan_Node_clearInterruptFlag(g_mcmcan1.canDstNode.node, IfxCan_Interrupt_rxFifo0NewMessage);
8000410c:	91 00 00 47 	movh.a %a4,28672
80004110:	d9 44 20 90 	lea %a4,[%a4]608 <70000260 <g_mcmcan1>>
80004114:	99 42 2c 00 	ld.a %a2,[%a4]44 <7000002c <g_led2>>
80004118:	82 12       	mov %d2,1
8000411a:	59 22 10 50 	st.w [%a2]336,%d2

    /* Read the received CAN message */
    g_mcmcan1.rxMsg.readFromRxFifo0 = TRUE;
8000411e:	e9 42 02 80 	st.b [%a4]514 <70000202 <g_mcmcan2+0x1b6>>,%d2
    //g_mcmcan1.rxMsg.readFromRxFifo1 = FALSE;

    IfxCan_Can_readMessage(&g_mcmcan1.canDstNode, &g_mcmcan1.rxMsg, g_mcmcan1.rxData);
80004122:	d9 46 0c 80 	lea %a6,[%a4]524 <7000020c <g_mcmcan2+0x1c0>>
80004126:	d9 45 24 70 	lea %a5,[%a4]484 <700001e4 <g_mcmcan2+0x198>>
8000412a:	d9 44 28 00 	lea %a4,[%a4]40 <70000028 <g_led3+0xc>>
8000412e:	6d ff 17 fb 	call 8000375c <IfxCan_Can_readMessage>
    IfxPort_setPinState(g_led2.port, g_led2.pinIndex,  IfxPort_State_toggled);
80004132:	91 00 00 27 	movh.a %a2,28672
80004136:	d9 23 2c 00 	lea %a3,[%a2]44 <7000002c <g_led2>>
8000413a:	99 22 2c 00 	ld.a %a2,[%a2]44 <7000002c <g_led2>>
8000413e:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000002c <g_led2>>
80004142:	7b 10 00 30 	movh %d3,1
80004146:	c2 13       	add %d3,1
80004148:	0f 23 00 20 	sh %d2,%d3,%d2
8000414c:	59 22 04 00 	st.w [%a2]4,%d2
//        ( g_mcmcan.rxMsg.messageId == g_mcmcan.txMsg.messageId ) )
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }
}
80004150:	0d 00 40 02 	rslcx 
80004154:	00 80       	rfe 

80004156 <canIsrRxHandler2>:


void canIsrRxHandler2(void)
{
80004156:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Message stored to Dedicated RX Buffer" interrupt flag */
    IfxCan_Node_clearInterruptFlag(g_mcmcan2.canDstNode.node, IfxCan_Interrupt_rxFifo0NewMessage);
80004158:	91 00 00 47 	movh.a %a4,28672
8000415c:	d9 44 0c 10 	lea %a4,[%a4]76 <7000004c <g_mcmcan2>>
80004160:	99 42 2c 00 	ld.a %a2,[%a4]44 <7000002c <g_led2>>
80004164:	82 12       	mov %d2,1
80004166:	59 22 10 50 	st.w [%a2]336,%d2

    /* Read the received CAN message */
    g_mcmcan2.rxMsg.readFromRxFifo0 = TRUE;
8000416a:	e9 42 02 80 	st.b [%a4]514 <70000202 <g_mcmcan2+0x1b6>>,%d2
    //g_mcmcan1.rxMsg.readFromRxFifo1 = FALSE;

    IfxCan_Can_readMessage(&g_mcmcan2.canDstNode, &g_mcmcan2.rxMsg, g_mcmcan2.rxData);
8000416e:	d9 46 0c 80 	lea %a6,[%a4]524 <7000020c <g_mcmcan2+0x1c0>>
80004172:	d9 45 24 70 	lea %a5,[%a4]484 <700001e4 <g_mcmcan2+0x198>>
80004176:	d9 44 28 00 	lea %a4,[%a4]40 <70000028 <g_led3+0xc>>
8000417a:	6d ff f1 fa 	call 8000375c <IfxCan_Can_readMessage>
    IfxPort_setPinState(g_led2.port, g_led2.pinIndex,  IfxPort_State_toggled);
8000417e:	91 00 00 27 	movh.a %a2,28672
80004182:	d9 23 2c 00 	lea %a3,[%a2]44 <7000002c <g_led2>>
80004186:	99 22 2c 00 	ld.a %a2,[%a2]44 <7000002c <g_led2>>
8000418a:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000002c <g_led2>>
8000418e:	7b 10 00 30 	movh %d3,1
80004192:	c2 13       	add %d3,1
80004194:	0f 23 00 20 	sh %d2,%d3,%d2
80004198:	59 22 04 00 	st.w [%a2]4,%d2
//        ( g_mcmcan.rxMsg.messageId == g_mcmcan.txMsg.messageId ) )
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }
}
8000419c:	0d 00 40 02 	rslcx 
800041a0:	00 80       	rfe 

800041a2 <initMcmcan>:



/* Function to initialize MCMCAN module and nodes related for this application use case */
void initMcmcan(void)
{
800041a2:	40 ae       	mov.aa %a14,%sp
800041a4:	20 18       	sub.a %sp,24
    IfxCan_Can_initModuleConfig(&g_mcmcan.canConfig, &MODULE_CAN0);
800041a6:	91 00 00 c7 	movh.a %a12,28672
800041aa:	d9 cc 74 10 	lea %a12,[%a12]1140 <70000474 <g_mcmcan>>
800041ae:	91 00 02 5f 	movh.a %a5,61472
800041b2:	40 c4       	mov.aa %a4,%a12
800041b4:	6d ff 8f f2 	call 800026d2 <IfxCan_Can_initModuleConfig>

    IfxCan_Can_initModule(&g_mcmcan.canModule, &g_mcmcan.canConfig);
800041b8:	80 c2       	mov.d %d2,%a12
800041ba:	1b 42 00 80 	addi %d8,%d2,4
800041be:	40 c5       	mov.aa %a5,%a12
800041c0:	60 84       	mov.a %a4,%d8
800041c2:	6d ff 77 f2 	call 800026b0 <IfxCan_Can_initModule>


    IfxCan_Can_initNodeConfig(&g_mcmcan.canNodeConfig, &g_mcmcan.canModule);
800041c6:	80 c2       	mov.d %d2,%a12
800041c8:	1b 82 04 a0 	addi %d10,%d2,72
800041cc:	60 85       	mov.a %a5,%d8
800041ce:	60 a4       	mov.a %a4,%d10
800041d0:	6d ff b9 f9 	call 80003542 <IfxCan_Can_initNodeConfig>


    g_mcmcan.canNodeConfig.nodeId = IfxCan_NodeId_0;
800041d4:	82 08       	mov %d8,0
800041d6:	59 c8 0c 10 	st.w [%a12]76 <7000004c <g_mcmcan2>>,%d8


    g_mcmcan.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
800041da:	82 22       	mov %d2,2
800041dc:	59 c2 14 10 	st.w [%a12]84 <70000054 <g_mcmcan2+0x8>>,%d2


    g_mcmcan.canNodeConfig.baudRate.baudrate = 500000;
800041e0:	7b 80 00 30 	movh %d3,8
800041e4:	1b 03 12 3a 	addi %d3,%d3,-24288
800041e8:	59 c3 1c 10 	st.w [%a12]92 <7000005c <g_mcmcan2+0x10>>,%d3
    g_mcmcan.canNodeConfig.baudRate.prescaler = 0;
800041ec:	f9 c8 24 10 	st.h [%a12]100 <70000064 <g_mcmcan2+0x18>>,%d8
    g_mcmcan.canNodeConfig.baudRate.samplePoint = 8000;
800041f0:	3b 00 f4 31 	mov %d3,8000
800041f4:	f9 c3 20 10 	st.h [%a12]96 <70000060 <g_mcmcan2+0x14>>,%d3
    g_mcmcan.canNodeConfig.baudRate.syncJumpWidth = 2000;
800041f8:	3b 00 7d 30 	mov %d3,2000
800041fc:	f9 c3 22 10 	st.h [%a12]98 <70000062 <g_mcmcan2+0x16>>,%d3
    g_mcmcan.canNodeConfig.baudRate.timeSegment1 = 3;
80004200:	82 33       	mov %d3,3
80004202:	e9 c3 26 10 	st.b [%a12]102 <70000066 <g_mcmcan2+0x1a>>,%d3
    g_mcmcan.canNodeConfig.baudRate.timeSegment2 = 10;
80004206:	3b a0 00 30 	mov %d3,10
8000420a:	e9 c3 27 10 	st.b [%a12]103 <70000067 <g_mcmcan2+0x1b>>,%d3

    g_mcmcan.canNodeConfig.pins = &Can0PortInf0;
8000420e:	91 00 00 28 	movh.a %a2,32768
80004212:	d9 22 54 70 	lea %a2,[%a2]1492 <800005d4 <Can0PortInf0>>
80004216:	b5 c2 24 60 	st.a [%a12]420 <700001a4 <g_mcmcan2+0x158>>,%a2


    g_mcmcan.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
8000421a:	82 19       	mov %d9,1
8000421c:	e9 c9 11 30 	st.b [%a12]209 <700000d1 <g_mcmcan2+0x85>>,%d9

    g_mcmcan.canNodeConfig.interruptConfig.rxFifo0NewMessageEnabled = TRUE;
80004220:	e9 c9 08 30 	st.b [%a12]200 <700000c8 <g_mcmcan2+0x7c>>,%d9


    g_mcmcan.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN_TX;
80004224:	f9 c2 1c 60 	st.h [%a12]412 <7000019c <g_mcmcan2+0x150>>,%d2
    g_mcmcan.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_0;
80004228:	59 c8 18 60 	st.w [%a12]408 <70000198 <g_mcmcan2+0x14c>>,%d8
    g_mcmcan.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;
8000422c:	59 c8 20 60 	st.w [%a12]416 <700001a0 <g_mcmcan2+0x154>>,%d8



    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.priority = ISR_PRIORITY_CAN_FIFO0_RX;
80004230:	82 33       	mov %d3,3
80004232:	f9 c3 38 50 	st.h [%a12]376 <70000178 <g_mcmcan2+0x12c>>,%d3
    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.interruptLine = IfxCan_InterruptLine_1;
80004236:	82 1c       	mov %d12,1
80004238:	59 cc 34 50 	st.w [%a12]372 <70000174 <g_mcmcan2+0x128>>,%d12
    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.typeOfService = IfxSrc_Tos_cpu0;
8000423c:	59 c8 3c 50 	st.w [%a12]380 <7000017c <g_mcmcan2+0x130>>,%d8

    g_mcmcan.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_fifo0;
80004240:	59 cc 18 20 	st.w [%a12]152 <70000098 <g_mcmcan2+0x4c>>,%d12
    g_mcmcan.canNodeConfig.rxConfig.rxFifo0DataFieldSize = IfxCan_DataFieldSize_8;
80004244:	59 c8 20 20 	st.w [%a12]160 <700000a0 <g_mcmcan2+0x54>>,%d8
    g_mcmcan.canNodeConfig.rxConfig.rxFifo0Size = 15;
80004248:	3b f0 00 30 	mov %d3,15
8000424c:	e9 c3 32 20 	st.b [%a12]178 <700000b2 <g_mcmcan2+0x66>>,%d3

    g_mcmcan.canNodeConfig.filterConfig.messageIdLength = IfxCan_MessageIdLength_both;
80004250:	59 c2 08 20 	st.w [%a12]136 <70000088 <g_mcmcan2+0x3c>>,%d2
    g_mcmcan.canNodeConfig.filterConfig.standardListSize = 1;
80004254:	e9 c9 0c 20 	st.b [%a12]140 <7000008c <g_mcmcan2+0x40>>,%d9
    g_mcmcan.canNodeConfig.filterConfig.extendedListSize = 0;
80004258:	e9 c8 0d 20 	st.b [%a12]141 <7000008d <g_mcmcan2+0x41>>,%d8
    g_mcmcan.canNodeConfig.filterConfig.standardFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
8000425c:	59 c2 10 20 	st.w [%a12]144 <70000090 <g_mcmcan2+0x44>>,%d2
    g_mcmcan.canNodeConfig.filterConfig.extendedFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
80004260:	59 c2 14 20 	st.w [%a12]148 <70000094 <g_mcmcan2+0x48>>,%d2
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithStandardId = TRUE;
80004264:	e9 c9 0e 20 	st.b [%a12]142 <7000008e <g_mcmcan2+0x42>>,%d9
    g_mcmcan.canNodeConfig.filterConfig.rejectRemoteFramesWithExtendedId = TRUE;
80004268:	e9 c9 0f 20 	st.b [%a12]143 <7000008f <g_mcmcan2+0x43>>,%d9

    IfxCan_Can_initNode(&g_mcmcan.canSrcNode, &g_mcmcan.canNodeConfig);
8000426c:	60 a5       	mov.a %a5,%d10
8000426e:	d9 c4 08 00 	lea %a4,[%a12]8 <70000008 <LCF_DSPR0_START+0x8>>
80004272:	6d ff 35 f2 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Can_initNode(&g_mcmcan.canDstNode, &g_mcmcan.canNodeConfig);
80004276:	80 c2       	mov.d %d2,%a12
80004278:	1b 82 02 b0 	addi %d11,%d2,40
8000427c:	60 a5       	mov.a %a5,%d10
8000427e:	60 b4       	mov.a %a4,%d11
80004280:	6d ff 2e f2 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Filter filter;

    filter.number = 0;
80004284:	e9 e8 e8 ff 	st.b [%a14]-24,%d8
    filter.type = IfxCan_FilterType_range;
80004288:	59 e8 f0 ff 	st.w [%a14]-16,%d8
    filter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxFifo0;
8000428c:	59 ec ec ff 	st.w [%a14]-20,%d12
    filter.id1 = 0;
80004290:	59 e8 f4 ff 	st.w [%a14]-12,%d8
    filter.id2 = 10;
80004294:	3b a0 00 20 	mov %d2,10
80004298:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    //filter.rxBufferOffset = IfxCan_RxBufferId_0;
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &filter);
8000429c:	d9 e5 e8 ff 	lea %a5,[%a14]-24
800042a0:	60 b4       	mov.a %a4,%d11
800042a2:	6d ff 62 fb 	call 80003966 <IfxCan_Can_setStandardFilter>


    IfxCan_Can_initMessage(&g_mcmcan.rxMsg);
800042a6:	d9 c4 24 70 	lea %a4,[%a12]484 <700001e4 <g_mcmcan2+0x198>>
800042aa:	6d ff e3 f1 	call 80002670 <IfxCan_Can_initMessage>
    g_mcmcan.rxMsg.readFromRxFifo0=TRUE;
800042ae:	e9 c9 02 80 	st.b [%a12]514 <70000202 <g_mcmcan2+0x1b6>>,%d9
    memset((void *)(&g_mcmcan.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
800042b2:	7b 60 5a 2a 	movh %d2,42406
800042b6:	1b 52 5a 2a 	addi %d2,%d2,-23131
800042ba:	59 c2 0c 80 	st.w [%a12]524 <7000020c <g_mcmcan2+0x1c0>>,%d2
800042be:	59 c2 10 80 	st.w [%a12]528 <70000210 <g_mcmcan2+0x1c4>>,%d2
}
800042c2:	00 90       	ret 

800042c4 <initMcmcan1>:

void initMcmcan1(void)
{
800042c4:	40 ae       	mov.aa %a14,%sp
800042c6:	20 18       	sub.a %sp,24
    IfxCan_Can_initModuleConfig(&g_mcmcan1.canConfig, &MODULE_CAN1);
800042c8:	91 00 00 c7 	movh.a %a12,28672
800042cc:	d9 cc 20 90 	lea %a12,[%a12]608 <70000260 <g_mcmcan1>>
800042d0:	91 10 02 5f 	movh.a %a5,61473
800042d4:	40 c4       	mov.aa %a4,%a12
800042d6:	6d ff fe f1 	call 800026d2 <IfxCan_Can_initModuleConfig>

    IfxCan_Can_initModule(&g_mcmcan1.canModule, &g_mcmcan1.canConfig);
800042da:	80 c2       	mov.d %d2,%a12
800042dc:	1b 42 00 80 	addi %d8,%d2,4
800042e0:	40 c5       	mov.aa %a5,%a12
800042e2:	60 84       	mov.a %a4,%d8
800042e4:	6d ff e6 f1 	call 800026b0 <IfxCan_Can_initModule>


    IfxCan_Can_initNodeConfig(&g_mcmcan1.canNodeConfig, &g_mcmcan1.canModule);
800042e8:	80 c2       	mov.d %d2,%a12
800042ea:	1b 82 04 90 	addi %d9,%d2,72
800042ee:	60 85       	mov.a %a5,%d8
800042f0:	60 94       	mov.a %a4,%d9
800042f2:	6d ff 28 f9 	call 80003542 <IfxCan_Can_initNodeConfig>


    g_mcmcan1.canNodeConfig.nodeId = IfxCan_NodeId_0;
800042f6:	82 08       	mov %d8,0
800042f8:	59 c8 0c 10 	st.w [%a12]76 <7000004c <g_mcmcan2>>,%d8


    g_mcmcan1.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
800042fc:	82 22       	mov %d2,2
800042fe:	59 c2 14 10 	st.w [%a12]84 <70000054 <g_mcmcan2+0x8>>,%d2


    g_mcmcan1.canNodeConfig.baudRate.baudrate = 500000;
80004302:	7b 80 00 30 	movh %d3,8
80004306:	1b 03 12 3a 	addi %d3,%d3,-24288
8000430a:	59 c3 1c 10 	st.w [%a12]92 <7000005c <g_mcmcan2+0x10>>,%d3
    g_mcmcan1.canNodeConfig.baudRate.prescaler = 0;
8000430e:	f9 c8 24 10 	st.h [%a12]100 <70000064 <g_mcmcan2+0x18>>,%d8
    g_mcmcan1.canNodeConfig.baudRate.samplePoint = 8000;
80004312:	3b 00 f4 31 	mov %d3,8000
80004316:	f9 c3 20 10 	st.h [%a12]96 <70000060 <g_mcmcan2+0x14>>,%d3
    g_mcmcan1.canNodeConfig.baudRate.syncJumpWidth = 2000;
8000431a:	3b 00 7d 30 	mov %d3,2000
8000431e:	f9 c3 22 10 	st.h [%a12]98 <70000062 <g_mcmcan2+0x16>>,%d3
    g_mcmcan1.canNodeConfig.baudRate.timeSegment1 = 3;
80004322:	82 33       	mov %d3,3
80004324:	e9 c3 26 10 	st.b [%a12]102 <70000066 <g_mcmcan2+0x1a>>,%d3
    g_mcmcan1.canNodeConfig.baudRate.timeSegment2 = 10;
80004328:	3b a0 00 30 	mov %d3,10
8000432c:	e9 c3 27 10 	st.b [%a12]103 <70000067 <g_mcmcan2+0x1b>>,%d3

    g_mcmcan1.canNodeConfig.pins = &Can1PortInf0;
80004330:	91 00 00 28 	movh.a %a2,32768
80004334:	d9 22 40 70 	lea %a2,[%a2]1472 <800005c0 <Can1PortInf0>>
80004338:	b5 c2 24 60 	st.a [%a12]420 <700001a4 <g_mcmcan2+0x158>>,%a2


    g_mcmcan1.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
8000433c:	82 1a       	mov %d10,1
8000433e:	e9 ca 11 30 	st.b [%a12]209 <700000d1 <g_mcmcan2+0x85>>,%d10

    g_mcmcan1.canNodeConfig.interruptConfig.rxFifo0NewMessageEnabled = TRUE;
80004342:	e9 ca 08 30 	st.b [%a12]200 <700000c8 <g_mcmcan2+0x7c>>,%d10


    g_mcmcan1.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN1_TX;
80004346:	82 43       	mov %d3,4
80004348:	f9 c3 1c 60 	st.h [%a12]412 <7000019c <g_mcmcan2+0x150>>,%d3
    g_mcmcan1.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_2;
8000434c:	59 c2 18 60 	st.w [%a12]408 <70000198 <g_mcmcan2+0x14c>>,%d2
    g_mcmcan1.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;
80004350:	59 c8 20 60 	st.w [%a12]416 <700001a0 <g_mcmcan2+0x154>>,%d8



    g_mcmcan1.canNodeConfig.interruptConfig.rxf0n.priority = ISR_PRIORITY_CAN1_FIFO0_RX;
80004354:	82 53       	mov %d3,5
80004356:	f9 c3 38 50 	st.h [%a12]376 <70000178 <g_mcmcan2+0x12c>>,%d3
    g_mcmcan1.canNodeConfig.interruptConfig.rxf0n.interruptLine = IfxCan_InterruptLine_3;
8000435a:	82 33       	mov %d3,3
8000435c:	59 c3 34 50 	st.w [%a12]372 <70000174 <g_mcmcan2+0x128>>,%d3
    g_mcmcan1.canNodeConfig.interruptConfig.rxf0n.typeOfService = IfxSrc_Tos_cpu0;
80004360:	59 c8 3c 50 	st.w [%a12]380 <7000017c <g_mcmcan2+0x130>>,%d8

    g_mcmcan1.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_fifo0;
80004364:	82 1c       	mov %d12,1
80004366:	59 cc 18 20 	st.w [%a12]152 <70000098 <g_mcmcan2+0x4c>>,%d12
    g_mcmcan1.canNodeConfig.rxConfig.rxFifo0DataFieldSize = IfxCan_DataFieldSize_8;
8000436a:	59 c8 20 20 	st.w [%a12]160 <700000a0 <g_mcmcan2+0x54>>,%d8
    g_mcmcan1.canNodeConfig.rxConfig.rxFifo0Size = 15;
8000436e:	3b f0 00 30 	mov %d3,15
80004372:	e9 c3 32 20 	st.b [%a12]178 <700000b2 <g_mcmcan2+0x66>>,%d3

//    g_mcmcan1.canNodeConfig.filterConfig.messageIdLength = IfxCan_MessageIdLength_both;
//    g_mcmcan1.canNodeConfig.filterConfig.standardListSize = 1;
//    g_mcmcan1.canNodeConfig.filterConfig.extendedListSize = 0;
    g_mcmcan1.canNodeConfig.filterConfig.standardFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
80004376:	59 c2 10 20 	st.w [%a12]144 <70000090 <g_mcmcan2+0x44>>,%d2
//    g_mcmcan1.canNodeConfig.filterConfig.extendedFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
//    g_mcmcan1.canNodeConfig.filterConfig.rejectRemoteFramesWithStandardId = TRUE;
//    g_mcmcan1.canNodeConfig.filterConfig.rejectRemoteFramesWithExtendedId = TRUE;

    IfxCan_Can_initNode(&g_mcmcan1.canSrcNode, &g_mcmcan1.canNodeConfig);
8000437a:	60 95       	mov.a %a5,%d9
8000437c:	d9 c4 08 00 	lea %a4,[%a12]8 <70000008 <LCF_DSPR0_START+0x8>>
80004380:	6d ff ae f1 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Can_initNode(&g_mcmcan1.canDstNode, &g_mcmcan1.canNodeConfig);
80004384:	80 c2       	mov.d %d2,%a12
80004386:	1b 82 02 b0 	addi %d11,%d2,40
8000438a:	60 95       	mov.a %a5,%d9
8000438c:	60 b4       	mov.a %a4,%d11
8000438e:	6d ff a7 f1 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Filter filter;

    filter.number = 0;
80004392:	e9 e8 e8 ff 	st.b [%a14]-24,%d8
    filter.type = IfxCan_FilterType_range;
80004396:	59 e8 f0 ff 	st.w [%a14]-16,%d8
    filter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxFifo0;
8000439a:	59 ec ec ff 	st.w [%a14]-20,%d12
    filter.id1 = 11;
8000439e:	3b b0 00 20 	mov %d2,11
800043a2:	59 e2 f4 ff 	st.w [%a14]-12,%d2
    filter.id2 = 20;
800043a6:	3b 40 01 20 	mov %d2,20
800043aa:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    //filter.rxBufferOffset = IfxCan_RxBufferId_0;
    IfxCan_Can_setStandardFilter(&g_mcmcan1.canDstNode, &filter);
800043ae:	d9 e5 e8 ff 	lea %a5,[%a14]-24
800043b2:	60 b4       	mov.a %a4,%d11
800043b4:	6d ff d9 fa 	call 80003966 <IfxCan_Can_setStandardFilter>


    IfxCan_Can_initMessage(&g_mcmcan1.rxMsg);
800043b8:	d9 c4 24 70 	lea %a4,[%a12]484 <700001e4 <g_mcmcan2+0x198>>
800043bc:	6d ff 5a f1 	call 80002670 <IfxCan_Can_initMessage>
    g_mcmcan1.rxMsg.readFromRxFifo0=TRUE;
800043c0:	e9 ca 02 80 	st.b [%a12]514 <70000202 <g_mcmcan2+0x1b6>>,%d10
    memset((void *)(&g_mcmcan1.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
800043c4:	7b 60 5a 2a 	movh %d2,42406
800043c8:	1b 52 5a 2a 	addi %d2,%d2,-23131
800043cc:	59 c2 0c 80 	st.w [%a12]524 <7000020c <g_mcmcan2+0x1c0>>,%d2
800043d0:	59 c2 10 80 	st.w [%a12]528 <70000210 <g_mcmcan2+0x1c4>>,%d2
}
800043d4:	00 90       	ret 

800043d6 <initMcmcan2>:

void initMcmcan2(void)
{
800043d6:	40 ae       	mov.aa %a14,%sp
800043d8:	20 18       	sub.a %sp,24
    IfxCan_Can_initModuleConfig(&g_mcmcan2.canConfig, &MODULE_CAN2);
800043da:	91 00 00 c7 	movh.a %a12,28672
800043de:	d9 cc 0c 10 	lea %a12,[%a12]76 <7000004c <g_mcmcan2>>
800043e2:	91 20 02 5f 	movh.a %a5,61474
800043e6:	40 c4       	mov.aa %a4,%a12
800043e8:	6d ff 75 f1 	call 800026d2 <IfxCan_Can_initModuleConfig>

    IfxCan_Can_initModule(&g_mcmcan2.canModule, &g_mcmcan2.canConfig);
800043ec:	80 c2       	mov.d %d2,%a12
800043ee:	1b 42 00 80 	addi %d8,%d2,4
800043f2:	40 c5       	mov.aa %a5,%a12
800043f4:	60 84       	mov.a %a4,%d8
800043f6:	6d ff 5d f1 	call 800026b0 <IfxCan_Can_initModule>


    IfxCan_Can_initNodeConfig(&g_mcmcan2.canNodeConfig, &g_mcmcan2.canModule);
800043fa:	80 c2       	mov.d %d2,%a12
800043fc:	1b 82 04 90 	addi %d9,%d2,72
80004400:	60 85       	mov.a %a5,%d8
80004402:	60 94       	mov.a %a4,%d9
80004404:	6d ff 9f f8 	call 80003542 <IfxCan_Can_initNodeConfig>


    g_mcmcan2.canNodeConfig.nodeId = IfxCan_NodeId_0;
80004408:	82 08       	mov %d8,0
8000440a:	59 c8 0c 10 	st.w [%a12]76 <7000004c <g_mcmcan2>>,%d8


    g_mcmcan2.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
8000440e:	82 23       	mov %d3,2
80004410:	59 c3 14 10 	st.w [%a12]84 <70000054 <g_mcmcan2+0x8>>,%d3


    g_mcmcan2.canNodeConfig.baudRate.baudrate = 500000;
80004414:	7b 80 00 20 	movh %d2,8
80004418:	1b 02 12 2a 	addi %d2,%d2,-24288
8000441c:	59 c2 1c 10 	st.w [%a12]92 <7000005c <g_mcmcan2+0x10>>,%d2
    g_mcmcan2.canNodeConfig.baudRate.prescaler = 0;
80004420:	f9 c8 24 10 	st.h [%a12]100 <70000064 <g_mcmcan2+0x18>>,%d8
    g_mcmcan2.canNodeConfig.baudRate.samplePoint = 8000;
80004424:	3b 00 f4 21 	mov %d2,8000
80004428:	f9 c2 20 10 	st.h [%a12]96 <70000060 <g_mcmcan2+0x14>>,%d2
    g_mcmcan2.canNodeConfig.baudRate.syncJumpWidth = 2000;
8000442c:	3b 00 7d 20 	mov %d2,2000
80004430:	f9 c2 22 10 	st.h [%a12]98 <70000062 <g_mcmcan2+0x16>>,%d2
    g_mcmcan2.canNodeConfig.baudRate.timeSegment1 = 3;
80004434:	82 32       	mov %d2,3
80004436:	e9 c2 26 10 	st.b [%a12]102 <70000066 <g_mcmcan2+0x1a>>,%d2
    g_mcmcan2.canNodeConfig.baudRate.timeSegment2 = 10;
8000443a:	3b a0 00 20 	mov %d2,10
8000443e:	e9 c2 27 10 	st.b [%a12]103 <70000067 <g_mcmcan2+0x1b>>,%d2

    g_mcmcan2.canNodeConfig.pins = &Can2PortInf0;
80004442:	91 00 00 28 	movh.a %a2,32768
80004446:	d9 22 6c 60 	lea %a2,[%a2]1452 <800005ac <Can2PortInf0>>
8000444a:	b5 c2 24 60 	st.a [%a12]420 <700001a4 <g_mcmcan2+0x158>>,%a2


    g_mcmcan2.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
8000444e:	82 1a       	mov %d10,1
80004450:	e9 ca 11 30 	st.b [%a12]209 <700000d1 <g_mcmcan2+0x85>>,%d10

    g_mcmcan2.canNodeConfig.interruptConfig.rxFifo0NewMessageEnabled = TRUE;
80004454:	e9 ca 08 30 	st.b [%a12]200 <700000c8 <g_mcmcan2+0x7c>>,%d10


    g_mcmcan2.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN2_TX;
80004458:	82 62       	mov %d2,6
8000445a:	f9 c2 1c 60 	st.h [%a12]412 <7000019c <g_mcmcan2+0x150>>,%d2
    g_mcmcan2.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_4;
8000445e:	82 42       	mov %d2,4
80004460:	59 c2 18 60 	st.w [%a12]408 <70000198 <g_mcmcan2+0x14c>>,%d2
    g_mcmcan2.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;
80004464:	59 c8 20 60 	st.w [%a12]416 <700001a0 <g_mcmcan2+0x154>>,%d8



    g_mcmcan2.canNodeConfig.interruptConfig.rxf0n.priority = ISR_PRIORITY_CAN2_FIFO0_RX;
80004468:	82 72       	mov %d2,7
8000446a:	f9 c2 38 50 	st.h [%a12]376 <70000178 <g_mcmcan2+0x12c>>,%d2
    g_mcmcan2.canNodeConfig.interruptConfig.rxf0n.interruptLine = IfxCan_InterruptLine_5;
8000446e:	82 52       	mov %d2,5
80004470:	59 c2 34 50 	st.w [%a12]372 <70000174 <g_mcmcan2+0x128>>,%d2
    g_mcmcan2.canNodeConfig.interruptConfig.rxf0n.typeOfService = IfxSrc_Tos_cpu0;
80004474:	59 c8 3c 50 	st.w [%a12]380 <7000017c <g_mcmcan2+0x130>>,%d8

    g_mcmcan2.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_fifo0;
80004478:	82 1c       	mov %d12,1
8000447a:	59 cc 18 20 	st.w [%a12]152 <70000098 <g_mcmcan2+0x4c>>,%d12
    g_mcmcan2.canNodeConfig.rxConfig.rxFifo0DataFieldSize = IfxCan_DataFieldSize_8;
8000447e:	59 c8 20 20 	st.w [%a12]160 <700000a0 <g_mcmcan2+0x54>>,%d8
    g_mcmcan2.canNodeConfig.rxConfig.rxFifo0Size = 15;
80004482:	3b f0 00 20 	mov %d2,15
80004486:	e9 c2 32 20 	st.b [%a12]178 <700000b2 <g_mcmcan2+0x66>>,%d2

//    g_mcmcan2.canNodeConfig.filterConfig.messageIdLength = IfxCan_MessageIdLength_both;
//    g_mcmcan2.canNodeConfig.filterConfig.standardListSize = 1;
//    g_mcmcan2.canNodeConfig.filterConfig.extendedListSize = 0;
    g_mcmcan2.canNodeConfig.filterConfig.standardFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
8000448a:	59 c3 10 20 	st.w [%a12]144 <70000090 <g_mcmcan2+0x44>>,%d3
//    g_mcmcan2.canNodeConfig.filterConfig.extendedFilterForNonMatchingFrames = IfxCan_NonMatchingFrame_reject;
//    g_mcmcan2.canNodeConfig.filterConfig.rejectRemoteFramesWithStandardId = TRUE;
//    g_mcmcan2.canNodeConfig.filterConfig.rejectRemoteFramesWithExtendedId = TRUE;

    IfxCan_Can_initNode(&g_mcmcan2.canSrcNode, &g_mcmcan2.canNodeConfig);
8000448e:	60 95       	mov.a %a5,%d9
80004490:	d9 c4 08 00 	lea %a4,[%a12]8 <70000008 <LCF_DSPR0_START+0x8>>
80004494:	6d ff 24 f1 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Can_initNode(&g_mcmcan2.canDstNode, &g_mcmcan2.canNodeConfig);
80004498:	80 c2       	mov.d %d2,%a12
8000449a:	1b 82 02 b0 	addi %d11,%d2,40
8000449e:	60 95       	mov.a %a5,%d9
800044a0:	60 b4       	mov.a %a4,%d11
800044a2:	6d ff 1d f1 	call 800026dc <IfxCan_Can_initNode>

    IfxCan_Filter filter;

    filter.number = 0;
800044a6:	e9 e8 e8 ff 	st.b [%a14]-24,%d8
    filter.type = IfxCan_FilterType_range;
800044aa:	59 e8 f0 ff 	st.w [%a14]-16,%d8
    filter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxFifo0;
800044ae:	59 ec ec ff 	st.w [%a14]-20,%d12
    filter.id1 = 21;
800044b2:	3b 50 01 20 	mov %d2,21
800044b6:	59 e2 f4 ff 	st.w [%a14]-12,%d2
    filter.id2 = 30;
800044ba:	3b e0 01 20 	mov %d2,30
800044be:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    //filter.rxBufferOffset = IfxCan_RxBufferId_0;
    IfxCan_Can_setStandardFilter(&g_mcmcan2.canDstNode, &filter);
800044c2:	d9 e5 e8 ff 	lea %a5,[%a14]-24
800044c6:	60 b4       	mov.a %a4,%d11
800044c8:	6d ff 4f fa 	call 80003966 <IfxCan_Can_setStandardFilter>


    IfxCan_Can_initMessage(&g_mcmcan2.rxMsg);
800044cc:	d9 c4 24 70 	lea %a4,[%a12]484 <700001e4 <g_mcmcan2+0x198>>
800044d0:	6d ff d0 f0 	call 80002670 <IfxCan_Can_initMessage>
    g_mcmcan2.rxMsg.readFromRxFifo0=TRUE;
800044d4:	e9 ca 02 80 	st.b [%a12]514 <70000202 <g_mcmcan2+0x1b6>>,%d10
    memset((void *)(&g_mcmcan2.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
800044d8:	7b 60 5a 2a 	movh %d2,42406
800044dc:	1b 52 5a 2a 	addi %d2,%d2,-23131
800044e0:	59 c2 0c 80 	st.w [%a12]524 <7000020c <g_mcmcan2+0x1c0>>,%d2
800044e4:	59 c2 10 80 	st.w [%a12]528 <70000210 <g_mcmcan2+0x1c4>>,%d2
}
800044e8:	00 90       	ret 

800044ea <transmitCanMessage2>:
    {
    }
}

void transmitCanMessage2(void)
{
800044ea:	40 ae       	mov.aa %a14,%sp
    /* Initialization of the RX message with the default configuration */
    IfxCan_Can_initMessage(&g_mcmcan2.rxMsg);
800044ec:	91 00 00 c7 	movh.a %a12,28672
800044f0:	d9 cc 30 80 	lea %a12,[%a12]560 <70000230 <g_mcmcan2+0x1e4>>
800044f4:	40 c4       	mov.aa %a4,%a12
800044f6:	6d ff bd f0 	call 80002670 <IfxCan_Can_initMessage>

    /* Invalidation of the RX message data content */
    memset((void *)(&g_mcmcan2.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
800044fa:	7b 60 5a 2a 	movh %d2,42406
800044fe:	1b 52 5a 2a 	addi %d2,%d2,-23131
80004502:	59 c2 28 00 	st.w [%a12]40 <70000028 <g_led3+0xc>>,%d2
80004506:	59 c2 2c 00 	st.w [%a12]44 <7000002c <g_led2>>,%d2

    /* Initialization of the TX message with the default configuration */
    IfxCan_Can_initMessage(&g_mcmcan2.txMsg);
8000450a:	d9 c4 e0 ff 	lea %a4,[%a12]-32 <6fffffe0 <__CSA1_END+0xffc43e0>>
8000450e:	6d ff b1 f0 	call 80002670 <IfxCan_Can_initMessage>

    /* Define the content of the data to be transmitted */
    g_mcmcan2.txData[0] = TX_DATA_LOW_WORD;
80004512:	7b b0 0c 2c 	movh %d2,49355
80004516:	1b a2 01 2c 	addi %d2,%d2,-16358
8000451a:	59 c2 20 00 	st.w [%a12]32 <70000020 <g_led3+0x4>>,%d2
    g_mcmcan2.txData[1] = TX_DATA_HIGH_WORD;
8000451e:	7b f0 a5 2b 	movh %d2,47711
80004522:	1b 12 a1 2b 	addi %d2,%d2,-17903
80004526:	59 c2 24 00 	st.w [%a12]36 <70000024 <g_led3+0x8>>,%d2

    /* Set the message ID that is used during the receive acceptance phase */
    g_mcmcan2.txMsg.messageId = CAN_MESSAGE_ID;
8000452a:	3b 70 77 20 	mov %d2,1911
8000452e:	59 c2 e4 ff 	st.w [%a12]-28 <6fffffe4 <__CSA1_END+0xffc43e4>>,%d2

    /* Send the CAN message with the previously defined TX message content */
    while( IfxCan_Status_notSentBusy ==
           IfxCan_Can_sendMessage(&g_mcmcan2.canSrcNode, &g_mcmcan2.txMsg, &g_mcmcan2.txData[0]) )
80004532:	91 00 00 67 	movh.a %a6,28672
80004536:	d9 66 10 90 	lea %a6,[%a6]592 <70000250 <g_mcmcan2+0x204>>
8000453a:	d9 65 c0 ff 	lea %a5,[%a6]-64 <6fffffc0 <__CSA1_END+0xffc43c0>>
8000453e:	d9 64 c4 8f 	lea %a4,[%a6]-508 <6ffffe04 <__CSA1_END+0xffc4204>>
80004542:	6d ff 8f f9 	call 80003860 <IfxCan_Can_sendMessage>
    while( IfxCan_Status_notSentBusy ==
80004546:	8b 02 02 22 	eq %d2,%d2,32
8000454a:	df 02 f4 ff 	jne %d2,0,80004532 <transmitCanMessage2+0x48>
    {
    }
}
8000454e:	00 90       	ret 

80004550 <initLeds>:

/* Function to initialize the LEDs */
void initLeds(void)
{
80004550:	40 ae       	mov.aa %a14,%sp
     *  - define the GPIO pin that is connected to the LED
     *  - define the general GPIO pin usage (no alternate function used)
     *  - define the pad driver strength
     * ======================================================================
     */
    g_led1.port      = &MODULE_P21;
80004552:	7b 00 00 a7 	movh %d10,28672
80004556:	60 a2       	mov.a %a2,%d10
80004558:	d9 2f 3c 00 	lea %a15,[%a2]60
8000455c:	91 40 00 4f 	movh.a %a4,61444
80004560:	d9 44 40 4b 	lea %a4,[%a4]-19200 <f003b500 <bmhd_3_copy+0x40c39f00>>
80004564:	b5 24 3c 00 	st.a [%a2]60 <f003b500 <bmhd_3_copy+0x40c39f00>>,%a4
    g_led1.pinIndex  = 4;
80004568:	82 42       	mov %d2,4
8000456a:	28 42       	st.b [%a15]4,%d2
    g_led1.mode      = IfxPort_OutputIdx_general;
8000456c:	3b 00 08 50 	mov %d5,128
80004570:	68 25       	st.w [%a15]8,%d5
    g_led1.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;
80004572:	82 02       	mov %d2,0
80004574:	68 32       	st.w [%a15]12,%d2

    g_led2.port      = &MODULE_P21;
80004576:	7b 00 00 97 	movh %d9,28672
8000457a:	60 92       	mov.a %a2,%d9
8000457c:	d9 2d 2c 00 	lea %a13,[%a2]44
80004580:	b5 24 2c 00 	st.a [%a2]44,%a4
    g_led2.pinIndex  = 5;
80004584:	82 53       	mov %d3,5
80004586:	e9 d3 04 00 	st.b [%a13]4,%d3
    g_led2.mode      = IfxPort_OutputIdx_general;
8000458a:	59 d5 08 00 	st.w [%a13]8,%d5
    g_led2.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;
8000458e:	59 d2 0c 00 	st.w [%a13]12,%d2

    g_led3.port      = &MODULE_P20;
80004592:	7b 00 00 87 	movh %d8,28672
80004596:	60 82       	mov.a %a2,%d8
80004598:	d9 2c 1c 00 	lea %a12,[%a2]28
8000459c:	91 40 00 2f 	movh.a %a2,61444
800045a0:	d9 22 40 0b 	lea %a2,[%a2]-19456 <f003b400 <bmhd_3_copy+0x40c39e00>>
800045a4:	60 83       	mov.a %a3,%d8
800045a6:	b5 32 1c 00 	st.a [%a3]28,%a2
    g_led3.pinIndex  = 9;
800045aa:	3b 90 00 30 	mov %d3,9
800045ae:	e9 c3 04 00 	st.b [%a12]4,%d3
    g_led3.mode      = IfxPort_OutputIdx_general;
800045b2:	59 c5 08 00 	st.w [%a12]8,%d5
    g_led3.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800045b6:	59 c2 0c 00 	st.w [%a12]12,%d2
800045ba:	3b 00 01 20 	mov %d2,16
800045be:	d9 43 04 00 	lea %a3,[%a4]4 <f0040004 <bmhd_3_copy+0x40c3ea04>>
800045c2:	59 42 04 00 	st.w [%a4]4 <f0040004 <bmhd_3_copy+0x40c3ea04>>,%d2
800045c6:	3b 00 02 20 	mov %d2,32
800045ca:	74 32       	st.w [%a3],%d2
800045cc:	3b 00 20 20 	mov %d2,512
800045d0:	59 22 04 00 	st.w [%a2]4 <f0040004 <bmhd_3_copy+0x40c3ea04>>,%d2
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800045d4:	82 44       	mov %d4,4
800045d6:	6d ff a6 ea 	call 80001b22 <IfxPort_setPinMode>
    IfxPort_setPinHigh(g_led2.port, g_led2.pinIndex);
    IfxPort_setPinHigh(g_led3.port, g_led3.pinIndex);

    /* Set the pin input/output mode for both pins connected to the LEDs */
    IfxPort_setPinModeOutput(g_led1.port, g_led1.pinIndex, IfxPort_OutputMode_pushPull, g_led1.mode);
    IfxPort_setPinModeOutput(g_led2.port, g_led2.pinIndex, IfxPort_OutputMode_pushPull, g_led2.mode);
800045da:	19 d5 08 00 	ld.w %d5,[%a13]8
800045de:	8f 05 48 51 	or %d5,%d5,128
800045e2:	39 d4 04 00 	ld.bu %d4,[%a13]4
800045e6:	60 92       	mov.a %a2,%d9
800045e8:	99 24 2c 00 	ld.a %a4,[%a2]44
800045ec:	6d ff 9b ea 	call 80001b22 <IfxPort_setPinMode>
    IfxPort_setPinModeOutput(g_led3.port, g_led3.pinIndex, IfxPort_OutputMode_pushPull, g_led3.mode);
800045f0:	19 c5 08 00 	ld.w %d5,[%a12]8
800045f4:	8f 05 48 51 	or %d5,%d5,128
800045f8:	39 c4 04 00 	ld.bu %d4,[%a12]4
800045fc:	60 82       	mov.a %a2,%d8
800045fe:	99 24 1c 00 	ld.a %a4,[%a2]28
80004602:	6d ff 90 ea 	call 80001b22 <IfxPort_setPinMode>

    /* Set the pad driver mode for both pins connected to the LEDs */
    IfxPort_setPinPadDriver(g_led1.port, g_led1.pinIndex, g_led1.padDriver);
80004606:	48 35       	ld.w %d5,[%a15]12
80004608:	08 44       	ld.bu %d4,[%a15]4
8000460a:	60 a2       	mov.a %a2,%d10
8000460c:	99 24 3c 00 	ld.a %a4,[%a2]60
80004610:	6d ff c6 ea 	call 80001b9c <IfxPort_setPinPadDriver>
    IfxPort_setPinPadDriver(g_led2.port, g_led2.pinIndex, g_led2.padDriver);
80004614:	19 d5 0c 00 	ld.w %d5,[%a13]12
80004618:	39 d4 04 00 	ld.bu %d4,[%a13]4
8000461c:	60 92       	mov.a %a2,%d9
8000461e:	99 24 2c 00 	ld.a %a4,[%a2]44
80004622:	6d ff bd ea 	call 80001b9c <IfxPort_setPinPadDriver>
    IfxPort_setPinPadDriver(g_led3.port, g_led3.pinIndex, g_led3.padDriver);
80004626:	19 c5 0c 00 	ld.w %d5,[%a12]12
8000462a:	39 c4 04 00 	ld.bu %d4,[%a12]4
8000462e:	60 82       	mov.a %a2,%d8
80004630:	99 24 1c 00 	ld.a %a4,[%a2]28
80004634:	6d ff b4 ea 	call 80001b9c <IfxPort_setPinPadDriver>
}
80004638:	00 90       	ret 

8000463a <memset>:
8000463a:	40 42       	mov.aa %a2,%a4
8000463c:	df 05 07 00 	jeq %d5,0,8000464a <memset+0x10>
80004640:	60 53       	mov.a %a3,%d5
80004642:	b0 f3       	add.a %a3,-1
80004644:	24 44       	st.b [%a4+],%d4
80004646:	fd 30 ff 7f 	loop %a3,80004644 <memset+0xa>
8000464a:	00 90       	ret 

8000464c <__fixunsdfsi>:
8000464c:	82 06       	mov %d6,0
8000464e:	7b 00 1e 74 	movh %d7,16864
80004652:	60 4d       	mov.a %a13,%d4
80004654:	60 5c       	mov.a %a12,%d5
80004656:	6d 00 91 02 	call 80004b78 <__gedf2>
8000465a:	ff 02 07 00 	jge %d2,0,80004668 <__fixunsdfsi+0x1c>
8000465e:	80 d4       	mov.d %d4,%a13
80004660:	80 c5       	mov.d %d5,%a12
80004662:	6d 00 ab 02 	call 80004bb8 <__fixdfsi>
80004666:	00 90       	ret 
80004668:	82 06       	mov %d6,0
8000466a:	7b 00 1e 74 	movh %d7,16864
8000466e:	80 d4       	mov.d %d4,%a13
80004670:	80 c5       	mov.d %d5,%a12
80004672:	6d 00 4e 01 	call 8000490e <__subdf3>
80004676:	0b 23 10 48 	mov %e4,%d3,%d2
8000467a:	6d 00 9f 02 	call 80004bb8 <__fixdfsi>
8000467e:	9b 02 00 28 	addih %d2,%d2,32768
80004682:	00 90       	ret 

80004684 <__extendsfdf2>:
80004684:	20 20       	sub.a %sp,32
80004686:	d9 a5 10 00 	lea %a5,[%sp]16
8000468a:	d9 a4 0c 00 	lea %a4,[%sp]12
8000468e:	59 a4 0c 00 	st.w [%sp]12,%d4
80004692:	6d 00 e1 02 	call 80004c54 <__unpack_f>
80004696:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000469a:	19 a6 18 00 	ld.w %d6,[%sp]24
8000469e:	53 12 40 40 	mul.u %e4,%d2,1
800046a2:	77 45 00 3f 	dextr %d3,%d5,%d4,30
800046a6:	8f e4 01 20 	sh %d2,%d4,30
800046aa:	19 a5 14 00 	ld.w %d5,[%sp]20
800046ae:	19 a4 10 00 	ld.w %d4,[%sp]16
800046b2:	74 a2       	st.w [%sp],%d2
800046b4:	59 a3 04 00 	st.w [%sp]4,%d3
800046b8:	6d 00 be 02 	call 80004c34 <__make_dp>
800046bc:	00 90       	ret 

800046be <_fpadd_parts>:
800046be:	54 42       	ld.w %d2,[%a4]
800046c0:	40 42       	mov.aa %a2,%a4
800046c2:	bf 22 c2 80 	jlt.u %d2,2,80004846 <_fpadd_parts+0x188>
800046c6:	54 53       	ld.w %d3,[%a5]
800046c8:	40 52       	mov.aa %a2,%a5
800046ca:	bf 23 be 80 	jlt.u %d3,2,80004846 <_fpadd_parts+0x188>
800046ce:	df 42 e3 00 	jeq %d2,4,80004894 <_fpadd_parts+0x1d6>
800046d2:	df 43 ba 00 	jeq %d3,4,80004846 <_fpadd_parts+0x188>
800046d6:	df 23 b9 00 	jeq %d3,2,80004848 <_fpadd_parts+0x18a>
800046da:	df 22 b6 00 	jeq %d2,2,80004846 <_fpadd_parts+0x188>
800046de:	19 40 08 00 	ld.w %d0,[%a4]8
800046e2:	19 57 08 00 	ld.w %d7,[%a5]8
800046e6:	09 44 4c 09 	ld.d %e4,[%a4]12
800046ea:	0b 70 80 60 	sub %d6,%d0,%d7
800046ee:	09 52 4c 09 	ld.d %e2,[%a5]12
800046f2:	bf 06 c2 00 	jlt %d6,0,80004876 <_fpadd_parts+0x1b8>
800046f6:	8b 06 84 12 	ge %d1,%d6,64
800046fa:	df 01 c4 80 	jne %d1,0,80004882 <_fpadd_parts+0x1c4>
800046fe:	df 06 2a 00 	jeq %d6,0,80004752 <_fpadd_parts+0x94>
80004702:	8b 06 82 72 	ge %d7,%d6,32
80004706:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
8000470a:	ab 03 a0 87 	seln %d8,%d7,%d3,0
8000470e:	8f f6 01 71 	and %d7,%d6,31
80004712:	8b 07 02 11 	rsub %d1,%d7,32
80004716:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
8000471a:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
8000471e:	8b 06 82 a2 	ge %d10,%d6,32
80004722:	32 57       	rsub %d7
80004724:	02 19       	mov %d9,%d1
80004726:	8f f6 01 61 	and %d6,%d6,31
8000472a:	82 f1       	mov %d1,-1
8000472c:	0f 78 00 80 	sh %d8,%d8,%d7
80004730:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80004734:	0f 61 00 60 	sh %d6,%d1,%d6
80004738:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
8000473c:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
80004740:	0f 62 e0 10 	andn %d1,%d2,%d6
80004744:	0f 73 e0 60 	andn %d6,%d3,%d7
80004748:	a6 16       	or %d6,%d1
8000474a:	8b 06 00 95 	or.ne %d9,%d6,0
8000474e:	0b 98 10 28 	mov %e2,%d8,%d9
80004752:	19 41 04 00 	ld.w %d1,[%a4]4
80004756:	19 56 04 00 	ld.w %d6,[%a5]4
8000475a:	5f 61 4c 00 	jeq %d1,%d6,800047f2 <_fpadd_parts+0x134>
8000475e:	0b 24 c0 60 	subx %d6,%d4,%d2
80004762:	0b 35 d0 70 	subc %d7,%d5,%d3
80004766:	df 01 06 00 	jeq %d1,0,80004772 <_fpadd_parts+0xb4>
8000476a:	0b 42 c0 60 	subx %d6,%d2,%d4
8000476e:	0b 53 d0 70 	subc %d7,%d3,%d5
80004772:	8b 07 00 31 	rsub %d3,%d7,0
80004776:	8b 06 00 91 	rsub %d9,%d6,0
8000477a:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
8000477e:	82 12       	mov %d2,1
80004780:	bf 07 05 00 	jlt %d7,0,8000478a <_fpadd_parts+0xcc>
80004784:	02 69       	mov %d9,%d6
80004786:	02 73       	mov %d3,%d7
80004788:	82 02       	mov %d2,0
8000478a:	8b f9 9f 70 	addx %d7,%d9,-1
8000478e:	82 f5       	mov %d5,-1
80004790:	8b f3 bf 60 	addc %d6,%d3,-1
80004794:	06 c5       	sh %d5,-4
80004796:	59 62 04 00 	st.w [%a6]4,%d2
8000479a:	82 e1       	mov %d1,-2
8000479c:	0b 56 00 21 	eq %d2,%d6,%d5
800047a0:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
800047a4:	59 60 08 00 	st.w [%a6]8,%d0
800047a8:	59 69 0c 00 	st.w [%a6]12,%d9
800047ac:	59 63 10 00 	st.w [%a6]16,%d3
800047b0:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
800047b4:	df 02 2b 80 	jne %d2,0,8000480a <_fpadd_parts+0x14c>
800047b8:	1b f0 ff 7f 	addi %d7,%d0,-1
800047bc:	77 93 80 30 	dextr %d3,%d3,%d9,1
800047c0:	06 19       	sh %d9,1
800047c2:	8b f9 9f 00 	addx %d0,%d9,-1
800047c6:	8b f3 bf 60 	addc %d6,%d3,-1
800047ca:	0b 56 00 21 	eq %d2,%d6,%d5
800047ce:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
800047d2:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
800047d6:	02 78       	mov %d8,%d7
800047d8:	c2 f7       	add %d7,-1
800047da:	df 02 f1 ff 	jne %d2,0,800047bc <_fpadd_parts+0xfe>
800047de:	82 32       	mov %d2,3
800047e0:	59 69 0c 00 	st.w [%a6]12,%d9
800047e4:	59 63 10 00 	st.w [%a6]16,%d3
800047e8:	59 68 08 00 	st.w [%a6]8,%d8
800047ec:	74 62       	st.w [%a6],%d2
800047ee:	40 62       	mov.aa %a2,%a6
800047f0:	00 90       	ret 
800047f2:	0b 24 40 90 	addx %d9,%d4,%d2
800047f6:	0b 35 50 30 	addc %d3,%d5,%d3
800047fa:	59 61 04 00 	st.w [%a6]4,%d1
800047fe:	59 60 08 00 	st.w [%a6]8,%d0
80004802:	59 69 0c 00 	st.w [%a6]12,%d9
80004806:	59 63 10 00 	st.w [%a6]16,%d3
8000480a:	82 32       	mov %d2,3
8000480c:	7b 00 00 52 	movh %d5,8192
80004810:	40 62       	mov.aa %a2,%a6
80004812:	74 62       	st.w [%a6],%d2
80004814:	0b 53 00 21 	eq %d2,%d3,%d5
80004818:	b7 02 01 20 	insert %d2,%d2,0,0,1
8000481c:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
80004820:	df 02 13 80 	jne %d2,0,80004846 <_fpadd_parts+0x188>
80004824:	8f f3 1f 20 	sh %d2,%d3,-1
80004828:	77 93 80 5f 	dextr %d5,%d3,%d9,31
8000482c:	8f 19 00 31 	and %d3,%d9,1
80004830:	59 62 10 00 	st.w [%a6]16,%d2
80004834:	19 62 08 00 	ld.w %d2,[%a6]8
80004838:	a6 53       	or %d3,%d5
8000483a:	c2 12       	add %d2,1
8000483c:	d9 63 08 00 	lea %a3,[%a6]8
80004840:	59 63 0c 00 	st.w [%a6]12,%d3
80004844:	74 32       	st.w [%a3],%d2
80004846:	00 90       	ret 
80004848:	40 42       	mov.aa %a2,%a4
8000484a:	df 22 fe ff 	jne %d2,2,80004846 <_fpadd_parts+0x188>
8000484e:	40 63       	mov.aa %a3,%a6
80004850:	09 44 48 01 	ld.d %e4,[%a4+]8
80004854:	89 34 48 01 	st.d [%a3+]8,%e4
80004858:	09 44 48 01 	ld.d %e4,[%a4+]8
8000485c:	89 34 48 01 	st.d [%a3+]8,%e4
80004860:	44 44       	ld.w %d4,[%a4+]
80004862:	64 34       	st.w [%a3+],%d4
80004864:	19 23 04 00 	ld.w %d3,[%a2]4
80004868:	19 52 04 00 	ld.w %d2,[%a5]4
8000486c:	40 62       	mov.aa %a2,%a6
8000486e:	26 32       	and %d2,%d3
80004870:	59 62 04 00 	st.w [%a6]4,%d2
80004874:	00 90       	ret 
80004876:	0b 07 80 60 	sub %d6,%d7,%d0
8000487a:	8b 06 44 12 	lt %d1,%d6,64
8000487e:	df 01 1d 80 	jne %d1,0,800048b8 <_fpadd_parts+0x1fa>
80004882:	3f 07 06 00 	jlt %d7,%d0,8000488e <_fpadd_parts+0x1d0>
80004886:	d2 04       	mov %e4,0
80004888:	02 70       	mov %d0,%d7
8000488a:	1d ff 64 ff 	j 80004752 <_fpadd_parts+0x94>
8000488e:	d2 02       	mov %e2,0
80004890:	1d ff 61 ff 	j 80004752 <_fpadd_parts+0x94>
80004894:	40 42       	mov.aa %a2,%a4
80004896:	df 43 d8 ff 	jne %d3,4,80004846 <_fpadd_parts+0x188>
8000489a:	19 43 04 00 	ld.w %d3,[%a4]4
8000489e:	19 52 04 00 	ld.w %d2,[%a5]4
800048a2:	7b 00 00 48 	movh %d4,32768
800048a6:	0b 23 10 21 	ne %d2,%d3,%d2
800048aa:	1b 04 21 40 	addi %d4,%d4,528
800048ae:	80 43       	mov.d %d3,%a4
800048b0:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
800048b4:	60 22       	mov.a %a2,%d2
800048b6:	00 90       	ret 
800048b8:	8b 06 82 02 	ge %d0,%d6,32
800048bc:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
800048c0:	ab 05 a0 80 	seln %d8,%d0,%d5,0
800048c4:	8f f6 01 01 	and %d0,%d6,31
800048c8:	8b 00 02 11 	rsub %d1,%d0,32
800048cc:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
800048d0:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
800048d4:	8b 06 82 a2 	ge %d10,%d6,32
800048d8:	32 50       	rsub %d0
800048da:	02 19       	mov %d9,%d1
800048dc:	8f f6 01 61 	and %d6,%d6,31
800048e0:	82 f1       	mov %d1,-1
800048e2:	0f 08 00 80 	sh %d8,%d8,%d0
800048e6:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
800048ea:	0f 61 00 60 	sh %d6,%d1,%d6
800048ee:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
800048f2:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
800048f6:	0f 64 e0 10 	andn %d1,%d4,%d6
800048fa:	0f 05 e0 60 	andn %d6,%d5,%d0
800048fe:	a6 16       	or %d6,%d1
80004900:	8b 06 00 95 	or.ne %d9,%d6,0
80004904:	0b 98 10 48 	mov %e4,%d8,%d9
80004908:	02 70       	mov %d0,%d7
8000490a:	1d ff 24 ff 	j 80004752 <_fpadd_parts+0x94>

8000490e <__subdf3>:
8000490e:	20 50       	sub.a %sp,80
80004910:	d9 a5 14 00 	lea %a5,[%sp]20
80004914:	d9 a4 04 00 	lea %a4,[%sp]4
80004918:	89 a4 44 09 	st.d [%sp]4,%e4
8000491c:	89 a6 4c 09 	st.d [%sp]12,%e6
80004920:	6d 00 ad 02 	call 80004e7a <__unpack_d>
80004924:	d9 a5 28 00 	lea %a5,[%sp]40
80004928:	d9 a4 0c 00 	lea %a4,[%sp]12
8000492c:	6d 00 a7 02 	call 80004e7a <__unpack_d>
80004930:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004934:	d9 a4 14 00 	lea %a4,[%sp]20
80004938:	8f 12 80 21 	xor %d2,%d2,1
8000493c:	d9 a6 3c 00 	lea %a6,[%sp]60
80004940:	d9 a5 28 00 	lea %a5,[%sp]40
80004944:	59 a2 2c 00 	st.w [%sp]44,%d2
80004948:	6d ff bb fe 	call 800046be <_fpadd_parts>
8000494c:	40 24       	mov.aa %a4,%a2
8000494e:	6d 00 c7 01 	call 80004cdc <__pack_d>
80004952:	00 90       	ret 

80004954 <__muldf3>:
80004954:	20 50       	sub.a %sp,80
80004956:	d9 a5 14 00 	lea %a5,[%sp]20
8000495a:	d9 a4 04 00 	lea %a4,[%sp]4
8000495e:	89 a4 44 09 	st.d [%sp]4,%e4
80004962:	89 a6 4c 09 	st.d [%sp]12,%e6
80004966:	6d 00 8a 02 	call 80004e7a <__unpack_d>
8000496a:	d9 a5 28 00 	lea %a5,[%sp]40
8000496e:	d9 a4 0c 00 	lea %a4,[%sp]12
80004972:	6d 00 84 02 	call 80004e7a <__unpack_d>
80004976:	19 a2 14 00 	ld.w %d2,[%sp]20
8000497a:	ff 22 0f 80 	jge.u %d2,2,80004998 <__muldf3+0x44>
8000497e:	19 a3 18 00 	ld.w %d3,[%sp]24
80004982:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004986:	d9 a4 14 00 	lea %a4,[%sp]20
8000498a:	0b 23 10 21 	ne %d2,%d3,%d2
8000498e:	59 a2 18 00 	st.w [%sp]24,%d2
80004992:	6d 00 a5 01 	call 80004cdc <__pack_d>
80004996:	00 90       	ret 
80004998:	19 a3 28 00 	ld.w %d3,[%sp]40
8000499c:	bf 23 14 80 	jlt.u %d3,2,800049c4 <__muldf3+0x70>
800049a0:	df 42 0a 80 	jne %d2,4,800049b4 <__muldf3+0x60>
800049a4:	91 00 00 48 	movh.a %a4,32768
800049a8:	d9 44 10 80 	lea %a4,[%a4]528 <80000210 <__thenan_df>>
800049ac:	df 23 f3 7f 	jeq %d3,2,80004992 <__muldf3+0x3e>
800049b0:	1d ff e7 ff 	j 8000497e <__muldf3+0x2a>
800049b4:	df 43 15 80 	jne %d3,4,800049de <__muldf3+0x8a>
800049b8:	91 00 00 48 	movh.a %a4,32768
800049bc:	d9 44 10 80 	lea %a4,[%a4]528 <80000210 <__thenan_df>>
800049c0:	df 22 e9 7f 	jeq %d2,2,80004992 <__muldf3+0x3e>
800049c4:	19 a2 2c 00 	ld.w %d2,[%sp]44
800049c8:	19 a3 18 00 	ld.w %d3,[%sp]24
800049cc:	d9 a4 28 00 	lea %a4,[%sp]40
800049d0:	0b 23 10 21 	ne %d2,%d3,%d2
800049d4:	59 a2 2c 00 	st.w [%sp]44,%d2
800049d8:	6d 00 82 01 	call 80004cdc <__pack_d>
800049dc:	00 90       	ret 
800049de:	19 a5 2c 00 	ld.w %d5,[%sp]44
800049e2:	19 a4 18 00 	ld.w %d4,[%sp]24
800049e6:	0b 45 10 a1 	ne %d10,%d5,%d4
800049ea:	df 22 aa 00 	jeq %d2,2,80004b3e <__muldf3+0x1ea>
800049ee:	df 23 ae 00 	jeq %d3,2,80004b4a <__muldf3+0x1f6>
800049f2:	19 a6 34 00 	ld.w %d6,[%sp]52
800049f6:	19 a4 20 00 	ld.w %d4,[%sp]32
800049fa:	82 03       	mov %d3,0
800049fc:	73 46 68 00 	mul.u %e0,%d6,%d4
80004a00:	19 a2 38 00 	ld.w %d2,[%sp]56
80004a04:	82 0b       	mov %d11,0
80004a06:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
80004a0a:	02 48       	mov %d8,%d4
80004a0c:	19 a7 24 00 	ld.w %d7,[%sp]36
80004a10:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80004a14:	73 42 68 40 	mul.u %e4,%d2,%d4
80004a18:	82 0d       	mov %d13,0
80004a1a:	82 0c       	mov %d12,0
80004a1c:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
80004a20:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80004a24:	73 27 68 80 	mul.u %e8,%d7,%d2
80004a28:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80004a2c:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
80004a30:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80004a34:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80004a38:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80004a3c:	0b 35 00 61 	eq %d6,%d5,%d3
80004a40:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80004a44:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80004a48:	02 67       	mov %d7,%d6
80004a4a:	82 06       	mov %d6,0
80004a4c:	0b 06 40 60 	addx %d6,%d6,%d0
80004a50:	0b 12 50 50 	addc %d5,%d2,%d1
80004a54:	0b 51 00 41 	eq %d4,%d1,%d5
80004a58:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80004a5c:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
80004a60:	df 04 06 80 	jne %d4,0,80004a6c <__muldf3+0x118>
80004a64:	8b 1b 80 b0 	addx %d11,%d11,1
80004a68:	8b 07 a0 70 	addc %d7,%d7,0
80004a6c:	82 04       	mov %d4,0
80004a6e:	0b 83 40 30 	addx %d3,%d3,%d8
80004a72:	0b 94 50 20 	addc %d2,%d4,%d9
80004a76:	0b b3 40 30 	addx %d3,%d3,%d11
80004a7a:	0b 72 50 20 	addc %d2,%d2,%d7
80004a7e:	19 a4 1c 00 	ld.w %d4,[%sp]28
80004a82:	19 a7 30 00 	ld.w %d7,[%sp]48
80004a86:	59 aa 00 10 	st.w [%sp]64,%d10
80004a8a:	0b 74 00 10 	add %d1,%d4,%d7
80004a8e:	7b 00 00 42 	movh %d4,8192
80004a92:	1b 41 00 00 	addi %d0,%d1,4
80004a96:	0b 42 00 71 	eq %d7,%d2,%d4
80004a9a:	b7 07 01 70 	insert %d7,%d7,0,0,1
80004a9e:	59 a0 04 10 	st.w [%sp]68,%d0
80004aa2:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80004aa6:	df 07 2b 80 	jne %d7,0,80004afc <__muldf3+0x1a8>
80004aaa:	1b 51 00 70 	addi %d7,%d1,5
80004aae:	8f 13 00 01 	and %d0,%d3,1
80004ab2:	02 71       	mov %d1,%d7
80004ab4:	df 00 07 00 	jeq %d0,0,80004ac2 <__muldf3+0x16e>
80004ab8:	77 65 80 6f 	dextr %d6,%d5,%d6,31
80004abc:	06 f5       	sh %d5,-1
80004abe:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
80004ac2:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004ac6:	06 f2       	sh %d2,-1
80004ac8:	0b 24 30 01 	lt.u %d0,%d4,%d2
80004acc:	0b 24 70 02 	or.eq %d0,%d4,%d2
80004ad0:	c2 17       	add %d7,1
80004ad2:	df 00 ee ff 	jne %d0,0,80004aae <__muldf3+0x15a>
80004ad6:	59 a1 04 10 	st.w [%sp]68,%d1
80004ada:	8f f3 0f 41 	and %d4,%d3,255
80004ade:	8b 04 28 42 	ne %d4,%d4,128
80004ae2:	df 04 3a 00 	jeq %d4,0,80004b56 <__muldf3+0x202>
80004ae6:	59 a2 0c 10 	st.w [%sp]76,%d2
80004aea:	82 32       	mov %d2,3
80004aec:	59 a3 08 10 	st.w [%sp]72,%d3
80004af0:	d9 a4 3c 00 	lea %a4,[%sp]60
80004af4:	59 a2 3c 00 	st.w [%sp]60,%d2
80004af8:	1d ff 4d ff 	j 80004992 <__muldf3+0x3e>
80004afc:	7b 00 00 71 	movh %d7,4096
80004b00:	0b 27 30 41 	lt.u %d4,%d7,%d2
80004b04:	0b 27 70 42 	or.eq %d4,%d7,%d2
80004b08:	df 04 e9 ff 	jne %d4,0,80004ada <__muldf3+0x186>
80004b0c:	77 32 80 20 	dextr %d2,%d2,%d3,1
80004b10:	c2 f0       	add %d0,-1
80004b12:	06 13       	sh %d3,1
80004b14:	ff 05 06 00 	jge %d5,0,80004b20 <__muldf3+0x1cc>
80004b18:	8f 13 40 11 	or %d1,%d3,1
80004b1c:	0b 21 10 28 	mov %e2,%d1,%d2
80004b20:	0b 72 00 41 	eq %d4,%d2,%d7
80004b24:	b7 04 01 40 	insert %d4,%d4,0,0,1
80004b28:	77 65 80 50 	dextr %d5,%d5,%d6,1
80004b2c:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
80004b30:	06 16       	sh %d6,1
80004b32:	df 04 ed ff 	jne %d4,0,80004b0c <__muldf3+0x1b8>
80004b36:	59 a0 04 10 	st.w [%sp]68,%d0
80004b3a:	1d ff d0 ff 	j 80004ada <__muldf3+0x186>
80004b3e:	59 aa 18 00 	st.w [%sp]24,%d10
80004b42:	d9 a4 14 00 	lea %a4,[%sp]20
80004b46:	1d ff 26 ff 	j 80004992 <__muldf3+0x3e>
80004b4a:	59 aa 2c 00 	st.w [%sp]44,%d10
80004b4e:	d9 a4 28 00 	lea %a4,[%sp]40
80004b52:	1d ff 20 ff 	j 80004992 <__muldf3+0x3e>
80004b56:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80004b5a:	a6 65       	or %d5,%d6
80004b5c:	8b 05 20 52 	ne %d5,%d5,0
80004b60:	0f 45 e0 40 	andn %d4,%d5,%d4
80004b64:	df 04 c1 7f 	jeq %d4,0,80004ae6 <__muldf3+0x192>
80004b68:	8b 03 88 30 	addx %d3,%d3,128
80004b6c:	8b 02 a0 20 	addc %d2,%d2,0
80004b70:	8f f3 cf 31 	andn %d3,%d3,255
80004b74:	1d ff b9 ff 	j 80004ae6 <__muldf3+0x192>

80004b78 <__gedf2>:
80004b78:	20 38       	sub.a %sp,56
80004b7a:	d9 a5 10 00 	lea %a5,[%sp]16
80004b7e:	40 a4       	mov.aa %a4,%sp
80004b80:	89 a4 40 09 	st.d [%sp],%e4
80004b84:	89 a6 48 09 	st.d [%sp]8,%e6
80004b88:	6d 00 79 01 	call 80004e7a <__unpack_d>
80004b8c:	d9 a5 24 00 	lea %a5,[%sp]36
80004b90:	d9 a4 08 00 	lea %a4,[%sp]8
80004b94:	6d 00 73 01 	call 80004e7a <__unpack_d>
80004b98:	19 a3 10 00 	ld.w %d3,[%sp]16
80004b9c:	82 f2       	mov %d2,-1
80004b9e:	bf 23 0c 80 	jlt.u %d3,2,80004bb6 <__gedf2+0x3e>
80004ba2:	19 a3 24 00 	ld.w %d3,[%sp]36
80004ba6:	bf 23 08 80 	jlt.u %d3,2,80004bb6 <__gedf2+0x3e>
80004baa:	d9 a5 24 00 	lea %a5,[%sp]36
80004bae:	d9 a4 10 00 	lea %a4,[%sp]16
80004bb2:	6d 00 c3 01 	call 80004f38 <__fpcmp_parts_d>
80004bb6:	00 90       	ret 

80004bb8 <__fixdfsi>:
80004bb8:	20 20       	sub.a %sp,32
80004bba:	d9 a5 0c 00 	lea %a5,[%sp]12
80004bbe:	d9 a4 04 00 	lea %a4,[%sp]4
80004bc2:	89 a4 44 09 	st.d [%sp]4,%e4
80004bc6:	6d 00 5a 01 	call 80004e7a <__unpack_d>
80004bca:	19 a3 0c 00 	ld.w %d3,[%sp]12
80004bce:	82 02       	mov %d2,0
80004bd0:	bf 33 25 80 	jlt.u %d3,3,80004c1a <__fixdfsi+0x62>
80004bd4:	df 43 29 00 	jeq %d3,4,80004c26 <__fixdfsi+0x6e>
80004bd8:	19 a3 14 00 	ld.w %d3,[%sp]20
80004bdc:	bf 03 1f 00 	jlt %d3,0,80004c1a <__fixdfsi+0x62>
80004be0:	8b f3 41 22 	lt %d2,%d3,31
80004be4:	19 a6 10 00 	ld.w %d6,[%sp]16
80004be8:	df 02 1a 00 	jeq %d2,0,80004c1c <__fixdfsi+0x64>
80004bec:	8b c3 03 21 	rsub %d2,%d3,60
80004bf0:	19 a5 1c 00 	ld.w %d5,[%sp]28
80004bf4:	19 a4 18 00 	ld.w %d4,[%sp]24
80004bf8:	8b 02 82 32 	ge %d3,%d2,32
80004bfc:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
80004c00:	ab 05 a0 53 	seln %d5,%d3,%d5,0
80004c04:	8f f2 01 31 	and %d3,%d2,31
80004c08:	8b 03 02 21 	rsub %d2,%d3,32
80004c0c:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
80004c10:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
80004c14:	df 06 03 00 	jeq %d6,0,80004c1a <__fixdfsi+0x62>
80004c18:	32 52       	rsub %d2
80004c1a:	00 90       	ret 
80004c1c:	82 f2       	mov %d2,-1
80004c1e:	06 f2       	sh %d2,-1
80004c20:	ab 12 00 26 	cadd %d2,%d6,%d2,1
80004c24:	00 90       	ret 
80004c26:	19 a3 10 00 	ld.w %d3,[%sp]16
80004c2a:	82 f2       	mov %d2,-1
80004c2c:	06 f2       	sh %d2,-1
80004c2e:	ab 12 00 23 	cadd %d2,%d3,%d2,1
80004c32:	00 90       	ret 

80004c34 <__make_dp>:
80004c34:	20 18       	sub.a %sp,24
80004c36:	09 a2 d8 09 	ld.da %a2,[%sp]24
80004c3a:	d9 a4 04 00 	lea %a4,[%sp]4
80004c3e:	59 a4 04 00 	st.w [%sp]4,%d4
80004c42:	59 a5 08 00 	st.w [%sp]8,%d5
80004c46:	59 a6 0c 00 	st.w [%sp]12,%d6
80004c4a:	89 a2 d0 09 	st.da [%sp]16,%a2
80004c4e:	6d 00 47 00 	call 80004cdc <__pack_d>
80004c52:	00 90       	ret 

80004c54 <__unpack_f>:
80004c54:	54 42       	ld.w %d2,[%a4]
80004c56:	8f 12 1e 50 	sh %d5,%d2,-31
80004c5a:	37 02 e8 3b 	extr.u %d3,%d2,23,8
80004c5e:	b7 02 89 4b 	insert %d4,%d2,0,23,9
80004c62:	59 55 04 00 	st.w [%a5]4,%d5
80004c66:	df 03 16 80 	jne %d3,0,80004c92 <__unpack_f+0x3e>
80004c6a:	df 04 25 00 	jeq %d4,0,80004cb4 <__unpack_f+0x60>
80004c6e:	82 33       	mov %d3,3
80004c70:	8f 74 00 20 	sh %d2,%d4,7
80004c74:	7b 00 00 54 	movh %d5,16384
80004c78:	74 53       	st.w [%a5],%d3
80004c7a:	3b 10 f8 3f 	mov %d3,-127
80004c7e:	06 12       	sh %d2,1
80004c80:	02 34       	mov %d4,%d3
80004c82:	c2 f3       	add %d3,-1
80004c84:	3f 52 fd ff 	jlt.u %d2,%d5,80004c7e <__unpack_f+0x2a>
80004c88:	59 54 08 00 	st.w [%a5]8,%d4
80004c8c:	59 52 0c 00 	st.w [%a5]12,%d2
80004c90:	00 90       	ret 
80004c92:	8b f3 2f 52 	ne %d5,%d3,255
80004c96:	df 05 12 00 	jeq %d5,0,80004cba <__unpack_f+0x66>
80004c9a:	82 32       	mov %d2,3
80004c9c:	1b 13 f8 3f 	addi %d3,%d3,-127
80004ca0:	74 52       	st.w [%a5],%d2
80004ca2:	8f 74 00 20 	sh %d2,%d4,7
80004ca6:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
80004caa:	59 53 08 00 	st.w [%a5]8,%d3
80004cae:	59 52 0c 00 	st.w [%a5]12,%d2
80004cb2:	00 90       	ret 
80004cb4:	82 22       	mov %d2,2
80004cb6:	74 52       	st.w [%a5],%d2
80004cb8:	00 90       	ret 
80004cba:	df 04 05 80 	jne %d4,0,80004cc4 <__unpack_f+0x70>
80004cbe:	82 42       	mov %d2,4
80004cc0:	74 52       	st.w [%a5],%d2
80004cc2:	00 90       	ret 
80004cc4:	37 02 61 3b 	extr.u %d3,%d2,22,1
80004cc8:	06 72       	sh %d2,7
80004cca:	74 53       	st.w [%a5],%d3
80004ccc:	7b 00 00 32 	movh %d3,8192
80004cd0:	1b 03 f8 3f 	addi %d3,%d3,-128
80004cd4:	26 32       	and %d2,%d3
80004cd6:	59 52 0c 00 	st.w [%a5]12,%d2
80004cda:	00 90       	ret 

80004cdc <__pack_d>:
80004cdc:	54 44       	ld.w %d4,[%a4]
80004cde:	19 43 0c 00 	ld.w %d3,[%a4]12
80004ce2:	19 42 10 00 	ld.w %d2,[%a4]16
80004ce6:	19 41 04 00 	ld.w %d1,[%a4]4
80004cea:	bf 24 56 80 	jlt.u %d4,2,80004d96 <__pack_d+0xba>
80004cee:	7b 00 ff 57 	movh %d5,32752
80004cf2:	d2 06       	mov %e6,0
80004cf4:	df 44 0b 00 	jeq %d4,4,80004d0a <__pack_d+0x2e>
80004cf8:	0f 23 a0 50 	or %d5,%d3,%d2
80004cfc:	8b 05 00 02 	eq %d0,%d5,0
80004d00:	8b 24 e0 04 	or.eq %d0,%d4,2
80004d04:	82 05       	mov %d5,0
80004d06:	df 00 0c 00 	jeq %d0,0,80004d1e <__pack_d+0x42>
80004d0a:	0b 10 00 28 	mov %e2,%d1
80004d0e:	a6 75       	or %d5,%d7
80004d10:	8f f2 01 20 	sh %d2,%d2,31
80004d14:	0f 25 a0 40 	or %d4,%d5,%d2
80004d18:	02 43       	mov %d3,%d4
80004d1a:	02 62       	mov %d2,%d6
80004d1c:	00 90       	ret 
80004d1e:	19 44 08 00 	ld.w %d4,[%a4]8
80004d22:	3b 20 c0 0f 	mov %d0,-1022
80004d26:	3f 04 41 00 	jlt %d4,%d0,80004da8 <__pack_d+0xcc>
80004d2a:	3b 00 40 00 	mov %d0,1024
80004d2e:	7b 00 ff 57 	movh %d5,32752
80004d32:	7f 04 ec 7f 	jge %d4,%d0,80004d0a <__pack_d+0x2e>
80004d36:	8f f3 0f 51 	and %d5,%d3,255
80004d3a:	8b 05 28 52 	ne %d5,%d5,128
80004d3e:	df 05 1b 00 	jeq %d5,0,80004d74 <__pack_d+0x98>
80004d42:	8b f3 87 30 	addx %d3,%d3,127
80004d46:	8b 02 a0 20 	addc %d2,%d2,0
80004d4a:	7b 00 00 52 	movh %d5,8192
80004d4e:	0b 25 30 61 	lt.u %d6,%d5,%d2
80004d52:	0b 25 70 62 	or.eq %d6,%d5,%d2
80004d56:	df 06 19 80 	jne %d6,0,80004d88 <__pack_d+0xac>
80004d5a:	1b f4 3f 40 	addi %d4,%d4,1023
80004d5e:	0b 40 00 48 	mov %e4,%d4
80004d62:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004d66:	06 82       	sh %d2,-8
80004d68:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80004d6c:	8f 44 01 50 	sh %d5,%d4,20
80004d70:	1d ff cd ff 	j 80004d0a <__pack_d+0x2e>
80004d74:	8f 03 10 51 	and %d5,%d3,256
80004d78:	df 05 e9 7f 	jeq %d5,0,80004d4a <__pack_d+0x6e>
80004d7c:	8b 03 88 30 	addx %d3,%d3,128
80004d80:	8b 02 a0 20 	addc %d2,%d2,0
80004d84:	1d ff e3 ff 	j 80004d4a <__pack_d+0x6e>
80004d88:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004d8c:	1b 04 40 40 	addi %d4,%d4,1024
80004d90:	06 f2       	sh %d2,-1
80004d92:	1d ff e6 ff 	j 80004d5e <__pack_d+0x82>
80004d96:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004d9a:	06 82       	sh %d2,-8
80004d9c:	b7 12 8d 79 	insert %d7,%d2,1,19,13
80004da0:	7b 00 ff 57 	movh %d5,32752
80004da4:	1d ff b3 ff 	j 80004d0a <__pack_d+0x2e>
80004da8:	0b 40 80 40 	sub %d4,%d0,%d4
80004dac:	8b 94 83 02 	ge %d0,%d4,57
80004db0:	df 00 ad ff 	jne %d0,0,80004d0a <__pack_d+0x2e>
80004db4:	8b 04 82 52 	ge %d5,%d4,32
80004db8:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
80004dbc:	ab 02 a0 75 	seln %d7,%d5,%d2,0
80004dc0:	8f f4 01 51 	and %d5,%d4,31
80004dc4:	8b 05 02 61 	rsub %d6,%d5,32
80004dc8:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
80004dcc:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
80004dd0:	8b 04 82 82 	ge %d8,%d4,32
80004dd4:	32 55       	rsub %d5
80004dd6:	02 60       	mov %d0,%d6
80004dd8:	8f f4 01 41 	and %d4,%d4,31
80004ddc:	82 f6       	mov %d6,-1
80004dde:	0f 57 00 70 	sh %d7,%d7,%d5
80004de2:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
80004de6:	0f 46 00 40 	sh %d4,%d6,%d4
80004dea:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
80004dee:	ab 04 a0 48 	seln %d4,%d8,%d4,0
80004df2:	0f 43 e0 30 	andn %d3,%d3,%d4
80004df6:	0f 52 e0 20 	andn %d2,%d2,%d5
80004dfa:	a6 32       	or %d2,%d3
80004dfc:	02 03       	mov %d3,%d0
80004dfe:	8b 02 00 35 	or.ne %d3,%d2,0
80004e02:	8f f3 0f 51 	and %d5,%d3,255
80004e06:	82 12       	mov %d2,1
80004e08:	8b 05 08 24 	and.eq %d2,%d5,128
80004e0c:	02 74       	mov %d4,%d7
80004e0e:	df 02 14 80 	jne %d2,0,80004e36 <__pack_d+0x15a>
80004e12:	8b f3 87 30 	addx %d3,%d3,127
80004e16:	8b 07 a0 20 	addc %d2,%d7,0
80004e1a:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004e1e:	7b 00 00 31 	movh %d3,4096
80004e22:	8f 82 1f 70 	sh %d7,%d2,-8
80004e26:	0b 32 50 21 	ge.u %d2,%d2,%d3
80004e2a:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004e2e:	8f 42 01 50 	sh %d5,%d2,20
80004e32:	1d ff 6c ff 	j 80004d0a <__pack_d+0x2e>
80004e36:	8b 03 88 60 	addx %d6,%d3,128
80004e3a:	8b 07 a0 20 	addc %d2,%d7,0
80004e3e:	7b 00 00 a1 	movh %d10,4096
80004e42:	8f 82 1f 70 	sh %d7,%d2,-8
80004e46:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80004e4a:	0b a2 50 21 	ge.u %d2,%d2,%d10
80004e4e:	53 12 40 80 	mul.u %e8,%d2,1
80004e52:	8f 03 10 01 	and %d0,%d3,256
80004e56:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004e5a:	8f 48 01 50 	sh %d5,%d8,20
80004e5e:	df 00 56 ff 	jne %d0,0,80004d0a <__pack_d+0x2e>
80004e62:	8f 84 1f 70 	sh %d7,%d4,-8
80004e66:	0b a4 50 21 	ge.u %d2,%d4,%d10
80004e6a:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80004e6e:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004e72:	8f 42 01 50 	sh %d5,%d2,20
80004e76:	1d ff 4a ff 	j 80004d0a <__pack_d+0x2e>

80004e7a <__unpack_d>:
80004e7a:	09 48 40 09 	ld.d %e8,[%a4]
80004e7e:	3b f0 7f 00 	mov %d0,2047
80004e82:	8f 19 1e 70 	sh %d7,%d9,-31
80004e86:	37 09 6b 5a 	extr.u %d5,%d9,20,11
80004e8a:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80004e8e:	59 57 04 00 	st.w [%a5]4,%d7
80004e92:	df 05 26 80 	jne %d5,0,80004ede <__unpack_d+0x64>
80004e96:	8b 08 20 22 	ne %d2,%d8,0
80004e9a:	8b 06 00 25 	or.ne %d2,%d6,0
80004e9e:	df 02 33 00 	jeq %d2,0,80004f04 <__unpack_d+0x8a>
80004ea2:	82 32       	mov %d2,3
80004ea4:	77 86 00 34 	dextr %d3,%d6,%d8,8
80004ea8:	8f 88 00 40 	sh %d4,%d8,8
80004eac:	74 52       	st.w [%a5],%d2
80004eae:	3b 10 c0 5f 	mov %d5,-1023
80004eb2:	7b 00 00 61 	movh %d6,4096
80004eb6:	77 43 80 30 	dextr %d3,%d3,%d4,1
80004eba:	02 57       	mov %d7,%d5
80004ebc:	0b 63 00 21 	eq %d2,%d3,%d6
80004ec0:	b7 02 01 20 	insert %d2,%d2,0,0,1
80004ec4:	06 14       	sh %d4,1
80004ec6:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80004eca:	c2 f5       	add %d5,-1
80004ecc:	df 02 f5 ff 	jne %d2,0,80004eb6 <__unpack_d+0x3c>
80004ed0:	59 57 08 00 	st.w [%a5]8,%d7
80004ed4:	59 54 0c 00 	st.w [%a5]12,%d4
80004ed8:	59 53 10 00 	st.w [%a5]16,%d3
80004edc:	00 90       	ret 
80004ede:	5f 05 16 00 	jeq %d5,%d0,80004f0a <__unpack_d+0x90>
80004ee2:	82 32       	mov %d2,3
80004ee4:	1b 15 c0 5f 	addi %d5,%d5,-1023
80004ee8:	8f 88 00 40 	sh %d4,%d8,8
80004eec:	74 52       	st.w [%a5],%d2
80004eee:	77 86 00 24 	dextr %d2,%d6,%d8,8
80004ef2:	59 55 08 00 	st.w [%a5]8,%d5
80004ef6:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80004efa:	59 54 0c 00 	st.w [%a5]12,%d4
80004efe:	59 52 10 00 	st.w [%a5]16,%d2
80004f02:	00 90       	ret 
80004f04:	82 22       	mov %d2,2
80004f06:	74 52       	st.w [%a5],%d2
80004f08:	00 90       	ret 
80004f0a:	8b 08 20 52 	ne %d5,%d8,0
80004f0e:	8b 06 00 55 	or.ne %d5,%d6,0
80004f12:	df 05 05 80 	jne %d5,0,80004f1c <__unpack_d+0xa2>
80004f16:	82 42       	mov %d2,4
80004f18:	74 52       	st.w [%a5],%d2
80004f1a:	00 90       	ret 
80004f1c:	77 89 00 34 	dextr %d3,%d9,%d8,8
80004f20:	37 09 e1 49 	extr.u %d4,%d9,19,1
80004f24:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80004f28:	8f 88 00 20 	sh %d2,%d8,8
80004f2c:	74 54       	st.w [%a5],%d4
80004f2e:	59 52 0c 00 	st.w [%a5]12,%d2
80004f32:	59 53 10 00 	st.w [%a5]16,%d3
80004f36:	00 90       	ret 

80004f38 <__fpcmp_parts_d>:
80004f38:	54 43       	ld.w %d3,[%a4]
80004f3a:	82 12       	mov %d2,1
80004f3c:	bf 23 45 80 	jlt.u %d3,2,80004fc6 <__fpcmp_parts_d+0x8e>
80004f40:	54 54       	ld.w %d4,[%a5]
80004f42:	bf 24 42 80 	jlt.u %d4,2,80004fc6 <__fpcmp_parts_d+0x8e>
80004f46:	8b 44 00 52 	eq %d5,%d4,4
80004f4a:	8b 43 00 54 	and.eq %d5,%d3,4
80004f4e:	df 05 50 80 	jne %d5,0,80004fee <__fpcmp_parts_d+0xb6>
80004f52:	df 43 45 00 	jeq %d3,4,80004fdc <__fpcmp_parts_d+0xa4>
80004f56:	df 44 3d 00 	jeq %d4,4,80004fd0 <__fpcmp_parts_d+0x98>
80004f5a:	8b 24 00 52 	eq %d5,%d4,2
80004f5e:	8b 23 00 54 	and.eq %d5,%d3,2
80004f62:	82 02       	mov %d2,0
80004f64:	df 05 31 80 	jne %d5,0,80004fc6 <__fpcmp_parts_d+0x8e>
80004f68:	df 23 34 00 	jeq %d3,2,80004fd0 <__fpcmp_parts_d+0x98>
80004f6c:	19 42 04 00 	ld.w %d2,[%a4]4
80004f70:	df 24 2c 00 	jeq %d4,2,80004fc8 <__fpcmp_parts_d+0x90>
80004f74:	19 53 04 00 	ld.w %d3,[%a5]4
80004f78:	5f 23 28 80 	jne %d3,%d2,80004fc8 <__fpcmp_parts_d+0x90>
80004f7c:	19 44 08 00 	ld.w %d4,[%a4]8
80004f80:	19 53 08 00 	ld.w %d3,[%a5]8
80004f84:	3f 43 22 00 	jlt %d3,%d4,80004fc8 <__fpcmp_parts_d+0x90>
80004f88:	3f 34 2f 00 	jlt %d4,%d3,80004fe6 <__fpcmp_parts_d+0xae>
80004f8c:	19 45 10 00 	ld.w %d5,[%a4]16
80004f90:	19 56 10 00 	ld.w %d6,[%a5]16
80004f94:	19 40 0c 00 	ld.w %d0,[%a4]12
80004f98:	0b 65 00 41 	eq %d4,%d5,%d6
80004f9c:	19 57 0c 00 	ld.w %d7,[%a5]12
80004fa0:	02 43       	mov %d3,%d4
80004fa2:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
80004fa6:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
80004faa:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
80004fae:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
80004fb2:	82 f5       	mov %d5,-1
80004fb4:	ab 15 a0 52 	seln %d5,%d2,%d5,1
80004fb8:	82 16       	mov %d6,1
80004fba:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
80004fbe:	ab 05 a0 44 	seln %d4,%d4,%d5,0
80004fc2:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
80004fc6:	00 90       	ret 
80004fc8:	82 13       	mov %d3,1
80004fca:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
80004fce:	00 90       	ret 
80004fd0:	19 53 04 00 	ld.w %d3,[%a5]4
80004fd4:	82 f2       	mov %d2,-1
80004fd6:	ab 12 a0 23 	seln %d2,%d3,%d2,1
80004fda:	00 90       	ret 
80004fdc:	19 43 04 00 	ld.w %d3,[%a4]4
80004fe0:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
80004fe4:	00 90       	ret 
80004fe6:	82 f3       	mov %d3,-1
80004fe8:	ab 13 a0 22 	seln %d2,%d2,%d3,1
80004fec:	00 90       	ret 
80004fee:	19 53 04 00 	ld.w %d3,[%a5]4
80004ff2:	19 42 04 00 	ld.w %d2,[%a4]4
80004ff6:	0b 23 80 20 	sub %d2,%d3,%d2
80004ffa:	00 90       	ret 

80004ffc <__do_global_ctors_aux>:
80004ffc:	91 00 00 28 	movh.a %a2,32768
80005000:	d9 22 30 05 	lea %a2,[%a2]20528 <80005030 <__CTOR_END__>>
80005004:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80005008:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
8000500c:	df f2 0a 00 	jeq %d2,-1,80005020 <__do_global_ctors_aux+0x24>
80005010:	40 3c       	mov.aa %a12,%a3
80005012:	60 22       	mov.a %a2,%d2
80005014:	b0 cc       	add.a %a12,-4
80005016:	2d 02 00 00 	calli %a2
8000501a:	54 c2       	ld.w %d2,[%a12]
8000501c:	df f2 fb ff 	jne %d2,-1,80005012 <__do_global_ctors_aux+0x16>
80005020:	00 90       	ret 
	...
