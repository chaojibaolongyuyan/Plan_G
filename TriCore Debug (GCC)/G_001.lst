
G_001.elf:     file format elf32-tricore

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .CPU3.ustack  00000800  40014e00  40014e00  000004d4  2**0
                  ALLOC
  1 .CPU3.istack  00000400  40015700  40015700  000004d4  2**0
                  ALLOC
  2 .CPU3.csa     00002000  40015c00  40015c00  000004d4  2**0
                  ALLOC
  3 .CPU2.ustack  00000800  50014e00  50014e00  000004d4  2**0
                  ALLOC
  4 .CPU2.istack  00000400  50015700  50015700  000004d4  2**0
                  ALLOC
  5 .CPU2.csa     00002000  50015c00  50015c00  000004d4  2**0
                  ALLOC
  6 .CPU1.ustack  00000800  60038e00  60038e00  000004d4  2**0
                  ALLOC
  7 .CPU1.istack  00000400  60039700  60039700  000004d4  2**0
                  ALLOC
  8 .CPU1.csa     00002000  60039c00  60039c00  000004d4  2**0
                  ALLOC
  9 .CPU0.ustack  00000800  70038e00  70038e00  000004d4  2**0
                  ALLOC
 10 .CPU0.istack  00000400  70039700  70039700  000004d4  2**0
                  ALLOC
 11 .CPU0.csa     00002000  70039c00  70039c00  000004d4  2**0
                  ALLOC
 12 .start_tc0    0000000c  a0000000  a0000000  00005926  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .traptab_tc0  00000100  80000100  80000100  000004e0  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 14 .traptab_tc1  00000100  80300000  80300000  00005040  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 15 .traptab_tc2  00000100  80600000  80600000  00005340  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 16 .traptab_tc3  00000100  80900000  80900000  00005640  2**5
                  CONTENTS, ALLOC, LOAD, CODE
 17 .start_tc1    0000000c  a0300100  a0300100  00005932  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .start_tc2    0000000c  a0600100  a0600100  0000593e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .start_tc3    0000000c  a0900100  a0900100  0000594a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .inttab_tc0_000 00000000  802fe000  802fe000  000068f8  2**0
                  CONTENTS
 21 .inttab_tc0_001 00000000  802fe020  802fe020  000068f8  2**0
                  CONTENTS
 22 .inttab_tc0_002 0000000e  802fe040  802fe040  00005010  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .inttab_tc0_003 0000000e  802fe060  802fe060  0000501e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .inttab_tc0_004 00000000  802fe080  802fe080  000068f8  2**0
                  CONTENTS
 25 .inttab_tc0_005 00000000  802fe0a0  802fe0a0  000068f8  2**0
                  CONTENTS
 26 .inttab_tc0_006 00000000  802fe0c0  802fe0c0  000068f8  2**0
                  CONTENTS
 27 .inttab_tc0_007 00000000  802fe0e0  802fe0e0  000068f8  2**0
                  CONTENTS
 28 .inttab_tc0_008 00000000  802fe100  802fe100  000068f8  2**0
                  CONTENTS
 29 .inttab_tc0_009 00000000  802fe120  802fe120  000068f8  2**0
                  CONTENTS
 30 .inttab_tc0_00A 00000000  802fe140  802fe140  000068f8  2**0
                  CONTENTS
 31 .inttab_tc0_00B 00000000  802fe160  802fe160  000068f8  2**0
                  CONTENTS
 32 .inttab_tc0_00C 00000000  802fe180  802fe180  000068f8  2**0
                  CONTENTS
 33 .inttab_tc0_00D 00000000  802fe1a0  802fe1a0  000068f8  2**0
                  CONTENTS
 34 .inttab_tc0_00E 00000000  802fe1c0  802fe1c0  000068f8  2**0
                  CONTENTS
 35 .inttab_tc0_00F 00000000  802fe1e0  802fe1e0  000068f8  2**0
                  CONTENTS
 36 .inttab_tc0_010 00000000  802fe200  802fe200  000068f8  2**0
                  CONTENTS
 37 .inttab_tc0_011 00000000  802fe220  802fe220  000068f8  2**0
                  CONTENTS
 38 .inttab_tc0_012 00000000  802fe240  802fe240  000068f8  2**0
                  CONTENTS
 39 .inttab_tc0_013 00000000  802fe260  802fe260  000068f8  2**0
                  CONTENTS
 40 .inttab_tc0_014 00000000  802fe280  802fe280  000068f8  2**0
                  CONTENTS
 41 .inttab_tc0_015 00000000  802fe2a0  802fe2a0  000068f8  2**0
                  CONTENTS
 42 .inttab_tc0_016 00000000  802fe2c0  802fe2c0  000068f8  2**0
                  CONTENTS
 43 .inttab_tc0_017 00000000  802fe2e0  802fe2e0  000068f8  2**0
                  CONTENTS
 44 .inttab_tc0_018 00000000  802fe300  802fe300  000068f8  2**0
                  CONTENTS
 45 .inttab_tc0_019 00000000  802fe320  802fe320  000068f8  2**0
                  CONTENTS
 46 .inttab_tc0_01A 00000000  802fe340  802fe340  000068f8  2**0
                  CONTENTS
 47 .inttab_tc0_01B 00000000  802fe360  802fe360  000068f8  2**0
                  CONTENTS
 48 .inttab_tc0_01C 00000000  802fe380  802fe380  000068f8  2**0
                  CONTENTS
 49 .inttab_tc0_01D 00000000  802fe3a0  802fe3a0  000068f8  2**0
                  CONTENTS
 50 .inttab_tc0_01E 00000000  802fe3c0  802fe3c0  000068f8  2**0
                  CONTENTS
 51 .inttab_tc0_01F 00000000  802fe3e0  802fe3e0  000068f8  2**0
                  CONTENTS
 52 .inttab_tc0_020 00000000  802fe400  802fe400  000068f8  2**0
                  CONTENTS
 53 .inttab_tc0_021 00000000  802fe420  802fe420  000068f8  2**0
                  CONTENTS
 54 .inttab_tc0_022 00000000  802fe440  802fe440  000068f8  2**0
                  CONTENTS
 55 .inttab_tc0_023 00000000  802fe460  802fe460  000068f8  2**0
                  CONTENTS
 56 .inttab_tc0_024 00000000  802fe480  802fe480  000068f8  2**0
                  CONTENTS
 57 .inttab_tc0_025 00000000  802fe4a0  802fe4a0  000068f8  2**0
                  CONTENTS
 58 .inttab_tc0_026 00000000  802fe4c0  802fe4c0  000068f8  2**0
                  CONTENTS
 59 .inttab_tc0_027 00000000  802fe4e0  802fe4e0  000068f8  2**0
                  CONTENTS
 60 .inttab_tc0_028 00000000  802fe500  802fe500  000068f8  2**0
                  CONTENTS
 61 .inttab_tc0_029 00000000  802fe520  802fe520  000068f8  2**0
                  CONTENTS
 62 .inttab_tc0_02A 00000000  802fe540  802fe540  000068f8  2**0
                  CONTENTS
 63 .inttab_tc0_02B 00000000  802fe560  802fe560  000068f8  2**0
                  CONTENTS
 64 .inttab_tc0_02C 00000000  802fe580  802fe580  000068f8  2**0
                  CONTENTS
 65 .inttab_tc0_02D 00000000  802fe5a0  802fe5a0  000068f8  2**0
                  CONTENTS
 66 .inttab_tc0_02E 00000000  802fe5c0  802fe5c0  000068f8  2**0
                  CONTENTS
 67 .inttab_tc0_02F 00000000  802fe5e0  802fe5e0  000068f8  2**0
                  CONTENTS
 68 .inttab_tc0_030 00000000  802fe600  802fe600  000068f8  2**0
                  CONTENTS
 69 .inttab_tc0_031 00000000  802fe620  802fe620  000068f8  2**0
                  CONTENTS
 70 .inttab_tc0_032 00000000  802fe640  802fe640  000068f8  2**0
                  CONTENTS
 71 .inttab_tc0_033 00000000  802fe660  802fe660  000068f8  2**0
                  CONTENTS
 72 .inttab_tc0_034 00000000  802fe680  802fe680  000068f8  2**0
                  CONTENTS
 73 .inttab_tc0_035 00000000  802fe6a0  802fe6a0  000068f8  2**0
                  CONTENTS
 74 .inttab_tc0_036 00000000  802fe6c0  802fe6c0  000068f8  2**0
                  CONTENTS
 75 .inttab_tc0_037 00000000  802fe6e0  802fe6e0  000068f8  2**0
                  CONTENTS
 76 .inttab_tc0_038 00000000  802fe700  802fe700  000068f8  2**0
                  CONTENTS
 77 .inttab_tc0_039 00000000  802fe720  802fe720  000068f8  2**0
                  CONTENTS
 78 .inttab_tc0_03A 00000000  802fe740  802fe740  000068f8  2**0
                  CONTENTS
 79 .inttab_tc0_03B 00000000  802fe760  802fe760  000068f8  2**0
                  CONTENTS
 80 .inttab_tc0_03C 00000000  802fe780  802fe780  000068f8  2**0
                  CONTENTS
 81 .inttab_tc0_03D 00000000  802fe7a0  802fe7a0  000068f8  2**0
                  CONTENTS
 82 .inttab_tc0_03E 00000000  802fe7c0  802fe7c0  000068f8  2**0
                  CONTENTS
 83 .inttab_tc0_03F 00000000  802fe7e0  802fe7e0  000068f8  2**0
                  CONTENTS
 84 .inttab_tc0_040 00000000  802fe800  802fe800  000068f8  2**0
                  CONTENTS
 85 .inttab_tc0_041 00000000  802fe820  802fe820  000068f8  2**0
                  CONTENTS
 86 .inttab_tc0_042 00000000  802fe840  802fe840  000068f8  2**0
                  CONTENTS
 87 .inttab_tc0_043 00000000  802fe860  802fe860  000068f8  2**0
                  CONTENTS
 88 .inttab_tc0_044 00000000  802fe880  802fe880  000068f8  2**0
                  CONTENTS
 89 .inttab_tc0_045 00000000  802fe8a0  802fe8a0  000068f8  2**0
                  CONTENTS
 90 .inttab_tc0_046 00000000  802fe8c0  802fe8c0  000068f8  2**0
                  CONTENTS
 91 .inttab_tc0_047 00000000  802fe8e0  802fe8e0  000068f8  2**0
                  CONTENTS
 92 .inttab_tc0_048 00000000  802fe900  802fe900  000068f8  2**0
                  CONTENTS
 93 .inttab_tc0_049 00000000  802fe920  802fe920  000068f8  2**0
                  CONTENTS
 94 .inttab_tc0_04A 00000000  802fe940  802fe940  000068f8  2**0
                  CONTENTS
 95 .inttab_tc0_04B 00000000  802fe960  802fe960  000068f8  2**0
                  CONTENTS
 96 .inttab_tc0_04C 00000000  802fe980  802fe980  000068f8  2**0
                  CONTENTS
 97 .inttab_tc0_04D 00000000  802fe9a0  802fe9a0  000068f8  2**0
                  CONTENTS
 98 .inttab_tc0_04E 00000000  802fe9c0  802fe9c0  000068f8  2**0
                  CONTENTS
 99 .inttab_tc0_04F 00000000  802fe9e0  802fe9e0  000068f8  2**0
                  CONTENTS
100 .inttab_tc0_050 00000000  802fea00  802fea00  000068f8  2**0
                  CONTENTS
101 .inttab_tc0_051 00000000  802fea20  802fea20  000068f8  2**0
                  CONTENTS
102 .inttab_tc0_052 00000000  802fea40  802fea40  000068f8  2**0
                  CONTENTS
103 .inttab_tc0_053 00000000  802fea60  802fea60  000068f8  2**0
                  CONTENTS
104 .inttab_tc0_054 00000000  802fea80  802fea80  000068f8  2**0
                  CONTENTS
105 .inttab_tc0_055 00000000  802feaa0  802feaa0  000068f8  2**0
                  CONTENTS
106 .inttab_tc0_056 00000000  802feac0  802feac0  000068f8  2**0
                  CONTENTS
107 .inttab_tc0_057 00000000  802feae0  802feae0  000068f8  2**0
                  CONTENTS
108 .inttab_tc0_058 00000000  802feb00  802feb00  000068f8  2**0
                  CONTENTS
109 .inttab_tc0_059 00000000  802feb20  802feb20  000068f8  2**0
                  CONTENTS
110 .inttab_tc0_05A 00000000  802feb40  802feb40  000068f8  2**0
                  CONTENTS
111 .inttab_tc0_05B 00000000  802feb60  802feb60  000068f8  2**0
                  CONTENTS
112 .inttab_tc0_05C 00000000  802feb80  802feb80  000068f8  2**0
                  CONTENTS
113 .inttab_tc0_05D 00000000  802feba0  802feba0  000068f8  2**0
                  CONTENTS
114 .inttab_tc0_05E 00000000  802febc0  802febc0  000068f8  2**0
                  CONTENTS
115 .inttab_tc0_05F 00000000  802febe0  802febe0  000068f8  2**0
                  CONTENTS
116 .inttab_tc0_060 00000000  802fec00  802fec00  000068f8  2**0
                  CONTENTS
117 .inttab_tc0_061 00000000  802fec20  802fec20  000068f8  2**0
                  CONTENTS
118 .inttab_tc0_062 00000000  802fec40  802fec40  000068f8  2**0
                  CONTENTS
119 .inttab_tc0_063 00000000  802fec60  802fec60  000068f8  2**0
                  CONTENTS
120 .inttab_tc0_064 00000000  802fec80  802fec80  000068f8  2**0
                  CONTENTS
121 .inttab_tc0_065 00000000  802feca0  802feca0  000068f8  2**0
                  CONTENTS
122 .inttab_tc0_066 00000000  802fecc0  802fecc0  000068f8  2**0
                  CONTENTS
123 .inttab_tc0_067 00000000  802fece0  802fece0  000068f8  2**0
                  CONTENTS
124 .inttab_tc0_068 00000000  802fed00  802fed00  000068f8  2**0
                  CONTENTS
125 .inttab_tc0_069 00000000  802fed20  802fed20  000068f8  2**0
                  CONTENTS
126 .inttab_tc0_06A 00000000  802fed40  802fed40  000068f8  2**0
                  CONTENTS
127 .inttab_tc0_06B 00000000  802fed60  802fed60  000068f8  2**0
                  CONTENTS
128 .inttab_tc0_06C 00000000  802fed80  802fed80  000068f8  2**0
                  CONTENTS
129 .inttab_tc0_06D 00000000  802feda0  802feda0  000068f8  2**0
                  CONTENTS
130 .inttab_tc0_06E 00000000  802fedc0  802fedc0  000068f8  2**0
                  CONTENTS
131 .inttab_tc0_06F 00000000  802fede0  802fede0  000068f8  2**0
                  CONTENTS
132 .inttab_tc0_070 00000000  802fee00  802fee00  000068f8  2**0
                  CONTENTS
133 .inttab_tc0_071 00000000  802fee20  802fee20  000068f8  2**0
                  CONTENTS
134 .inttab_tc0_072 00000000  802fee40  802fee40  000068f8  2**0
                  CONTENTS
135 .inttab_tc0_073 00000000  802fee60  802fee60  000068f8  2**0
                  CONTENTS
136 .inttab_tc0_074 00000000  802fee80  802fee80  000068f8  2**0
                  CONTENTS
137 .inttab_tc0_075 00000000  802feea0  802feea0  000068f8  2**0
                  CONTENTS
138 .inttab_tc0_076 00000000  802feec0  802feec0  000068f8  2**0
                  CONTENTS
139 .inttab_tc0_077 00000000  802feee0  802feee0  000068f8  2**0
                  CONTENTS
140 .inttab_tc0_078 00000000  802fef00  802fef00  000068f8  2**0
                  CONTENTS
141 .inttab_tc0_079 00000000  802fef20  802fef20  000068f8  2**0
                  CONTENTS
142 .inttab_tc0_07A 00000000  802fef40  802fef40  000068f8  2**0
                  CONTENTS
143 .inttab_tc0_07B 00000000  802fef60  802fef60  000068f8  2**0
                  CONTENTS
144 .inttab_tc0_07C 00000000  802fef80  802fef80  000068f8  2**0
                  CONTENTS
145 .inttab_tc0_07D 00000000  802fefa0  802fefa0  000068f8  2**0
                  CONTENTS
146 .inttab_tc0_07E 00000000  802fefc0  802fefc0  000068f8  2**0
                  CONTENTS
147 .inttab_tc0_07F 00000000  802fefe0  802fefe0  000068f8  2**0
                  CONTENTS
148 .inttab_tc0_080 00000000  802ff000  802ff000  000068f8  2**0
                  CONTENTS
149 .inttab_tc0_081 00000000  802ff020  802ff020  000068f8  2**0
                  CONTENTS
150 .inttab_tc0_082 00000000  802ff040  802ff040  000068f8  2**0
                  CONTENTS
151 .inttab_tc0_083 00000000  802ff060  802ff060  000068f8  2**0
                  CONTENTS
152 .inttab_tc0_084 00000000  802ff080  802ff080  000068f8  2**0
                  CONTENTS
153 .inttab_tc0_085 00000000  802ff0a0  802ff0a0  000068f8  2**0
                  CONTENTS
154 .inttab_tc0_086 00000000  802ff0c0  802ff0c0  000068f8  2**0
                  CONTENTS
155 .inttab_tc0_087 00000000  802ff0e0  802ff0e0  000068f8  2**0
                  CONTENTS
156 .inttab_tc0_088 00000000  802ff100  802ff100  000068f8  2**0
                  CONTENTS
157 .inttab_tc0_089 00000000  802ff120  802ff120  000068f8  2**0
                  CONTENTS
158 .inttab_tc0_08A 00000000  802ff140  802ff140  000068f8  2**0
                  CONTENTS
159 .inttab_tc0_08B 00000000  802ff160  802ff160  000068f8  2**0
                  CONTENTS
160 .inttab_tc0_08C 00000000  802ff180  802ff180  000068f8  2**0
                  CONTENTS
161 .inttab_tc0_08D 00000000  802ff1a0  802ff1a0  000068f8  2**0
                  CONTENTS
162 .inttab_tc0_08E 00000000  802ff1c0  802ff1c0  000068f8  2**0
                  CONTENTS
163 .inttab_tc0_08F 00000000  802ff1e0  802ff1e0  000068f8  2**0
                  CONTENTS
164 .inttab_tc0_090 00000000  802ff200  802ff200  000068f8  2**0
                  CONTENTS
165 .inttab_tc0_091 00000000  802ff220  802ff220  000068f8  2**0
                  CONTENTS
166 .inttab_tc0_092 00000000  802ff240  802ff240  000068f8  2**0
                  CONTENTS
167 .inttab_tc0_093 00000000  802ff260  802ff260  000068f8  2**0
                  CONTENTS
168 .inttab_tc0_094 00000000  802ff280  802ff280  000068f8  2**0
                  CONTENTS
169 .inttab_tc0_095 00000000  802ff2a0  802ff2a0  000068f8  2**0
                  CONTENTS
170 .inttab_tc0_096 00000000  802ff2c0  802ff2c0  000068f8  2**0
                  CONTENTS
171 .inttab_tc0_097 00000000  802ff2e0  802ff2e0  000068f8  2**0
                  CONTENTS
172 .inttab_tc0_098 00000000  802ff300  802ff300  000068f8  2**0
                  CONTENTS
173 .inttab_tc0_099 00000000  802ff320  802ff320  000068f8  2**0
                  CONTENTS
174 .inttab_tc0_09A 00000000  802ff340  802ff340  000068f8  2**0
                  CONTENTS
175 .inttab_tc0_09B 00000000  802ff360  802ff360  000068f8  2**0
                  CONTENTS
176 .inttab_tc0_09C 00000000  802ff380  802ff380  000068f8  2**0
                  CONTENTS
177 .inttab_tc0_09D 00000000  802ff3a0  802ff3a0  000068f8  2**0
                  CONTENTS
178 .inttab_tc0_09E 00000000  802ff3c0  802ff3c0  000068f8  2**0
                  CONTENTS
179 .inttab_tc0_09F 00000000  802ff3e0  802ff3e0  000068f8  2**0
                  CONTENTS
180 .inttab_tc0_0A0 00000000  802ff400  802ff400  000068f8  2**0
                  CONTENTS
181 .inttab_tc0_0A1 00000000  802ff420  802ff420  000068f8  2**0
                  CONTENTS
182 .inttab_tc0_0A2 00000000  802ff440  802ff440  000068f8  2**0
                  CONTENTS
183 .inttab_tc0_0A3 00000000  802ff460  802ff460  000068f8  2**0
                  CONTENTS
184 .inttab_tc0_0A4 00000000  802ff480  802ff480  000068f8  2**0
                  CONTENTS
185 .inttab_tc0_0A5 00000000  802ff4a0  802ff4a0  000068f8  2**0
                  CONTENTS
186 .inttab_tc0_0A6 00000000  802ff4c0  802ff4c0  000068f8  2**0
                  CONTENTS
187 .inttab_tc0_0A7 00000000  802ff4e0  802ff4e0  000068f8  2**0
                  CONTENTS
188 .inttab_tc0_0A8 00000000  802ff500  802ff500  000068f8  2**0
                  CONTENTS
189 .inttab_tc0_0A9 00000000  802ff520  802ff520  000068f8  2**0
                  CONTENTS
190 .inttab_tc0_0AA 00000000  802ff540  802ff540  000068f8  2**0
                  CONTENTS
191 .inttab_tc0_0AB 00000000  802ff560  802ff560  000068f8  2**0
                  CONTENTS
192 .inttab_tc0_0AC 00000000  802ff580  802ff580  000068f8  2**0
                  CONTENTS
193 .inttab_tc0_0AD 00000000  802ff5a0  802ff5a0  000068f8  2**0
                  CONTENTS
194 .inttab_tc0_0AE 00000000  802ff5c0  802ff5c0  000068f8  2**0
                  CONTENTS
195 .inttab_tc0_0AF 00000000  802ff5e0  802ff5e0  000068f8  2**0
                  CONTENTS
196 .inttab_tc0_0B0 00000000  802ff600  802ff600  000068f8  2**0
                  CONTENTS
197 .inttab_tc0_0B1 00000000  802ff620  802ff620  000068f8  2**0
                  CONTENTS
198 .inttab_tc0_0B2 00000000  802ff640  802ff640  000068f8  2**0
                  CONTENTS
199 .inttab_tc0_0B3 00000000  802ff660  802ff660  000068f8  2**0
                  CONTENTS
200 .inttab_tc0_0B4 00000000  802ff680  802ff680  000068f8  2**0
                  CONTENTS
201 .inttab_tc0_0B5 00000000  802ff6a0  802ff6a0  000068f8  2**0
                  CONTENTS
202 .inttab_tc0_0B6 00000000  802ff6c0  802ff6c0  000068f8  2**0
                  CONTENTS
203 .inttab_tc0_0B7 00000000  802ff6e0  802ff6e0  000068f8  2**0
                  CONTENTS
204 .inttab_tc0_0B8 00000000  802ff700  802ff700  000068f8  2**0
                  CONTENTS
205 .inttab_tc0_0B9 00000000  802ff720  802ff720  000068f8  2**0
                  CONTENTS
206 .inttab_tc0_0BA 00000000  802ff740  802ff740  000068f8  2**0
                  CONTENTS
207 .inttab_tc0_0BB 00000000  802ff760  802ff760  000068f8  2**0
                  CONTENTS
208 .inttab_tc0_0BC 00000000  802ff780  802ff780  000068f8  2**0
                  CONTENTS
209 .inttab_tc0_0BD 00000000  802ff7a0  802ff7a0  000068f8  2**0
                  CONTENTS
210 .inttab_tc0_0BE 00000000  802ff7c0  802ff7c0  000068f8  2**0
                  CONTENTS
211 .inttab_tc0_0BF 00000000  802ff7e0  802ff7e0  000068f8  2**0
                  CONTENTS
212 .inttab_tc0_0C0 00000000  802ff800  802ff800  000068f8  2**0
                  CONTENTS
213 .inttab_tc0_0C1 00000000  802ff820  802ff820  000068f8  2**0
                  CONTENTS
214 .inttab_tc0_0C2 00000000  802ff840  802ff840  000068f8  2**0
                  CONTENTS
215 .inttab_tc0_0C3 00000000  802ff860  802ff860  000068f8  2**0
                  CONTENTS
216 .inttab_tc0_0C4 00000000  802ff880  802ff880  000068f8  2**0
                  CONTENTS
217 .inttab_tc0_0C5 00000000  802ff8a0  802ff8a0  000068f8  2**0
                  CONTENTS
218 .inttab_tc0_0C6 00000000  802ff8c0  802ff8c0  000068f8  2**0
                  CONTENTS
219 .inttab_tc0_0C7 00000000  802ff8e0  802ff8e0  000068f8  2**0
                  CONTENTS
220 .inttab_tc0_0C8 00000000  802ff900  802ff900  000068f8  2**0
                  CONTENTS
221 .inttab_tc0_0C9 00000000  802ff920  802ff920  000068f8  2**0
                  CONTENTS
222 .inttab_tc0_0CA 00000000  802ff940  802ff940  000068f8  2**0
                  CONTENTS
223 .inttab_tc0_0CB 00000000  802ff960  802ff960  000068f8  2**0
                  CONTENTS
224 .inttab_tc0_0CC 00000000  802ff980  802ff980  000068f8  2**0
                  CONTENTS
225 .inttab_tc0_0CD 00000000  802ff9a0  802ff9a0  000068f8  2**0
                  CONTENTS
226 .inttab_tc0_0CE 00000000  802ff9c0  802ff9c0  000068f8  2**0
                  CONTENTS
227 .inttab_tc0_0CF 00000000  802ff9e0  802ff9e0  000068f8  2**0
                  CONTENTS
228 .inttab_tc0_0D0 00000000  802ffa00  802ffa00  000068f8  2**0
                  CONTENTS
229 .inttab_tc0_0D1 00000000  802ffa20  802ffa20  000068f8  2**0
                  CONTENTS
230 .inttab_tc0_0D2 00000000  802ffa40  802ffa40  000068f8  2**0
                  CONTENTS
231 .inttab_tc0_0D3 00000000  802ffa60  802ffa60  000068f8  2**0
                  CONTENTS
232 .inttab_tc0_0D4 00000000  802ffa80  802ffa80  000068f8  2**0
                  CONTENTS
233 .inttab_tc0_0D5 00000000  802ffaa0  802ffaa0  000068f8  2**0
                  CONTENTS
234 .inttab_tc0_0D6 00000000  802ffac0  802ffac0  000068f8  2**0
                  CONTENTS
235 .inttab_tc0_0D7 00000000  802ffae0  802ffae0  000068f8  2**0
                  CONTENTS
236 .inttab_tc0_0D8 00000000  802ffb00  802ffb00  000068f8  2**0
                  CONTENTS
237 .inttab_tc0_0D9 00000000  802ffb20  802ffb20  000068f8  2**0
                  CONTENTS
238 .inttab_tc0_0DA 00000000  802ffb40  802ffb40  000068f8  2**0
                  CONTENTS
239 .inttab_tc0_0DB 00000000  802ffb60  802ffb60  000068f8  2**0
                  CONTENTS
240 .inttab_tc0_0DC 00000000  802ffb80  802ffb80  000068f8  2**0
                  CONTENTS
241 .inttab_tc0_0DD 00000000  802ffba0  802ffba0  000068f8  2**0
                  CONTENTS
242 .inttab_tc0_0DE 00000000  802ffbc0  802ffbc0  000068f8  2**0
                  CONTENTS
243 .inttab_tc0_0DF 00000000  802ffbe0  802ffbe0  000068f8  2**0
                  CONTENTS
244 .inttab_tc0_0E0 00000000  802ffc00  802ffc00  000068f8  2**0
                  CONTENTS
245 .inttab_tc0_0E1 00000000  802ffc20  802ffc20  000068f8  2**0
                  CONTENTS
246 .inttab_tc0_0E2 00000000  802ffc40  802ffc40  000068f8  2**0
                  CONTENTS
247 .inttab_tc0_0E3 00000000  802ffc60  802ffc60  000068f8  2**0
                  CONTENTS
248 .inttab_tc0_0E4 00000000  802ffc80  802ffc80  000068f8  2**0
                  CONTENTS
249 .inttab_tc0_0E5 00000000  802ffca0  802ffca0  000068f8  2**0
                  CONTENTS
250 .inttab_tc0_0E6 00000000  802ffcc0  802ffcc0  000068f8  2**0
                  CONTENTS
251 .inttab_tc0_0E7 00000000  802ffce0  802ffce0  000068f8  2**0
                  CONTENTS
252 .inttab_tc0_0E8 00000000  802ffd00  802ffd00  000068f8  2**0
                  CONTENTS
253 .inttab_tc0_0E9 00000000  802ffd20  802ffd20  000068f8  2**0
                  CONTENTS
254 .inttab_tc0_0EA 00000000  802ffd40  802ffd40  000068f8  2**0
                  CONTENTS
255 .inttab_tc0_0EB 00000000  802ffd60  802ffd60  000068f8  2**0
                  CONTENTS
256 .inttab_tc0_0EC 00000000  802ffd80  802ffd80  000068f8  2**0
                  CONTENTS
257 .inttab_tc0_0ED 00000000  802ffda0  802ffda0  000068f8  2**0
                  CONTENTS
258 .inttab_tc0_0EE 00000000  802ffdc0  802ffdc0  000068f8  2**0
                  CONTENTS
259 .inttab_tc0_0EF 00000000  802ffde0  802ffde0  000068f8  2**0
                  CONTENTS
260 .inttab_tc0_0F0 00000000  802ffe00  802ffe00  000068f8  2**0
                  CONTENTS
261 .inttab_tc0_0F1 00000000  802ffe20  802ffe20  000068f8  2**0
                  CONTENTS
262 .inttab_tc0_0F2 00000000  802ffe40  802ffe40  000068f8  2**0
                  CONTENTS
263 .inttab_tc0_0F3 00000000  802ffe60  802ffe60  000068f8  2**0
                  CONTENTS
264 .inttab_tc0_0F4 00000000  802ffe80  802ffe80  000068f8  2**0
                  CONTENTS
265 .inttab_tc0_0F5 00000000  802ffea0  802ffea0  000068f8  2**0
                  CONTENTS
266 .inttab_tc0_0F6 00000000  802ffec0  802ffec0  000068f8  2**0
                  CONTENTS
267 .inttab_tc0_0F7 00000000  802ffee0  802ffee0  000068f8  2**0
                  CONTENTS
268 .inttab_tc0_0F8 00000000  802fff00  802fff00  000068f8  2**0
                  CONTENTS
269 .inttab_tc0_0F9 00000000  802fff20  802fff20  000068f8  2**0
                  CONTENTS
270 .inttab_tc0_0FA 00000000  802fff40  802fff40  000068f8  2**0
                  CONTENTS
271 .inttab_tc0_0FB 00000000  802fff60  802fff60  000068f8  2**0
                  CONTENTS
272 .inttab_tc0_0FC 00000000  802fff80  802fff80  000068f8  2**0
                  CONTENTS
273 .inttab_tc0_0FD 00000000  802fffa0  802fffa0  000068f8  2**0
                  CONTENTS
274 .inttab_tc0_0FE 00000000  802fffc0  802fffc0  000068f8  2**0
                  CONTENTS
275 .inttab_tc0_0FF 00000000  802fffe0  802fffe0  000068f8  2**0
                  CONTENTS
276 .inttab_tc1_000 00000000  805fe000  805fe000  000068f8  2**0
                  CONTENTS
277 .inttab_tc1_001 00000000  805fe020  805fe020  000068f8  2**0
                  CONTENTS
278 .inttab_tc1_002 00000000  805fe040  805fe040  000068f8  2**0
                  CONTENTS
279 .inttab_tc1_003 00000000  805fe060  805fe060  000068f8  2**0
                  CONTENTS
280 .inttab_tc1_004 00000000  805fe080  805fe080  000068f8  2**0
                  CONTENTS
281 .inttab_tc1_005 00000000  805fe0a0  805fe0a0  000068f8  2**0
                  CONTENTS
282 .inttab_tc1_006 00000000  805fe0c0  805fe0c0  000068f8  2**0
                  CONTENTS
283 .inttab_tc1_007 00000000  805fe0e0  805fe0e0  000068f8  2**0
                  CONTENTS
284 .inttab_tc1_008 00000000  805fe100  805fe100  000068f8  2**0
                  CONTENTS
285 .inttab_tc1_009 00000000  805fe120  805fe120  000068f8  2**0
                  CONTENTS
286 .inttab_tc1_00A 00000000  805fe140  805fe140  000068f8  2**0
                  CONTENTS
287 .inttab_tc1_00B 00000000  805fe160  805fe160  000068f8  2**0
                  CONTENTS
288 .inttab_tc1_00C 00000000  805fe180  805fe180  000068f8  2**0
                  CONTENTS
289 .inttab_tc1_00D 00000000  805fe1a0  805fe1a0  000068f8  2**0
                  CONTENTS
290 .inttab_tc1_00E 00000000  805fe1c0  805fe1c0  000068f8  2**0
                  CONTENTS
291 .inttab_tc1_00F 00000000  805fe1e0  805fe1e0  000068f8  2**0
                  CONTENTS
292 .inttab_tc1_010 00000000  805fe200  805fe200  000068f8  2**0
                  CONTENTS
293 .inttab_tc1_011 00000000  805fe220  805fe220  000068f8  2**0
                  CONTENTS
294 .inttab_tc1_012 00000000  805fe240  805fe240  000068f8  2**0
                  CONTENTS
295 .inttab_tc1_013 00000000  805fe260  805fe260  000068f8  2**0
                  CONTENTS
296 .inttab_tc1_014 00000000  805fe280  805fe280  000068f8  2**0
                  CONTENTS
297 .inttab_tc1_015 00000000  805fe2a0  805fe2a0  000068f8  2**0
                  CONTENTS
298 .inttab_tc1_016 00000000  805fe2c0  805fe2c0  000068f8  2**0
                  CONTENTS
299 .inttab_tc1_017 00000000  805fe2e0  805fe2e0  000068f8  2**0
                  CONTENTS
300 .inttab_tc1_018 00000000  805fe300  805fe300  000068f8  2**0
                  CONTENTS
301 .inttab_tc1_019 00000000  805fe320  805fe320  000068f8  2**0
                  CONTENTS
302 .inttab_tc1_01A 00000000  805fe340  805fe340  000068f8  2**0
                  CONTENTS
303 .inttab_tc1_01B 00000000  805fe360  805fe360  000068f8  2**0
                  CONTENTS
304 .inttab_tc1_01C 00000000  805fe380  805fe380  000068f8  2**0
                  CONTENTS
305 .inttab_tc1_01D 00000000  805fe3a0  805fe3a0  000068f8  2**0
                  CONTENTS
306 .inttab_tc1_01E 00000000  805fe3c0  805fe3c0  000068f8  2**0
                  CONTENTS
307 .inttab_tc1_01F 00000000  805fe3e0  805fe3e0  000068f8  2**0
                  CONTENTS
308 .inttab_tc1_020 00000000  805fe400  805fe400  000068f8  2**0
                  CONTENTS
309 .inttab_tc1_021 00000000  805fe420  805fe420  000068f8  2**0
                  CONTENTS
310 .inttab_tc1_022 00000000  805fe440  805fe440  000068f8  2**0
                  CONTENTS
311 .inttab_tc1_023 00000000  805fe460  805fe460  000068f8  2**0
                  CONTENTS
312 .inttab_tc1_024 00000000  805fe480  805fe480  000068f8  2**0
                  CONTENTS
313 .inttab_tc1_025 00000000  805fe4a0  805fe4a0  000068f8  2**0
                  CONTENTS
314 .inttab_tc1_026 00000000  805fe4c0  805fe4c0  000068f8  2**0
                  CONTENTS
315 .inttab_tc1_027 00000000  805fe4e0  805fe4e0  000068f8  2**0
                  CONTENTS
316 .inttab_tc1_028 00000000  805fe500  805fe500  000068f8  2**0
                  CONTENTS
317 .inttab_tc1_029 00000000  805fe520  805fe520  000068f8  2**0
                  CONTENTS
318 .inttab_tc1_02A 00000000  805fe540  805fe540  000068f8  2**0
                  CONTENTS
319 .inttab_tc1_02B 00000000  805fe560  805fe560  000068f8  2**0
                  CONTENTS
320 .inttab_tc1_02C 00000000  805fe580  805fe580  000068f8  2**0
                  CONTENTS
321 .inttab_tc1_02D 00000000  805fe5a0  805fe5a0  000068f8  2**0
                  CONTENTS
322 .inttab_tc1_02E 00000000  805fe5c0  805fe5c0  000068f8  2**0
                  CONTENTS
323 .inttab_tc1_02F 00000000  805fe5e0  805fe5e0  000068f8  2**0
                  CONTENTS
324 .inttab_tc1_030 00000000  805fe600  805fe600  000068f8  2**0
                  CONTENTS
325 .inttab_tc1_031 00000000  805fe620  805fe620  000068f8  2**0
                  CONTENTS
326 .inttab_tc1_032 00000000  805fe640  805fe640  000068f8  2**0
                  CONTENTS
327 .inttab_tc1_033 00000000  805fe660  805fe660  000068f8  2**0
                  CONTENTS
328 .inttab_tc1_034 00000000  805fe680  805fe680  000068f8  2**0
                  CONTENTS
329 .inttab_tc1_035 00000000  805fe6a0  805fe6a0  000068f8  2**0
                  CONTENTS
330 .inttab_tc1_036 00000000  805fe6c0  805fe6c0  000068f8  2**0
                  CONTENTS
331 .inttab_tc1_037 00000000  805fe6e0  805fe6e0  000068f8  2**0
                  CONTENTS
332 .inttab_tc1_038 00000000  805fe700  805fe700  000068f8  2**0
                  CONTENTS
333 .inttab_tc1_039 00000000  805fe720  805fe720  000068f8  2**0
                  CONTENTS
334 .inttab_tc1_03A 00000000  805fe740  805fe740  000068f8  2**0
                  CONTENTS
335 .inttab_tc1_03B 00000000  805fe760  805fe760  000068f8  2**0
                  CONTENTS
336 .inttab_tc1_03C 00000000  805fe780  805fe780  000068f8  2**0
                  CONTENTS
337 .inttab_tc1_03D 00000000  805fe7a0  805fe7a0  000068f8  2**0
                  CONTENTS
338 .inttab_tc1_03E 00000000  805fe7c0  805fe7c0  000068f8  2**0
                  CONTENTS
339 .inttab_tc1_03F 00000000  805fe7e0  805fe7e0  000068f8  2**0
                  CONTENTS
340 .inttab_tc1_040 00000000  805fe800  805fe800  000068f8  2**0
                  CONTENTS
341 .inttab_tc1_041 00000000  805fe820  805fe820  000068f8  2**0
                  CONTENTS
342 .inttab_tc1_042 00000000  805fe840  805fe840  000068f8  2**0
                  CONTENTS
343 .inttab_tc1_043 00000000  805fe860  805fe860  000068f8  2**0
                  CONTENTS
344 .inttab_tc1_044 00000000  805fe880  805fe880  000068f8  2**0
                  CONTENTS
345 .inttab_tc1_045 00000000  805fe8a0  805fe8a0  000068f8  2**0
                  CONTENTS
346 .inttab_tc1_046 00000000  805fe8c0  805fe8c0  000068f8  2**0
                  CONTENTS
347 .inttab_tc1_047 00000000  805fe8e0  805fe8e0  000068f8  2**0
                  CONTENTS
348 .inttab_tc1_048 00000000  805fe900  805fe900  000068f8  2**0
                  CONTENTS
349 .inttab_tc1_049 00000000  805fe920  805fe920  000068f8  2**0
                  CONTENTS
350 .inttab_tc1_04A 00000000  805fe940  805fe940  000068f8  2**0
                  CONTENTS
351 .inttab_tc1_04B 00000000  805fe960  805fe960  000068f8  2**0
                  CONTENTS
352 .inttab_tc1_04C 00000000  805fe980  805fe980  000068f8  2**0
                  CONTENTS
353 .inttab_tc1_04D 00000000  805fe9a0  805fe9a0  000068f8  2**0
                  CONTENTS
354 .inttab_tc1_04E 00000000  805fe9c0  805fe9c0  000068f8  2**0
                  CONTENTS
355 .inttab_tc1_04F 00000000  805fe9e0  805fe9e0  000068f8  2**0
                  CONTENTS
356 .inttab_tc1_050 00000000  805fea00  805fea00  000068f8  2**0
                  CONTENTS
357 .inttab_tc1_051 00000000  805fea20  805fea20  000068f8  2**0
                  CONTENTS
358 .inttab_tc1_052 00000000  805fea40  805fea40  000068f8  2**0
                  CONTENTS
359 .inttab_tc1_053 00000000  805fea60  805fea60  000068f8  2**0
                  CONTENTS
360 .inttab_tc1_054 00000000  805fea80  805fea80  000068f8  2**0
                  CONTENTS
361 .inttab_tc1_055 00000000  805feaa0  805feaa0  000068f8  2**0
                  CONTENTS
362 .inttab_tc1_056 00000000  805feac0  805feac0  000068f8  2**0
                  CONTENTS
363 .inttab_tc1_057 00000000  805feae0  805feae0  000068f8  2**0
                  CONTENTS
364 .inttab_tc1_058 00000000  805feb00  805feb00  000068f8  2**0
                  CONTENTS
365 .inttab_tc1_059 00000000  805feb20  805feb20  000068f8  2**0
                  CONTENTS
366 .inttab_tc1_05A 00000000  805feb40  805feb40  000068f8  2**0
                  CONTENTS
367 .inttab_tc1_05B 00000000  805feb60  805feb60  000068f8  2**0
                  CONTENTS
368 .inttab_tc1_05C 00000000  805feb80  805feb80  000068f8  2**0
                  CONTENTS
369 .inttab_tc1_05D 00000000  805feba0  805feba0  000068f8  2**0
                  CONTENTS
370 .inttab_tc1_05E 00000000  805febc0  805febc0  000068f8  2**0
                  CONTENTS
371 .inttab_tc1_05F 00000000  805febe0  805febe0  000068f8  2**0
                  CONTENTS
372 .inttab_tc1_060 00000000  805fec00  805fec00  000068f8  2**0
                  CONTENTS
373 .inttab_tc1_061 00000000  805fec20  805fec20  000068f8  2**0
                  CONTENTS
374 .inttab_tc1_062 00000000  805fec40  805fec40  000068f8  2**0
                  CONTENTS
375 .inttab_tc1_063 00000000  805fec60  805fec60  000068f8  2**0
                  CONTENTS
376 .inttab_tc1_064 00000000  805fec80  805fec80  000068f8  2**0
                  CONTENTS
377 .inttab_tc1_065 00000000  805feca0  805feca0  000068f8  2**0
                  CONTENTS
378 .inttab_tc1_066 00000000  805fecc0  805fecc0  000068f8  2**0
                  CONTENTS
379 .inttab_tc1_067 00000000  805fece0  805fece0  000068f8  2**0
                  CONTENTS
380 .inttab_tc1_068 00000000  805fed00  805fed00  000068f8  2**0
                  CONTENTS
381 .inttab_tc1_069 00000000  805fed20  805fed20  000068f8  2**0
                  CONTENTS
382 .inttab_tc1_06A 00000000  805fed40  805fed40  000068f8  2**0
                  CONTENTS
383 .inttab_tc1_06B 00000000  805fed60  805fed60  000068f8  2**0
                  CONTENTS
384 .inttab_tc1_06C 00000000  805fed80  805fed80  000068f8  2**0
                  CONTENTS
385 .inttab_tc1_06D 00000000  805feda0  805feda0  000068f8  2**0
                  CONTENTS
386 .inttab_tc1_06E 00000000  805fedc0  805fedc0  000068f8  2**0
                  CONTENTS
387 .inttab_tc1_06F 00000000  805fede0  805fede0  000068f8  2**0
                  CONTENTS
388 .inttab_tc1_070 00000000  805fee00  805fee00  000068f8  2**0
                  CONTENTS
389 .inttab_tc1_071 00000000  805fee20  805fee20  000068f8  2**0
                  CONTENTS
390 .inttab_tc1_072 00000000  805fee40  805fee40  000068f8  2**0
                  CONTENTS
391 .inttab_tc1_073 00000000  805fee60  805fee60  000068f8  2**0
                  CONTENTS
392 .inttab_tc1_074 00000000  805fee80  805fee80  000068f8  2**0
                  CONTENTS
393 .inttab_tc1_075 00000000  805feea0  805feea0  000068f8  2**0
                  CONTENTS
394 .inttab_tc1_076 00000000  805feec0  805feec0  000068f8  2**0
                  CONTENTS
395 .inttab_tc1_077 00000000  805feee0  805feee0  000068f8  2**0
                  CONTENTS
396 .inttab_tc1_078 00000000  805fef00  805fef00  000068f8  2**0
                  CONTENTS
397 .inttab_tc1_079 00000000  805fef20  805fef20  000068f8  2**0
                  CONTENTS
398 .inttab_tc1_07A 00000000  805fef40  805fef40  000068f8  2**0
                  CONTENTS
399 .inttab_tc1_07B 00000000  805fef60  805fef60  000068f8  2**0
                  CONTENTS
400 .inttab_tc1_07C 00000000  805fef80  805fef80  000068f8  2**0
                  CONTENTS
401 .inttab_tc1_07D 00000000  805fefa0  805fefa0  000068f8  2**0
                  CONTENTS
402 .inttab_tc1_07E 00000000  805fefc0  805fefc0  000068f8  2**0
                  CONTENTS
403 .inttab_tc1_07F 00000000  805fefe0  805fefe0  000068f8  2**0
                  CONTENTS
404 .inttab_tc1_080 00000000  805ff000  805ff000  000068f8  2**0
                  CONTENTS
405 .inttab_tc1_081 00000000  805ff020  805ff020  000068f8  2**0
                  CONTENTS
406 .inttab_tc1_082 00000000  805ff040  805ff040  000068f8  2**0
                  CONTENTS
407 .inttab_tc1_083 00000000  805ff060  805ff060  000068f8  2**0
                  CONTENTS
408 .inttab_tc1_084 00000000  805ff080  805ff080  000068f8  2**0
                  CONTENTS
409 .inttab_tc1_085 00000000  805ff0a0  805ff0a0  000068f8  2**0
                  CONTENTS
410 .inttab_tc1_086 00000000  805ff0c0  805ff0c0  000068f8  2**0
                  CONTENTS
411 .inttab_tc1_087 00000000  805ff0e0  805ff0e0  000068f8  2**0
                  CONTENTS
412 .inttab_tc1_088 00000000  805ff100  805ff100  000068f8  2**0
                  CONTENTS
413 .inttab_tc1_089 00000000  805ff120  805ff120  000068f8  2**0
                  CONTENTS
414 .inttab_tc1_08A 00000000  805ff140  805ff140  000068f8  2**0
                  CONTENTS
415 .inttab_tc1_08B 00000000  805ff160  805ff160  000068f8  2**0
                  CONTENTS
416 .inttab_tc1_08C 00000000  805ff180  805ff180  000068f8  2**0
                  CONTENTS
417 .inttab_tc1_08D 00000000  805ff1a0  805ff1a0  000068f8  2**0
                  CONTENTS
418 .inttab_tc1_08E 00000000  805ff1c0  805ff1c0  000068f8  2**0
                  CONTENTS
419 .inttab_tc1_08F 00000000  805ff1e0  805ff1e0  000068f8  2**0
                  CONTENTS
420 .inttab_tc1_090 00000000  805ff200  805ff200  000068f8  2**0
                  CONTENTS
421 .inttab_tc1_091 00000000  805ff220  805ff220  000068f8  2**0
                  CONTENTS
422 .inttab_tc1_092 00000000  805ff240  805ff240  000068f8  2**0
                  CONTENTS
423 .inttab_tc1_093 00000000  805ff260  805ff260  000068f8  2**0
                  CONTENTS
424 .inttab_tc1_094 00000000  805ff280  805ff280  000068f8  2**0
                  CONTENTS
425 .inttab_tc1_095 00000000  805ff2a0  805ff2a0  000068f8  2**0
                  CONTENTS
426 .inttab_tc1_096 00000000  805ff2c0  805ff2c0  000068f8  2**0
                  CONTENTS
427 .inttab_tc1_097 00000000  805ff2e0  805ff2e0  000068f8  2**0
                  CONTENTS
428 .inttab_tc1_098 00000000  805ff300  805ff300  000068f8  2**0
                  CONTENTS
429 .inttab_tc1_099 00000000  805ff320  805ff320  000068f8  2**0
                  CONTENTS
430 .inttab_tc1_09A 00000000  805ff340  805ff340  000068f8  2**0
                  CONTENTS
431 .inttab_tc1_09B 00000000  805ff360  805ff360  000068f8  2**0
                  CONTENTS
432 .inttab_tc1_09C 00000000  805ff380  805ff380  000068f8  2**0
                  CONTENTS
433 .inttab_tc1_09D 00000000  805ff3a0  805ff3a0  000068f8  2**0
                  CONTENTS
434 .inttab_tc1_09E 00000000  805ff3c0  805ff3c0  000068f8  2**0
                  CONTENTS
435 .inttab_tc1_09F 00000000  805ff3e0  805ff3e0  000068f8  2**0
                  CONTENTS
436 .inttab_tc1_0A0 00000000  805ff400  805ff400  000068f8  2**0
                  CONTENTS
437 .inttab_tc1_0A1 00000000  805ff420  805ff420  000068f8  2**0
                  CONTENTS
438 .inttab_tc1_0A2 00000000  805ff440  805ff440  000068f8  2**0
                  CONTENTS
439 .inttab_tc1_0A3 00000000  805ff460  805ff460  000068f8  2**0
                  CONTENTS
440 .inttab_tc1_0A4 00000000  805ff480  805ff480  000068f8  2**0
                  CONTENTS
441 .inttab_tc1_0A5 00000000  805ff4a0  805ff4a0  000068f8  2**0
                  CONTENTS
442 .inttab_tc1_0A6 00000000  805ff4c0  805ff4c0  000068f8  2**0
                  CONTENTS
443 .inttab_tc1_0A7 00000000  805ff4e0  805ff4e0  000068f8  2**0
                  CONTENTS
444 .inttab_tc1_0A8 00000000  805ff500  805ff500  000068f8  2**0
                  CONTENTS
445 .inttab_tc1_0A9 00000000  805ff520  805ff520  000068f8  2**0
                  CONTENTS
446 .inttab_tc1_0AA 00000000  805ff540  805ff540  000068f8  2**0
                  CONTENTS
447 .inttab_tc1_0AB 00000000  805ff560  805ff560  000068f8  2**0
                  CONTENTS
448 .inttab_tc1_0AC 00000000  805ff580  805ff580  000068f8  2**0
                  CONTENTS
449 .inttab_tc1_0AD 00000000  805ff5a0  805ff5a0  000068f8  2**0
                  CONTENTS
450 .inttab_tc1_0AE 00000000  805ff5c0  805ff5c0  000068f8  2**0
                  CONTENTS
451 .inttab_tc1_0AF 00000000  805ff5e0  805ff5e0  000068f8  2**0
                  CONTENTS
452 .inttab_tc1_0B0 00000000  805ff600  805ff600  000068f8  2**0
                  CONTENTS
453 .inttab_tc1_0B1 00000000  805ff620  805ff620  000068f8  2**0
                  CONTENTS
454 .inttab_tc1_0B2 00000000  805ff640  805ff640  000068f8  2**0
                  CONTENTS
455 .inttab_tc1_0B3 00000000  805ff660  805ff660  000068f8  2**0
                  CONTENTS
456 .inttab_tc1_0B4 00000000  805ff680  805ff680  000068f8  2**0
                  CONTENTS
457 .inttab_tc1_0B5 00000000  805ff6a0  805ff6a0  000068f8  2**0
                  CONTENTS
458 .inttab_tc1_0B6 00000000  805ff6c0  805ff6c0  000068f8  2**0
                  CONTENTS
459 .inttab_tc1_0B7 00000000  805ff6e0  805ff6e0  000068f8  2**0
                  CONTENTS
460 .inttab_tc1_0B8 00000000  805ff700  805ff700  000068f8  2**0
                  CONTENTS
461 .inttab_tc1_0B9 00000000  805ff720  805ff720  000068f8  2**0
                  CONTENTS
462 .inttab_tc1_0BA 00000000  805ff740  805ff740  000068f8  2**0
                  CONTENTS
463 .inttab_tc1_0BB 00000000  805ff760  805ff760  000068f8  2**0
                  CONTENTS
464 .inttab_tc1_0BC 00000000  805ff780  805ff780  000068f8  2**0
                  CONTENTS
465 .inttab_tc1_0BD 00000000  805ff7a0  805ff7a0  000068f8  2**0
                  CONTENTS
466 .inttab_tc1_0BE 00000000  805ff7c0  805ff7c0  000068f8  2**0
                  CONTENTS
467 .inttab_tc1_0BF 00000000  805ff7e0  805ff7e0  000068f8  2**0
                  CONTENTS
468 .inttab_tc1_0C0 00000000  805ff800  805ff800  000068f8  2**0
                  CONTENTS
469 .inttab_tc1_0C1 00000000  805ff820  805ff820  000068f8  2**0
                  CONTENTS
470 .inttab_tc1_0C2 00000000  805ff840  805ff840  000068f8  2**0
                  CONTENTS
471 .inttab_tc1_0C3 00000000  805ff860  805ff860  000068f8  2**0
                  CONTENTS
472 .inttab_tc1_0C4 00000000  805ff880  805ff880  000068f8  2**0
                  CONTENTS
473 .inttab_tc1_0C5 00000000  805ff8a0  805ff8a0  000068f8  2**0
                  CONTENTS
474 .inttab_tc1_0C6 00000000  805ff8c0  805ff8c0  000068f8  2**0
                  CONTENTS
475 .inttab_tc1_0C7 00000000  805ff8e0  805ff8e0  000068f8  2**0
                  CONTENTS
476 .inttab_tc1_0C8 00000000  805ff900  805ff900  000068f8  2**0
                  CONTENTS
477 .inttab_tc1_0C9 00000000  805ff920  805ff920  000068f8  2**0
                  CONTENTS
478 .inttab_tc1_0CA 00000000  805ff940  805ff940  000068f8  2**0
                  CONTENTS
479 .inttab_tc1_0CB 00000000  805ff960  805ff960  000068f8  2**0
                  CONTENTS
480 .inttab_tc1_0CC 00000000  805ff980  805ff980  000068f8  2**0
                  CONTENTS
481 .inttab_tc1_0CD 00000000  805ff9a0  805ff9a0  000068f8  2**0
                  CONTENTS
482 .inttab_tc1_0CE 00000000  805ff9c0  805ff9c0  000068f8  2**0
                  CONTENTS
483 .inttab_tc1_0CF 00000000  805ff9e0  805ff9e0  000068f8  2**0
                  CONTENTS
484 .inttab_tc1_0D0 00000000  805ffa00  805ffa00  000068f8  2**0
                  CONTENTS
485 .inttab_tc1_0D1 00000000  805ffa20  805ffa20  000068f8  2**0
                  CONTENTS
486 .inttab_tc1_0D2 00000000  805ffa40  805ffa40  000068f8  2**0
                  CONTENTS
487 .inttab_tc1_0D3 00000000  805ffa60  805ffa60  000068f8  2**0
                  CONTENTS
488 .inttab_tc1_0D4 00000000  805ffa80  805ffa80  000068f8  2**0
                  CONTENTS
489 .inttab_tc1_0D5 00000000  805ffaa0  805ffaa0  000068f8  2**0
                  CONTENTS
490 .inttab_tc1_0D6 00000000  805ffac0  805ffac0  000068f8  2**0
                  CONTENTS
491 .inttab_tc1_0D7 00000000  805ffae0  805ffae0  000068f8  2**0
                  CONTENTS
492 .inttab_tc1_0D8 00000000  805ffb00  805ffb00  000068f8  2**0
                  CONTENTS
493 .inttab_tc1_0D9 00000000  805ffb20  805ffb20  000068f8  2**0
                  CONTENTS
494 .inttab_tc1_0DA 00000000  805ffb40  805ffb40  000068f8  2**0
                  CONTENTS
495 .inttab_tc1_0DB 00000000  805ffb60  805ffb60  000068f8  2**0
                  CONTENTS
496 .inttab_tc1_0DC 00000000  805ffb80  805ffb80  000068f8  2**0
                  CONTENTS
497 .inttab_tc1_0DD 00000000  805ffba0  805ffba0  000068f8  2**0
                  CONTENTS
498 .inttab_tc1_0DE 00000000  805ffbc0  805ffbc0  000068f8  2**0
                  CONTENTS
499 .inttab_tc1_0DF 00000000  805ffbe0  805ffbe0  000068f8  2**0
                  CONTENTS
500 .inttab_tc1_0E0 00000000  805ffc00  805ffc00  000068f8  2**0
                  CONTENTS
501 .inttab_tc1_0E1 00000000  805ffc20  805ffc20  000068f8  2**0
                  CONTENTS
502 .inttab_tc1_0E2 00000000  805ffc40  805ffc40  000068f8  2**0
                  CONTENTS
503 .inttab_tc1_0E3 00000000  805ffc60  805ffc60  000068f8  2**0
                  CONTENTS
504 .inttab_tc1_0E4 00000000  805ffc80  805ffc80  000068f8  2**0
                  CONTENTS
505 .inttab_tc1_0E5 00000000  805ffca0  805ffca0  000068f8  2**0
                  CONTENTS
506 .inttab_tc1_0E6 00000000  805ffcc0  805ffcc0  000068f8  2**0
                  CONTENTS
507 .inttab_tc1_0E7 00000000  805ffce0  805ffce0  000068f8  2**0
                  CONTENTS
508 .inttab_tc1_0E8 00000000  805ffd00  805ffd00  000068f8  2**0
                  CONTENTS
509 .inttab_tc1_0E9 00000000  805ffd20  805ffd20  000068f8  2**0
                  CONTENTS
510 .inttab_tc1_0EA 00000000  805ffd40  805ffd40  000068f8  2**0
                  CONTENTS
511 .inttab_tc1_0EB 00000000  805ffd60  805ffd60  000068f8  2**0
                  CONTENTS
512 .inttab_tc1_0EC 00000000  805ffd80  805ffd80  000068f8  2**0
                  CONTENTS
513 .inttab_tc1_0ED 00000000  805ffda0  805ffda0  000068f8  2**0
                  CONTENTS
514 .inttab_tc1_0EE 00000000  805ffdc0  805ffdc0  000068f8  2**0
                  CONTENTS
515 .inttab_tc1_0EF 00000000  805ffde0  805ffde0  000068f8  2**0
                  CONTENTS
516 .inttab_tc1_0F0 00000000  805ffe00  805ffe00  000068f8  2**0
                  CONTENTS
517 .inttab_tc1_0F1 00000000  805ffe20  805ffe20  000068f8  2**0
                  CONTENTS
518 .inttab_tc1_0F2 00000000  805ffe40  805ffe40  000068f8  2**0
                  CONTENTS
519 .inttab_tc1_0F3 00000000  805ffe60  805ffe60  000068f8  2**0
                  CONTENTS
520 .inttab_tc1_0F4 00000000  805ffe80  805ffe80  000068f8  2**0
                  CONTENTS
521 .inttab_tc1_0F5 00000000  805ffea0  805ffea0  000068f8  2**0
                  CONTENTS
522 .inttab_tc1_0F6 00000000  805ffec0  805ffec0  000068f8  2**0
                  CONTENTS
523 .inttab_tc1_0F7 00000000  805ffee0  805ffee0  000068f8  2**0
                  CONTENTS
524 .inttab_tc1_0F8 00000000  805fff00  805fff00  000068f8  2**0
                  CONTENTS
525 .inttab_tc1_0F9 00000000  805fff20  805fff20  000068f8  2**0
                  CONTENTS
526 .inttab_tc1_0FA 00000000  805fff40  805fff40  000068f8  2**0
                  CONTENTS
527 .inttab_tc1_0FB 00000000  805fff60  805fff60  000068f8  2**0
                  CONTENTS
528 .inttab_tc1_0FC 00000000  805fff80  805fff80  000068f8  2**0
                  CONTENTS
529 .inttab_tc1_0FD 00000000  805fffa0  805fffa0  000068f8  2**0
                  CONTENTS
530 .inttab_tc1_0FE 00000000  805fffc0  805fffc0  000068f8  2**0
                  CONTENTS
531 .inttab_tc1_0FF 00000000  805fffe0  805fffe0  000068f8  2**0
                  CONTENTS
532 .inttab_tc2_000 00000000  808fe000  808fe000  000068f8  2**0
                  CONTENTS
533 .inttab_tc2_001 00000000  808fe020  808fe020  000068f8  2**0
                  CONTENTS
534 .inttab_tc2_002 00000000  808fe040  808fe040  000068f8  2**0
                  CONTENTS
535 .inttab_tc2_003 00000000  808fe060  808fe060  000068f8  2**0
                  CONTENTS
536 .inttab_tc2_004 00000000  808fe080  808fe080  000068f8  2**0
                  CONTENTS
537 .inttab_tc2_005 00000000  808fe0a0  808fe0a0  000068f8  2**0
                  CONTENTS
538 .inttab_tc2_006 00000000  808fe0c0  808fe0c0  000068f8  2**0
                  CONTENTS
539 .inttab_tc2_007 00000000  808fe0e0  808fe0e0  000068f8  2**0
                  CONTENTS
540 .inttab_tc2_008 00000000  808fe100  808fe100  000068f8  2**0
                  CONTENTS
541 .inttab_tc2_009 00000000  808fe120  808fe120  000068f8  2**0
                  CONTENTS
542 .inttab_tc2_00A 00000000  808fe140  808fe140  000068f8  2**0
                  CONTENTS
543 .inttab_tc2_00B 00000000  808fe160  808fe160  000068f8  2**0
                  CONTENTS
544 .inttab_tc2_00C 00000000  808fe180  808fe180  000068f8  2**0
                  CONTENTS
545 .inttab_tc2_00D 00000000  808fe1a0  808fe1a0  000068f8  2**0
                  CONTENTS
546 .inttab_tc2_00E 00000000  808fe1c0  808fe1c0  000068f8  2**0
                  CONTENTS
547 .inttab_tc2_00F 00000000  808fe1e0  808fe1e0  000068f8  2**0
                  CONTENTS
548 .inttab_tc2_010 00000000  808fe200  808fe200  000068f8  2**0
                  CONTENTS
549 .inttab_tc2_011 00000000  808fe220  808fe220  000068f8  2**0
                  CONTENTS
550 .inttab_tc2_012 00000000  808fe240  808fe240  000068f8  2**0
                  CONTENTS
551 .inttab_tc2_013 00000000  808fe260  808fe260  000068f8  2**0
                  CONTENTS
552 .inttab_tc2_014 00000000  808fe280  808fe280  000068f8  2**0
                  CONTENTS
553 .inttab_tc2_015 00000000  808fe2a0  808fe2a0  000068f8  2**0
                  CONTENTS
554 .inttab_tc2_016 00000000  808fe2c0  808fe2c0  000068f8  2**0
                  CONTENTS
555 .inttab_tc2_017 00000000  808fe2e0  808fe2e0  000068f8  2**0
                  CONTENTS
556 .inttab_tc2_018 00000000  808fe300  808fe300  000068f8  2**0
                  CONTENTS
557 .inttab_tc2_019 00000000  808fe320  808fe320  000068f8  2**0
                  CONTENTS
558 .inttab_tc2_01A 00000000  808fe340  808fe340  000068f8  2**0
                  CONTENTS
559 .inttab_tc2_01B 00000000  808fe360  808fe360  000068f8  2**0
                  CONTENTS
560 .inttab_tc2_01C 00000000  808fe380  808fe380  000068f8  2**0
                  CONTENTS
561 .inttab_tc2_01D 00000000  808fe3a0  808fe3a0  000068f8  2**0
                  CONTENTS
562 .inttab_tc2_01E 00000000  808fe3c0  808fe3c0  000068f8  2**0
                  CONTENTS
563 .inttab_tc2_01F 00000000  808fe3e0  808fe3e0  000068f8  2**0
                  CONTENTS
564 .inttab_tc2_020 00000000  808fe400  808fe400  000068f8  2**0
                  CONTENTS
565 .inttab_tc2_021 00000000  808fe420  808fe420  000068f8  2**0
                  CONTENTS
566 .inttab_tc2_022 00000000  808fe440  808fe440  000068f8  2**0
                  CONTENTS
567 .inttab_tc2_023 00000000  808fe460  808fe460  000068f8  2**0
                  CONTENTS
568 .inttab_tc2_024 00000000  808fe480  808fe480  000068f8  2**0
                  CONTENTS
569 .inttab_tc2_025 00000000  808fe4a0  808fe4a0  000068f8  2**0
                  CONTENTS
570 .inttab_tc2_026 00000000  808fe4c0  808fe4c0  000068f8  2**0
                  CONTENTS
571 .inttab_tc2_027 00000000  808fe4e0  808fe4e0  000068f8  2**0
                  CONTENTS
572 .inttab_tc2_028 00000000  808fe500  808fe500  000068f8  2**0
                  CONTENTS
573 .inttab_tc2_029 00000000  808fe520  808fe520  000068f8  2**0
                  CONTENTS
574 .inttab_tc2_02A 00000000  808fe540  808fe540  000068f8  2**0
                  CONTENTS
575 .inttab_tc2_02B 00000000  808fe560  808fe560  000068f8  2**0
                  CONTENTS
576 .inttab_tc2_02C 00000000  808fe580  808fe580  000068f8  2**0
                  CONTENTS
577 .inttab_tc2_02D 00000000  808fe5a0  808fe5a0  000068f8  2**0
                  CONTENTS
578 .inttab_tc2_02E 00000000  808fe5c0  808fe5c0  000068f8  2**0
                  CONTENTS
579 .inttab_tc2_02F 00000000  808fe5e0  808fe5e0  000068f8  2**0
                  CONTENTS
580 .inttab_tc2_030 00000000  808fe600  808fe600  000068f8  2**0
                  CONTENTS
581 .inttab_tc2_031 00000000  808fe620  808fe620  000068f8  2**0
                  CONTENTS
582 .inttab_tc2_032 00000000  808fe640  808fe640  000068f8  2**0
                  CONTENTS
583 .inttab_tc2_033 00000000  808fe660  808fe660  000068f8  2**0
                  CONTENTS
584 .inttab_tc2_034 00000000  808fe680  808fe680  000068f8  2**0
                  CONTENTS
585 .inttab_tc2_035 00000000  808fe6a0  808fe6a0  000068f8  2**0
                  CONTENTS
586 .inttab_tc2_036 00000000  808fe6c0  808fe6c0  000068f8  2**0
                  CONTENTS
587 .inttab_tc2_037 00000000  808fe6e0  808fe6e0  000068f8  2**0
                  CONTENTS
588 .inttab_tc2_038 00000000  808fe700  808fe700  000068f8  2**0
                  CONTENTS
589 .inttab_tc2_039 00000000  808fe720  808fe720  000068f8  2**0
                  CONTENTS
590 .inttab_tc2_03A 00000000  808fe740  808fe740  000068f8  2**0
                  CONTENTS
591 .inttab_tc2_03B 00000000  808fe760  808fe760  000068f8  2**0
                  CONTENTS
592 .inttab_tc2_03C 00000000  808fe780  808fe780  000068f8  2**0
                  CONTENTS
593 .inttab_tc2_03D 00000000  808fe7a0  808fe7a0  000068f8  2**0
                  CONTENTS
594 .inttab_tc2_03E 00000000  808fe7c0  808fe7c0  000068f8  2**0
                  CONTENTS
595 .inttab_tc2_03F 00000000  808fe7e0  808fe7e0  000068f8  2**0
                  CONTENTS
596 .inttab_tc2_040 00000000  808fe800  808fe800  000068f8  2**0
                  CONTENTS
597 .inttab_tc2_041 00000000  808fe820  808fe820  000068f8  2**0
                  CONTENTS
598 .inttab_tc2_042 00000000  808fe840  808fe840  000068f8  2**0
                  CONTENTS
599 .inttab_tc2_043 00000000  808fe860  808fe860  000068f8  2**0
                  CONTENTS
600 .inttab_tc2_044 00000000  808fe880  808fe880  000068f8  2**0
                  CONTENTS
601 .inttab_tc2_045 00000000  808fe8a0  808fe8a0  000068f8  2**0
                  CONTENTS
602 .inttab_tc2_046 00000000  808fe8c0  808fe8c0  000068f8  2**0
                  CONTENTS
603 .inttab_tc2_047 00000000  808fe8e0  808fe8e0  000068f8  2**0
                  CONTENTS
604 .inttab_tc2_048 00000000  808fe900  808fe900  000068f8  2**0
                  CONTENTS
605 .inttab_tc2_049 00000000  808fe920  808fe920  000068f8  2**0
                  CONTENTS
606 .inttab_tc2_04A 00000000  808fe940  808fe940  000068f8  2**0
                  CONTENTS
607 .inttab_tc2_04B 00000000  808fe960  808fe960  000068f8  2**0
                  CONTENTS
608 .inttab_tc2_04C 00000000  808fe980  808fe980  000068f8  2**0
                  CONTENTS
609 .inttab_tc2_04D 00000000  808fe9a0  808fe9a0  000068f8  2**0
                  CONTENTS
610 .inttab_tc2_04E 00000000  808fe9c0  808fe9c0  000068f8  2**0
                  CONTENTS
611 .inttab_tc2_04F 00000000  808fe9e0  808fe9e0  000068f8  2**0
                  CONTENTS
612 .inttab_tc2_050 00000000  808fea00  808fea00  000068f8  2**0
                  CONTENTS
613 .inttab_tc2_051 00000000  808fea20  808fea20  000068f8  2**0
                  CONTENTS
614 .inttab_tc2_052 00000000  808fea40  808fea40  000068f8  2**0
                  CONTENTS
615 .inttab_tc2_053 00000000  808fea60  808fea60  000068f8  2**0
                  CONTENTS
616 .inttab_tc2_054 00000000  808fea80  808fea80  000068f8  2**0
                  CONTENTS
617 .inttab_tc2_055 00000000  808feaa0  808feaa0  000068f8  2**0
                  CONTENTS
618 .inttab_tc2_056 00000000  808feac0  808feac0  000068f8  2**0
                  CONTENTS
619 .inttab_tc2_057 00000000  808feae0  808feae0  000068f8  2**0
                  CONTENTS
620 .inttab_tc2_058 00000000  808feb00  808feb00  000068f8  2**0
                  CONTENTS
621 .inttab_tc2_059 00000000  808feb20  808feb20  000068f8  2**0
                  CONTENTS
622 .inttab_tc2_05A 00000000  808feb40  808feb40  000068f8  2**0
                  CONTENTS
623 .inttab_tc2_05B 00000000  808feb60  808feb60  000068f8  2**0
                  CONTENTS
624 .inttab_tc2_05C 00000000  808feb80  808feb80  000068f8  2**0
                  CONTENTS
625 .inttab_tc2_05D 00000000  808feba0  808feba0  000068f8  2**0
                  CONTENTS
626 .inttab_tc2_05E 00000000  808febc0  808febc0  000068f8  2**0
                  CONTENTS
627 .inttab_tc2_05F 00000000  808febe0  808febe0  000068f8  2**0
                  CONTENTS
628 .inttab_tc2_060 00000000  808fec00  808fec00  000068f8  2**0
                  CONTENTS
629 .inttab_tc2_061 00000000  808fec20  808fec20  000068f8  2**0
                  CONTENTS
630 .inttab_tc2_062 00000000  808fec40  808fec40  000068f8  2**0
                  CONTENTS
631 .inttab_tc2_063 00000000  808fec60  808fec60  000068f8  2**0
                  CONTENTS
632 .inttab_tc2_064 00000000  808fec80  808fec80  000068f8  2**0
                  CONTENTS
633 .inttab_tc2_065 00000000  808feca0  808feca0  000068f8  2**0
                  CONTENTS
634 .inttab_tc2_066 00000000  808fecc0  808fecc0  000068f8  2**0
                  CONTENTS
635 .inttab_tc2_067 00000000  808fece0  808fece0  000068f8  2**0
                  CONTENTS
636 .inttab_tc2_068 00000000  808fed00  808fed00  000068f8  2**0
                  CONTENTS
637 .inttab_tc2_069 00000000  808fed20  808fed20  000068f8  2**0
                  CONTENTS
638 .inttab_tc2_06A 00000000  808fed40  808fed40  000068f8  2**0
                  CONTENTS
639 .inttab_tc2_06B 00000000  808fed60  808fed60  000068f8  2**0
                  CONTENTS
640 .inttab_tc2_06C 00000000  808fed80  808fed80  000068f8  2**0
                  CONTENTS
641 .inttab_tc2_06D 00000000  808feda0  808feda0  000068f8  2**0
                  CONTENTS
642 .inttab_tc2_06E 00000000  808fedc0  808fedc0  000068f8  2**0
                  CONTENTS
643 .inttab_tc2_06F 00000000  808fede0  808fede0  000068f8  2**0
                  CONTENTS
644 .inttab_tc2_070 00000000  808fee00  808fee00  000068f8  2**0
                  CONTENTS
645 .inttab_tc2_071 00000000  808fee20  808fee20  000068f8  2**0
                  CONTENTS
646 .inttab_tc2_072 00000000  808fee40  808fee40  000068f8  2**0
                  CONTENTS
647 .inttab_tc2_073 00000000  808fee60  808fee60  000068f8  2**0
                  CONTENTS
648 .inttab_tc2_074 00000000  808fee80  808fee80  000068f8  2**0
                  CONTENTS
649 .inttab_tc2_075 00000000  808feea0  808feea0  000068f8  2**0
                  CONTENTS
650 .inttab_tc2_076 00000000  808feec0  808feec0  000068f8  2**0
                  CONTENTS
651 .inttab_tc2_077 00000000  808feee0  808feee0  000068f8  2**0
                  CONTENTS
652 .inttab_tc2_078 00000000  808fef00  808fef00  000068f8  2**0
                  CONTENTS
653 .inttab_tc2_079 00000000  808fef20  808fef20  000068f8  2**0
                  CONTENTS
654 .inttab_tc2_07A 00000000  808fef40  808fef40  000068f8  2**0
                  CONTENTS
655 .inttab_tc2_07B 00000000  808fef60  808fef60  000068f8  2**0
                  CONTENTS
656 .inttab_tc2_07C 00000000  808fef80  808fef80  000068f8  2**0
                  CONTENTS
657 .inttab_tc2_07D 00000000  808fefa0  808fefa0  000068f8  2**0
                  CONTENTS
658 .inttab_tc2_07E 00000000  808fefc0  808fefc0  000068f8  2**0
                  CONTENTS
659 .inttab_tc2_07F 00000000  808fefe0  808fefe0  000068f8  2**0
                  CONTENTS
660 .inttab_tc2_080 00000000  808ff000  808ff000  000068f8  2**0
                  CONTENTS
661 .inttab_tc2_081 00000000  808ff020  808ff020  000068f8  2**0
                  CONTENTS
662 .inttab_tc2_082 00000000  808ff040  808ff040  000068f8  2**0
                  CONTENTS
663 .inttab_tc2_083 00000000  808ff060  808ff060  000068f8  2**0
                  CONTENTS
664 .inttab_tc2_084 00000000  808ff080  808ff080  000068f8  2**0
                  CONTENTS
665 .inttab_tc2_085 00000000  808ff0a0  808ff0a0  000068f8  2**0
                  CONTENTS
666 .inttab_tc2_086 00000000  808ff0c0  808ff0c0  000068f8  2**0
                  CONTENTS
667 .inttab_tc2_087 00000000  808ff0e0  808ff0e0  000068f8  2**0
                  CONTENTS
668 .inttab_tc2_088 00000000  808ff100  808ff100  000068f8  2**0
                  CONTENTS
669 .inttab_tc2_089 00000000  808ff120  808ff120  000068f8  2**0
                  CONTENTS
670 .inttab_tc2_08A 00000000  808ff140  808ff140  000068f8  2**0
                  CONTENTS
671 .inttab_tc2_08B 00000000  808ff160  808ff160  000068f8  2**0
                  CONTENTS
672 .inttab_tc2_08C 00000000  808ff180  808ff180  000068f8  2**0
                  CONTENTS
673 .inttab_tc2_08D 00000000  808ff1a0  808ff1a0  000068f8  2**0
                  CONTENTS
674 .inttab_tc2_08E 00000000  808ff1c0  808ff1c0  000068f8  2**0
                  CONTENTS
675 .inttab_tc2_08F 00000000  808ff1e0  808ff1e0  000068f8  2**0
                  CONTENTS
676 .inttab_tc2_090 00000000  808ff200  808ff200  000068f8  2**0
                  CONTENTS
677 .inttab_tc2_091 00000000  808ff220  808ff220  000068f8  2**0
                  CONTENTS
678 .inttab_tc2_092 00000000  808ff240  808ff240  000068f8  2**0
                  CONTENTS
679 .inttab_tc2_093 00000000  808ff260  808ff260  000068f8  2**0
                  CONTENTS
680 .inttab_tc2_094 00000000  808ff280  808ff280  000068f8  2**0
                  CONTENTS
681 .inttab_tc2_095 00000000  808ff2a0  808ff2a0  000068f8  2**0
                  CONTENTS
682 .inttab_tc2_096 00000000  808ff2c0  808ff2c0  000068f8  2**0
                  CONTENTS
683 .inttab_tc2_097 00000000  808ff2e0  808ff2e0  000068f8  2**0
                  CONTENTS
684 .inttab_tc2_098 00000000  808ff300  808ff300  000068f8  2**0
                  CONTENTS
685 .inttab_tc2_099 00000000  808ff320  808ff320  000068f8  2**0
                  CONTENTS
686 .inttab_tc2_09A 00000000  808ff340  808ff340  000068f8  2**0
                  CONTENTS
687 .inttab_tc2_09B 00000000  808ff360  808ff360  000068f8  2**0
                  CONTENTS
688 .inttab_tc2_09C 00000000  808ff380  808ff380  000068f8  2**0
                  CONTENTS
689 .inttab_tc2_09D 00000000  808ff3a0  808ff3a0  000068f8  2**0
                  CONTENTS
690 .inttab_tc2_09E 00000000  808ff3c0  808ff3c0  000068f8  2**0
                  CONTENTS
691 .inttab_tc2_09F 00000000  808ff3e0  808ff3e0  000068f8  2**0
                  CONTENTS
692 .inttab_tc2_0A0 00000000  808ff400  808ff400  000068f8  2**0
                  CONTENTS
693 .inttab_tc2_0A1 00000000  808ff420  808ff420  000068f8  2**0
                  CONTENTS
694 .inttab_tc2_0A2 00000000  808ff440  808ff440  000068f8  2**0
                  CONTENTS
695 .inttab_tc2_0A3 00000000  808ff460  808ff460  000068f8  2**0
                  CONTENTS
696 .inttab_tc2_0A4 00000000  808ff480  808ff480  000068f8  2**0
                  CONTENTS
697 .inttab_tc2_0A5 00000000  808ff4a0  808ff4a0  000068f8  2**0
                  CONTENTS
698 .inttab_tc2_0A6 00000000  808ff4c0  808ff4c0  000068f8  2**0
                  CONTENTS
699 .inttab_tc2_0A7 00000000  808ff4e0  808ff4e0  000068f8  2**0
                  CONTENTS
700 .inttab_tc2_0A8 00000000  808ff500  808ff500  000068f8  2**0
                  CONTENTS
701 .inttab_tc2_0A9 00000000  808ff520  808ff520  000068f8  2**0
                  CONTENTS
702 .inttab_tc2_0AA 00000000  808ff540  808ff540  000068f8  2**0
                  CONTENTS
703 .inttab_tc2_0AB 00000000  808ff560  808ff560  000068f8  2**0
                  CONTENTS
704 .inttab_tc2_0AC 00000000  808ff580  808ff580  000068f8  2**0
                  CONTENTS
705 .inttab_tc2_0AD 00000000  808ff5a0  808ff5a0  000068f8  2**0
                  CONTENTS
706 .inttab_tc2_0AE 00000000  808ff5c0  808ff5c0  000068f8  2**0
                  CONTENTS
707 .inttab_tc2_0AF 00000000  808ff5e0  808ff5e0  000068f8  2**0
                  CONTENTS
708 .inttab_tc2_0B0 00000000  808ff600  808ff600  000068f8  2**0
                  CONTENTS
709 .inttab_tc2_0B1 00000000  808ff620  808ff620  000068f8  2**0
                  CONTENTS
710 .inttab_tc2_0B2 00000000  808ff640  808ff640  000068f8  2**0
                  CONTENTS
711 .inttab_tc2_0B3 00000000  808ff660  808ff660  000068f8  2**0
                  CONTENTS
712 .inttab_tc2_0B4 00000000  808ff680  808ff680  000068f8  2**0
                  CONTENTS
713 .inttab_tc2_0B5 00000000  808ff6a0  808ff6a0  000068f8  2**0
                  CONTENTS
714 .inttab_tc2_0B6 00000000  808ff6c0  808ff6c0  000068f8  2**0
                  CONTENTS
715 .inttab_tc2_0B7 00000000  808ff6e0  808ff6e0  000068f8  2**0
                  CONTENTS
716 .inttab_tc2_0B8 00000000  808ff700  808ff700  000068f8  2**0
                  CONTENTS
717 .inttab_tc2_0B9 00000000  808ff720  808ff720  000068f8  2**0
                  CONTENTS
718 .inttab_tc2_0BA 00000000  808ff740  808ff740  000068f8  2**0
                  CONTENTS
719 .inttab_tc2_0BB 00000000  808ff760  808ff760  000068f8  2**0
                  CONTENTS
720 .inttab_tc2_0BC 00000000  808ff780  808ff780  000068f8  2**0
                  CONTENTS
721 .inttab_tc2_0BD 00000000  808ff7a0  808ff7a0  000068f8  2**0
                  CONTENTS
722 .inttab_tc2_0BE 00000000  808ff7c0  808ff7c0  000068f8  2**0
                  CONTENTS
723 .inttab_tc2_0BF 00000000  808ff7e0  808ff7e0  000068f8  2**0
                  CONTENTS
724 .inttab_tc2_0C0 00000000  808ff800  808ff800  000068f8  2**0
                  CONTENTS
725 .inttab_tc2_0C1 00000000  808ff820  808ff820  000068f8  2**0
                  CONTENTS
726 .inttab_tc2_0C2 00000000  808ff840  808ff840  000068f8  2**0
                  CONTENTS
727 .inttab_tc2_0C3 00000000  808ff860  808ff860  000068f8  2**0
                  CONTENTS
728 .inttab_tc2_0C4 00000000  808ff880  808ff880  000068f8  2**0
                  CONTENTS
729 .inttab_tc2_0C5 00000000  808ff8a0  808ff8a0  000068f8  2**0
                  CONTENTS
730 .inttab_tc2_0C6 00000000  808ff8c0  808ff8c0  000068f8  2**0
                  CONTENTS
731 .inttab_tc2_0C7 00000000  808ff8e0  808ff8e0  000068f8  2**0
                  CONTENTS
732 .inttab_tc2_0C8 00000000  808ff900  808ff900  000068f8  2**0
                  CONTENTS
733 .inttab_tc2_0C9 00000000  808ff920  808ff920  000068f8  2**0
                  CONTENTS
734 .inttab_tc2_0CA 00000000  808ff940  808ff940  000068f8  2**0
                  CONTENTS
735 .inttab_tc2_0CB 00000000  808ff960  808ff960  000068f8  2**0
                  CONTENTS
736 .inttab_tc2_0CC 00000000  808ff980  808ff980  000068f8  2**0
                  CONTENTS
737 .inttab_tc2_0CD 00000000  808ff9a0  808ff9a0  000068f8  2**0
                  CONTENTS
738 .inttab_tc2_0CE 00000000  808ff9c0  808ff9c0  000068f8  2**0
                  CONTENTS
739 .inttab_tc2_0CF 00000000  808ff9e0  808ff9e0  000068f8  2**0
                  CONTENTS
740 .inttab_tc2_0D0 00000000  808ffa00  808ffa00  000068f8  2**0
                  CONTENTS
741 .inttab_tc2_0D1 00000000  808ffa20  808ffa20  000068f8  2**0
                  CONTENTS
742 .inttab_tc2_0D2 00000000  808ffa40  808ffa40  000068f8  2**0
                  CONTENTS
743 .inttab_tc2_0D3 00000000  808ffa60  808ffa60  000068f8  2**0
                  CONTENTS
744 .inttab_tc2_0D4 00000000  808ffa80  808ffa80  000068f8  2**0
                  CONTENTS
745 .inttab_tc2_0D5 00000000  808ffaa0  808ffaa0  000068f8  2**0
                  CONTENTS
746 .inttab_tc2_0D6 00000000  808ffac0  808ffac0  000068f8  2**0
                  CONTENTS
747 .inttab_tc2_0D7 00000000  808ffae0  808ffae0  000068f8  2**0
                  CONTENTS
748 .inttab_tc2_0D8 00000000  808ffb00  808ffb00  000068f8  2**0
                  CONTENTS
749 .inttab_tc2_0D9 00000000  808ffb20  808ffb20  000068f8  2**0
                  CONTENTS
750 .inttab_tc2_0DA 00000000  808ffb40  808ffb40  000068f8  2**0
                  CONTENTS
751 .inttab_tc2_0DB 00000000  808ffb60  808ffb60  000068f8  2**0
                  CONTENTS
752 .inttab_tc2_0DC 00000000  808ffb80  808ffb80  000068f8  2**0
                  CONTENTS
753 .inttab_tc2_0DD 00000000  808ffba0  808ffba0  000068f8  2**0
                  CONTENTS
754 .inttab_tc2_0DE 00000000  808ffbc0  808ffbc0  000068f8  2**0
                  CONTENTS
755 .inttab_tc2_0DF 00000000  808ffbe0  808ffbe0  000068f8  2**0
                  CONTENTS
756 .inttab_tc2_0E0 00000000  808ffc00  808ffc00  000068f8  2**0
                  CONTENTS
757 .inttab_tc2_0E1 00000000  808ffc20  808ffc20  000068f8  2**0
                  CONTENTS
758 .inttab_tc2_0E2 00000000  808ffc40  808ffc40  000068f8  2**0
                  CONTENTS
759 .inttab_tc2_0E3 00000000  808ffc60  808ffc60  000068f8  2**0
                  CONTENTS
760 .inttab_tc2_0E4 00000000  808ffc80  808ffc80  000068f8  2**0
                  CONTENTS
761 .inttab_tc2_0E5 00000000  808ffca0  808ffca0  000068f8  2**0
                  CONTENTS
762 .inttab_tc2_0E6 00000000  808ffcc0  808ffcc0  000068f8  2**0
                  CONTENTS
763 .inttab_tc2_0E7 00000000  808ffce0  808ffce0  000068f8  2**0
                  CONTENTS
764 .inttab_tc2_0E8 00000000  808ffd00  808ffd00  000068f8  2**0
                  CONTENTS
765 .inttab_tc2_0E9 00000000  808ffd20  808ffd20  000068f8  2**0
                  CONTENTS
766 .inttab_tc2_0EA 00000000  808ffd40  808ffd40  000068f8  2**0
                  CONTENTS
767 .inttab_tc2_0EB 00000000  808ffd60  808ffd60  000068f8  2**0
                  CONTENTS
768 .inttab_tc2_0EC 00000000  808ffd80  808ffd80  000068f8  2**0
                  CONTENTS
769 .inttab_tc2_0ED 00000000  808ffda0  808ffda0  000068f8  2**0
                  CONTENTS
770 .inttab_tc2_0EE 00000000  808ffdc0  808ffdc0  000068f8  2**0
                  CONTENTS
771 .inttab_tc2_0EF 00000000  808ffde0  808ffde0  000068f8  2**0
                  CONTENTS
772 .inttab_tc2_0F0 00000000  808ffe00  808ffe00  000068f8  2**0
                  CONTENTS
773 .inttab_tc2_0F1 00000000  808ffe20  808ffe20  000068f8  2**0
                  CONTENTS
774 .inttab_tc2_0F2 00000000  808ffe40  808ffe40  000068f8  2**0
                  CONTENTS
775 .inttab_tc2_0F3 00000000  808ffe60  808ffe60  000068f8  2**0
                  CONTENTS
776 .inttab_tc2_0F4 00000000  808ffe80  808ffe80  000068f8  2**0
                  CONTENTS
777 .inttab_tc2_0F5 00000000  808ffea0  808ffea0  000068f8  2**0
                  CONTENTS
778 .inttab_tc2_0F6 00000000  808ffec0  808ffec0  000068f8  2**0
                  CONTENTS
779 .inttab_tc2_0F7 00000000  808ffee0  808ffee0  000068f8  2**0
                  CONTENTS
780 .inttab_tc2_0F8 00000000  808fff00  808fff00  000068f8  2**0
                  CONTENTS
781 .inttab_tc2_0F9 00000000  808fff20  808fff20  000068f8  2**0
                  CONTENTS
782 .inttab_tc2_0FA 00000000  808fff40  808fff40  000068f8  2**0
                  CONTENTS
783 .inttab_tc2_0FB 00000000  808fff60  808fff60  000068f8  2**0
                  CONTENTS
784 .inttab_tc2_0FC 00000000  808fff80  808fff80  000068f8  2**0
                  CONTENTS
785 .inttab_tc2_0FD 00000000  808fffa0  808fffa0  000068f8  2**0
                  CONTENTS
786 .inttab_tc2_0FE 00000000  808fffc0  808fffc0  000068f8  2**0
                  CONTENTS
787 .inttab_tc2_0FF 00000000  808fffe0  808fffe0  000068f8  2**0
                  CONTENTS
788 .inttab_tc3_000 00000000  809fe000  809fe000  000068f8  2**0
                  CONTENTS
789 .inttab_tc3_001 00000000  809fe020  809fe020  000068f8  2**0
                  CONTENTS
790 .inttab_tc3_002 00000000  809fe040  809fe040  000068f8  2**0
                  CONTENTS
791 .inttab_tc3_003 00000000  809fe060  809fe060  000068f8  2**0
                  CONTENTS
792 .inttab_tc3_004 00000000  809fe080  809fe080  000068f8  2**0
                  CONTENTS
793 .inttab_tc3_005 00000000  809fe0a0  809fe0a0  000068f8  2**0
                  CONTENTS
794 .inttab_tc3_006 00000000  809fe0c0  809fe0c0  000068f8  2**0
                  CONTENTS
795 .inttab_tc3_007 00000000  809fe0e0  809fe0e0  000068f8  2**0
                  CONTENTS
796 .inttab_tc3_008 00000000  809fe100  809fe100  000068f8  2**0
                  CONTENTS
797 .inttab_tc3_009 00000000  809fe120  809fe120  000068f8  2**0
                  CONTENTS
798 .inttab_tc3_00A 00000000  809fe140  809fe140  000068f8  2**0
                  CONTENTS
799 .inttab_tc3_00B 00000000  809fe160  809fe160  000068f8  2**0
                  CONTENTS
800 .inttab_tc3_00C 00000000  809fe180  809fe180  000068f8  2**0
                  CONTENTS
801 .inttab_tc3_00D 00000000  809fe1a0  809fe1a0  000068f8  2**0
                  CONTENTS
802 .inttab_tc3_00E 00000000  809fe1c0  809fe1c0  000068f8  2**0
                  CONTENTS
803 .inttab_tc3_00F 00000000  809fe1e0  809fe1e0  000068f8  2**0
                  CONTENTS
804 .inttab_tc3_010 00000000  809fe200  809fe200  000068f8  2**0
                  CONTENTS
805 .inttab_tc3_011 00000000  809fe220  809fe220  000068f8  2**0
                  CONTENTS
806 .inttab_tc3_012 00000000  809fe240  809fe240  000068f8  2**0
                  CONTENTS
807 .inttab_tc3_013 00000000  809fe260  809fe260  000068f8  2**0
                  CONTENTS
808 .inttab_tc3_014 00000000  809fe280  809fe280  000068f8  2**0
                  CONTENTS
809 .inttab_tc3_015 00000000  809fe2a0  809fe2a0  000068f8  2**0
                  CONTENTS
810 .inttab_tc3_016 00000000  809fe2c0  809fe2c0  000068f8  2**0
                  CONTENTS
811 .inttab_tc3_017 00000000  809fe2e0  809fe2e0  000068f8  2**0
                  CONTENTS
812 .inttab_tc3_018 00000000  809fe300  809fe300  000068f8  2**0
                  CONTENTS
813 .inttab_tc3_019 00000000  809fe320  809fe320  000068f8  2**0
                  CONTENTS
814 .inttab_tc3_01A 00000000  809fe340  809fe340  000068f8  2**0
                  CONTENTS
815 .inttab_tc3_01B 00000000  809fe360  809fe360  000068f8  2**0
                  CONTENTS
816 .inttab_tc3_01C 00000000  809fe380  809fe380  000068f8  2**0
                  CONTENTS
817 .inttab_tc3_01D 00000000  809fe3a0  809fe3a0  000068f8  2**0
                  CONTENTS
818 .inttab_tc3_01E 00000000  809fe3c0  809fe3c0  000068f8  2**0
                  CONTENTS
819 .inttab_tc3_01F 00000000  809fe3e0  809fe3e0  000068f8  2**0
                  CONTENTS
820 .inttab_tc3_020 00000000  809fe400  809fe400  000068f8  2**0
                  CONTENTS
821 .inttab_tc3_021 00000000  809fe420  809fe420  000068f8  2**0
                  CONTENTS
822 .inttab_tc3_022 00000000  809fe440  809fe440  000068f8  2**0
                  CONTENTS
823 .inttab_tc3_023 00000000  809fe460  809fe460  000068f8  2**0
                  CONTENTS
824 .inttab_tc3_024 00000000  809fe480  809fe480  000068f8  2**0
                  CONTENTS
825 .inttab_tc3_025 00000000  809fe4a0  809fe4a0  000068f8  2**0
                  CONTENTS
826 .inttab_tc3_026 00000000  809fe4c0  809fe4c0  000068f8  2**0
                  CONTENTS
827 .inttab_tc3_027 00000000  809fe4e0  809fe4e0  000068f8  2**0
                  CONTENTS
828 .inttab_tc3_028 00000000  809fe500  809fe500  000068f8  2**0
                  CONTENTS
829 .inttab_tc3_029 00000000  809fe520  809fe520  000068f8  2**0
                  CONTENTS
830 .inttab_tc3_02A 00000000  809fe540  809fe540  000068f8  2**0
                  CONTENTS
831 .inttab_tc3_02B 00000000  809fe560  809fe560  000068f8  2**0
                  CONTENTS
832 .inttab_tc3_02C 00000000  809fe580  809fe580  000068f8  2**0
                  CONTENTS
833 .inttab_tc3_02D 00000000  809fe5a0  809fe5a0  000068f8  2**0
                  CONTENTS
834 .inttab_tc3_02E 00000000  809fe5c0  809fe5c0  000068f8  2**0
                  CONTENTS
835 .inttab_tc3_02F 00000000  809fe5e0  809fe5e0  000068f8  2**0
                  CONTENTS
836 .inttab_tc3_030 00000000  809fe600  809fe600  000068f8  2**0
                  CONTENTS
837 .inttab_tc3_031 00000000  809fe620  809fe620  000068f8  2**0
                  CONTENTS
838 .inttab_tc3_032 00000000  809fe640  809fe640  000068f8  2**0
                  CONTENTS
839 .inttab_tc3_033 00000000  809fe660  809fe660  000068f8  2**0
                  CONTENTS
840 .inttab_tc3_034 00000000  809fe680  809fe680  000068f8  2**0
                  CONTENTS
841 .inttab_tc3_035 00000000  809fe6a0  809fe6a0  000068f8  2**0
                  CONTENTS
842 .inttab_tc3_036 00000000  809fe6c0  809fe6c0  000068f8  2**0
                  CONTENTS
843 .inttab_tc3_037 00000000  809fe6e0  809fe6e0  000068f8  2**0
                  CONTENTS
844 .inttab_tc3_038 00000000  809fe700  809fe700  000068f8  2**0
                  CONTENTS
845 .inttab_tc3_039 00000000  809fe720  809fe720  000068f8  2**0
                  CONTENTS
846 .inttab_tc3_03A 00000000  809fe740  809fe740  000068f8  2**0
                  CONTENTS
847 .inttab_tc3_03B 00000000  809fe760  809fe760  000068f8  2**0
                  CONTENTS
848 .inttab_tc3_03C 00000000  809fe780  809fe780  000068f8  2**0
                  CONTENTS
849 .inttab_tc3_03D 00000000  809fe7a0  809fe7a0  000068f8  2**0
                  CONTENTS
850 .inttab_tc3_03E 00000000  809fe7c0  809fe7c0  000068f8  2**0
                  CONTENTS
851 .inttab_tc3_03F 00000000  809fe7e0  809fe7e0  000068f8  2**0
                  CONTENTS
852 .inttab_tc3_040 00000000  809fe800  809fe800  000068f8  2**0
                  CONTENTS
853 .inttab_tc3_041 00000000  809fe820  809fe820  000068f8  2**0
                  CONTENTS
854 .inttab_tc3_042 00000000  809fe840  809fe840  000068f8  2**0
                  CONTENTS
855 .inttab_tc3_043 00000000  809fe860  809fe860  000068f8  2**0
                  CONTENTS
856 .inttab_tc3_044 00000000  809fe880  809fe880  000068f8  2**0
                  CONTENTS
857 .inttab_tc3_045 00000000  809fe8a0  809fe8a0  000068f8  2**0
                  CONTENTS
858 .inttab_tc3_046 00000000  809fe8c0  809fe8c0  000068f8  2**0
                  CONTENTS
859 .inttab_tc3_047 00000000  809fe8e0  809fe8e0  000068f8  2**0
                  CONTENTS
860 .inttab_tc3_048 00000000  809fe900  809fe900  000068f8  2**0
                  CONTENTS
861 .inttab_tc3_049 00000000  809fe920  809fe920  000068f8  2**0
                  CONTENTS
862 .inttab_tc3_04A 00000000  809fe940  809fe940  000068f8  2**0
                  CONTENTS
863 .inttab_tc3_04B 00000000  809fe960  809fe960  000068f8  2**0
                  CONTENTS
864 .inttab_tc3_04C 00000000  809fe980  809fe980  000068f8  2**0
                  CONTENTS
865 .inttab_tc3_04D 00000000  809fe9a0  809fe9a0  000068f8  2**0
                  CONTENTS
866 .inttab_tc3_04E 00000000  809fe9c0  809fe9c0  000068f8  2**0
                  CONTENTS
867 .inttab_tc3_04F 00000000  809fe9e0  809fe9e0  000068f8  2**0
                  CONTENTS
868 .inttab_tc3_050 00000000  809fea00  809fea00  000068f8  2**0
                  CONTENTS
869 .inttab_tc3_051 00000000  809fea20  809fea20  000068f8  2**0
                  CONTENTS
870 .inttab_tc3_052 00000000  809fea40  809fea40  000068f8  2**0
                  CONTENTS
871 .inttab_tc3_053 00000000  809fea60  809fea60  000068f8  2**0
                  CONTENTS
872 .inttab_tc3_054 00000000  809fea80  809fea80  000068f8  2**0
                  CONTENTS
873 .inttab_tc3_055 00000000  809feaa0  809feaa0  000068f8  2**0
                  CONTENTS
874 .inttab_tc3_056 00000000  809feac0  809feac0  000068f8  2**0
                  CONTENTS
875 .inttab_tc3_057 00000000  809feae0  809feae0  000068f8  2**0
                  CONTENTS
876 .inttab_tc3_058 00000000  809feb00  809feb00  000068f8  2**0
                  CONTENTS
877 .inttab_tc3_059 00000000  809feb20  809feb20  000068f8  2**0
                  CONTENTS
878 .inttab_tc3_05A 00000000  809feb40  809feb40  000068f8  2**0
                  CONTENTS
879 .inttab_tc3_05B 00000000  809feb60  809feb60  000068f8  2**0
                  CONTENTS
880 .inttab_tc3_05C 00000000  809feb80  809feb80  000068f8  2**0
                  CONTENTS
881 .inttab_tc3_05D 00000000  809feba0  809feba0  000068f8  2**0
                  CONTENTS
882 .inttab_tc3_05E 00000000  809febc0  809febc0  000068f8  2**0
                  CONTENTS
883 .inttab_tc3_05F 00000000  809febe0  809febe0  000068f8  2**0
                  CONTENTS
884 .inttab_tc3_060 00000000  809fec00  809fec00  000068f8  2**0
                  CONTENTS
885 .inttab_tc3_061 00000000  809fec20  809fec20  000068f8  2**0
                  CONTENTS
886 .inttab_tc3_062 00000000  809fec40  809fec40  000068f8  2**0
                  CONTENTS
887 .inttab_tc3_063 00000000  809fec60  809fec60  000068f8  2**0
                  CONTENTS
888 .inttab_tc3_064 00000000  809fec80  809fec80  000068f8  2**0
                  CONTENTS
889 .inttab_tc3_065 00000000  809feca0  809feca0  000068f8  2**0
                  CONTENTS
890 .inttab_tc3_066 00000000  809fecc0  809fecc0  000068f8  2**0
                  CONTENTS
891 .inttab_tc3_067 00000000  809fece0  809fece0  000068f8  2**0
                  CONTENTS
892 .inttab_tc3_068 00000000  809fed00  809fed00  000068f8  2**0
                  CONTENTS
893 .inttab_tc3_069 00000000  809fed20  809fed20  000068f8  2**0
                  CONTENTS
894 .inttab_tc3_06A 00000000  809fed40  809fed40  000068f8  2**0
                  CONTENTS
895 .inttab_tc3_06B 00000000  809fed60  809fed60  000068f8  2**0
                  CONTENTS
896 .inttab_tc3_06C 00000000  809fed80  809fed80  000068f8  2**0
                  CONTENTS
897 .inttab_tc3_06D 00000000  809feda0  809feda0  000068f8  2**0
                  CONTENTS
898 .inttab_tc3_06E 00000000  809fedc0  809fedc0  000068f8  2**0
                  CONTENTS
899 .inttab_tc3_06F 00000000  809fede0  809fede0  000068f8  2**0
                  CONTENTS
900 .inttab_tc3_070 00000000  809fee00  809fee00  000068f8  2**0
                  CONTENTS
901 .inttab_tc3_071 00000000  809fee20  809fee20  000068f8  2**0
                  CONTENTS
902 .inttab_tc3_072 00000000  809fee40  809fee40  000068f8  2**0
                  CONTENTS
903 .inttab_tc3_073 00000000  809fee60  809fee60  000068f8  2**0
                  CONTENTS
904 .inttab_tc3_074 00000000  809fee80  809fee80  000068f8  2**0
                  CONTENTS
905 .inttab_tc3_075 00000000  809feea0  809feea0  000068f8  2**0
                  CONTENTS
906 .inttab_tc3_076 00000000  809feec0  809feec0  000068f8  2**0
                  CONTENTS
907 .inttab_tc3_077 00000000  809feee0  809feee0  000068f8  2**0
                  CONTENTS
908 .inttab_tc3_078 00000000  809fef00  809fef00  000068f8  2**0
                  CONTENTS
909 .inttab_tc3_079 00000000  809fef20  809fef20  000068f8  2**0
                  CONTENTS
910 .inttab_tc3_07A 00000000  809fef40  809fef40  000068f8  2**0
                  CONTENTS
911 .inttab_tc3_07B 00000000  809fef60  809fef60  000068f8  2**0
                  CONTENTS
912 .inttab_tc3_07C 00000000  809fef80  809fef80  000068f8  2**0
                  CONTENTS
913 .inttab_tc3_07D 00000000  809fefa0  809fefa0  000068f8  2**0
                  CONTENTS
914 .inttab_tc3_07E 00000000  809fefc0  809fefc0  000068f8  2**0
                  CONTENTS
915 .inttab_tc3_07F 00000000  809fefe0  809fefe0  000068f8  2**0
                  CONTENTS
916 .inttab_tc3_080 00000000  809ff000  809ff000  000068f8  2**0
                  CONTENTS
917 .inttab_tc3_081 00000000  809ff020  809ff020  000068f8  2**0
                  CONTENTS
918 .inttab_tc3_082 00000000  809ff040  809ff040  000068f8  2**0
                  CONTENTS
919 .inttab_tc3_083 00000000  809ff060  809ff060  000068f8  2**0
                  CONTENTS
920 .inttab_tc3_084 00000000  809ff080  809ff080  000068f8  2**0
                  CONTENTS
921 .inttab_tc3_085 00000000  809ff0a0  809ff0a0  000068f8  2**0
                  CONTENTS
922 .inttab_tc3_086 00000000  809ff0c0  809ff0c0  000068f8  2**0
                  CONTENTS
923 .inttab_tc3_087 00000000  809ff0e0  809ff0e0  000068f8  2**0
                  CONTENTS
924 .inttab_tc3_088 00000000  809ff100  809ff100  000068f8  2**0
                  CONTENTS
925 .inttab_tc3_089 00000000  809ff120  809ff120  000068f8  2**0
                  CONTENTS
926 .inttab_tc3_08A 00000000  809ff140  809ff140  000068f8  2**0
                  CONTENTS
927 .inttab_tc3_08B 00000000  809ff160  809ff160  000068f8  2**0
                  CONTENTS
928 .inttab_tc3_08C 00000000  809ff180  809ff180  000068f8  2**0
                  CONTENTS
929 .inttab_tc3_08D 00000000  809ff1a0  809ff1a0  000068f8  2**0
                  CONTENTS
930 .inttab_tc3_08E 00000000  809ff1c0  809ff1c0  000068f8  2**0
                  CONTENTS
931 .inttab_tc3_08F 00000000  809ff1e0  809ff1e0  000068f8  2**0
                  CONTENTS
932 .inttab_tc3_090 00000000  809ff200  809ff200  000068f8  2**0
                  CONTENTS
933 .inttab_tc3_091 00000000  809ff220  809ff220  000068f8  2**0
                  CONTENTS
934 .inttab_tc3_092 00000000  809ff240  809ff240  000068f8  2**0
                  CONTENTS
935 .inttab_tc3_093 00000000  809ff260  809ff260  000068f8  2**0
                  CONTENTS
936 .inttab_tc3_094 00000000  809ff280  809ff280  000068f8  2**0
                  CONTENTS
937 .inttab_tc3_095 00000000  809ff2a0  809ff2a0  000068f8  2**0
                  CONTENTS
938 .inttab_tc3_096 00000000  809ff2c0  809ff2c0  000068f8  2**0
                  CONTENTS
939 .inttab_tc3_097 00000000  809ff2e0  809ff2e0  000068f8  2**0
                  CONTENTS
940 .inttab_tc3_098 00000000  809ff300  809ff300  000068f8  2**0
                  CONTENTS
941 .inttab_tc3_099 00000000  809ff320  809ff320  000068f8  2**0
                  CONTENTS
942 .inttab_tc3_09A 00000000  809ff340  809ff340  000068f8  2**0
                  CONTENTS
943 .inttab_tc3_09B 00000000  809ff360  809ff360  000068f8  2**0
                  CONTENTS
944 .inttab_tc3_09C 00000000  809ff380  809ff380  000068f8  2**0
                  CONTENTS
945 .inttab_tc3_09D 00000000  809ff3a0  809ff3a0  000068f8  2**0
                  CONTENTS
946 .inttab_tc3_09E 00000000  809ff3c0  809ff3c0  000068f8  2**0
                  CONTENTS
947 .inttab_tc3_09F 00000000  809ff3e0  809ff3e0  000068f8  2**0
                  CONTENTS
948 .inttab_tc3_0A0 00000000  809ff400  809ff400  000068f8  2**0
                  CONTENTS
949 .inttab_tc3_0A1 00000000  809ff420  809ff420  000068f8  2**0
                  CONTENTS
950 .inttab_tc3_0A2 00000000  809ff440  809ff440  000068f8  2**0
                  CONTENTS
951 .inttab_tc3_0A3 00000000  809ff460  809ff460  000068f8  2**0
                  CONTENTS
952 .inttab_tc3_0A4 00000000  809ff480  809ff480  000068f8  2**0
                  CONTENTS
953 .inttab_tc3_0A5 00000000  809ff4a0  809ff4a0  000068f8  2**0
                  CONTENTS
954 .inttab_tc3_0A6 00000000  809ff4c0  809ff4c0  000068f8  2**0
                  CONTENTS
955 .inttab_tc3_0A7 00000000  809ff4e0  809ff4e0  000068f8  2**0
                  CONTENTS
956 .inttab_tc3_0A8 00000000  809ff500  809ff500  000068f8  2**0
                  CONTENTS
957 .inttab_tc3_0A9 00000000  809ff520  809ff520  000068f8  2**0
                  CONTENTS
958 .inttab_tc3_0AA 00000000  809ff540  809ff540  000068f8  2**0
                  CONTENTS
959 .inttab_tc3_0AB 00000000  809ff560  809ff560  000068f8  2**0
                  CONTENTS
960 .inttab_tc3_0AC 00000000  809ff580  809ff580  000068f8  2**0
                  CONTENTS
961 .inttab_tc3_0AD 00000000  809ff5a0  809ff5a0  000068f8  2**0
                  CONTENTS
962 .inttab_tc3_0AE 00000000  809ff5c0  809ff5c0  000068f8  2**0
                  CONTENTS
963 .inttab_tc3_0AF 00000000  809ff5e0  809ff5e0  000068f8  2**0
                  CONTENTS
964 .inttab_tc3_0B0 00000000  809ff600  809ff600  000068f8  2**0
                  CONTENTS
965 .inttab_tc3_0B1 00000000  809ff620  809ff620  000068f8  2**0
                  CONTENTS
966 .inttab_tc3_0B2 00000000  809ff640  809ff640  000068f8  2**0
                  CONTENTS
967 .inttab_tc3_0B3 00000000  809ff660  809ff660  000068f8  2**0
                  CONTENTS
968 .inttab_tc3_0B4 00000000  809ff680  809ff680  000068f8  2**0
                  CONTENTS
969 .inttab_tc3_0B5 00000000  809ff6a0  809ff6a0  000068f8  2**0
                  CONTENTS
970 .inttab_tc3_0B6 00000000  809ff6c0  809ff6c0  000068f8  2**0
                  CONTENTS
971 .inttab_tc3_0B7 00000000  809ff6e0  809ff6e0  000068f8  2**0
                  CONTENTS
972 .inttab_tc3_0B8 00000000  809ff700  809ff700  000068f8  2**0
                  CONTENTS
973 .inttab_tc3_0B9 00000000  809ff720  809ff720  000068f8  2**0
                  CONTENTS
974 .inttab_tc3_0BA 00000000  809ff740  809ff740  000068f8  2**0
                  CONTENTS
975 .inttab_tc3_0BB 00000000  809ff760  809ff760  000068f8  2**0
                  CONTENTS
976 .inttab_tc3_0BC 00000000  809ff780  809ff780  000068f8  2**0
                  CONTENTS
977 .inttab_tc3_0BD 00000000  809ff7a0  809ff7a0  000068f8  2**0
                  CONTENTS
978 .inttab_tc3_0BE 00000000  809ff7c0  809ff7c0  000068f8  2**0
                  CONTENTS
979 .inttab_tc3_0BF 00000000  809ff7e0  809ff7e0  000068f8  2**0
                  CONTENTS
980 .inttab_tc3_0C0 00000000  809ff800  809ff800  000068f8  2**0
                  CONTENTS
981 .inttab_tc3_0C1 00000000  809ff820  809ff820  000068f8  2**0
                  CONTENTS
982 .inttab_tc3_0C2 00000000  809ff840  809ff840  000068f8  2**0
                  CONTENTS
983 .inttab_tc3_0C3 00000000  809ff860  809ff860  000068f8  2**0
                  CONTENTS
984 .inttab_tc3_0C4 00000000  809ff880  809ff880  000068f8  2**0
                  CONTENTS
985 .inttab_tc3_0C5 00000000  809ff8a0  809ff8a0  000068f8  2**0
                  CONTENTS
986 .inttab_tc3_0C6 00000000  809ff8c0  809ff8c0  000068f8  2**0
                  CONTENTS
987 .inttab_tc3_0C7 00000000  809ff8e0  809ff8e0  000068f8  2**0
                  CONTENTS
988 .inttab_tc3_0C8 00000000  809ff900  809ff900  000068f8  2**0
                  CONTENTS
989 .inttab_tc3_0C9 00000000  809ff920  809ff920  000068f8  2**0
                  CONTENTS
990 .inttab_tc3_0CA 00000000  809ff940  809ff940  000068f8  2**0
                  CONTENTS
991 .inttab_tc3_0CB 00000000  809ff960  809ff960  000068f8  2**0
                  CONTENTS
992 .inttab_tc3_0CC 00000000  809ff980  809ff980  000068f8  2**0
                  CONTENTS
993 .inttab_tc3_0CD 00000000  809ff9a0  809ff9a0  000068f8  2**0
                  CONTENTS
994 .inttab_tc3_0CE 00000000  809ff9c0  809ff9c0  000068f8  2**0
                  CONTENTS
995 .inttab_tc3_0CF 00000000  809ff9e0  809ff9e0  000068f8  2**0
                  CONTENTS
996 .inttab_tc3_0D0 00000000  809ffa00  809ffa00  000068f8  2**0
                  CONTENTS
997 .inttab_tc3_0D1 00000000  809ffa20  809ffa20  000068f8  2**0
                  CONTENTS
998 .inttab_tc3_0D2 00000000  809ffa40  809ffa40  000068f8  2**0
                  CONTENTS
999 .inttab_tc3_0D3 00000000  809ffa60  809ffa60  000068f8  2**0
                  CONTENTS
1000 .inttab_tc3_0D4 00000000  809ffa80  809ffa80  000068f8  2**0
                  CONTENTS
1001 .inttab_tc3_0D5 00000000  809ffaa0  809ffaa0  000068f8  2**0
                  CONTENTS
1002 .inttab_tc3_0D6 00000000  809ffac0  809ffac0  000068f8  2**0
                  CONTENTS
1003 .inttab_tc3_0D7 00000000  809ffae0  809ffae0  000068f8  2**0
                  CONTENTS
1004 .inttab_tc3_0D8 00000000  809ffb00  809ffb00  000068f8  2**0
                  CONTENTS
1005 .inttab_tc3_0D9 00000000  809ffb20  809ffb20  000068f8  2**0
                  CONTENTS
1006 .inttab_tc3_0DA 00000000  809ffb40  809ffb40  000068f8  2**0
                  CONTENTS
1007 .inttab_tc3_0DB 00000000  809ffb60  809ffb60  000068f8  2**0
                  CONTENTS
1008 .inttab_tc3_0DC 00000000  809ffb80  809ffb80  000068f8  2**0
                  CONTENTS
1009 .inttab_tc3_0DD 00000000  809ffba0  809ffba0  000068f8  2**0
                  CONTENTS
1010 .inttab_tc3_0DE 00000000  809ffbc0  809ffbc0  000068f8  2**0
                  CONTENTS
1011 .inttab_tc3_0DF 00000000  809ffbe0  809ffbe0  000068f8  2**0
                  CONTENTS
1012 .inttab_tc3_0E0 00000000  809ffc00  809ffc00  000068f8  2**0
                  CONTENTS
1013 .inttab_tc3_0E1 00000000  809ffc20  809ffc20  000068f8  2**0
                  CONTENTS
1014 .inttab_tc3_0E2 00000000  809ffc40  809ffc40  000068f8  2**0
                  CONTENTS
1015 .inttab_tc3_0E3 00000000  809ffc60  809ffc60  000068f8  2**0
                  CONTENTS
1016 .inttab_tc3_0E4 00000000  809ffc80  809ffc80  000068f8  2**0
                  CONTENTS
1017 .inttab_tc3_0E5 00000000  809ffca0  809ffca0  000068f8  2**0
                  CONTENTS
1018 .inttab_tc3_0E6 00000000  809ffcc0  809ffcc0  000068f8  2**0
                  CONTENTS
1019 .inttab_tc3_0E7 00000000  809ffce0  809ffce0  000068f8  2**0
                  CONTENTS
1020 .inttab_tc3_0E8 00000000  809ffd00  809ffd00  000068f8  2**0
                  CONTENTS
1021 .inttab_tc3_0E9 00000000  809ffd20  809ffd20  000068f8  2**0
                  CONTENTS
1022 .inttab_tc3_0EA 00000000  809ffd40  809ffd40  000068f8  2**0
                  CONTENTS
1023 .inttab_tc3_0EB 00000000  809ffd60  809ffd60  000068f8  2**0
                  CONTENTS
1024 .inttab_tc3_0EC 00000000  809ffd80  809ffd80  000068f8  2**0
                  CONTENTS
1025 .inttab_tc3_0ED 00000000  809ffda0  809ffda0  000068f8  2**0
                  CONTENTS
1026 .inttab_tc3_0EE 00000000  809ffdc0  809ffdc0  000068f8  2**0
                  CONTENTS
1027 .inttab_tc3_0EF 00000000  809ffde0  809ffde0  000068f8  2**0
                  CONTENTS
1028 .inttab_tc3_0F0 00000000  809ffe00  809ffe00  000068f8  2**0
                  CONTENTS
1029 .inttab_tc3_0F1 00000000  809ffe20  809ffe20  000068f8  2**0
                  CONTENTS
1030 .inttab_tc3_0F2 00000000  809ffe40  809ffe40  000068f8  2**0
                  CONTENTS
1031 .inttab_tc3_0F3 00000000  809ffe60  809ffe60  000068f8  2**0
                  CONTENTS
1032 .inttab_tc3_0F4 00000000  809ffe80  809ffe80  000068f8  2**0
                  CONTENTS
1033 .inttab_tc3_0F5 00000000  809ffea0  809ffea0  000068f8  2**0
                  CONTENTS
1034 .inttab_tc3_0F6 00000000  809ffec0  809ffec0  000068f8  2**0
                  CONTENTS
1035 .inttab_tc3_0F7 00000000  809ffee0  809ffee0  000068f8  2**0
                  CONTENTS
1036 .inttab_tc3_0F8 00000000  809fff00  809fff00  000068f8  2**0
                  CONTENTS
1037 .inttab_tc3_0F9 00000000  809fff20  809fff20  000068f8  2**0
                  CONTENTS
1038 .inttab_tc3_0FA 00000000  809fff40  809fff40  000068f8  2**0
                  CONTENTS
1039 .inttab_tc3_0FB 00000000  809fff60  809fff60  000068f8  2**0
                  CONTENTS
1040 .inttab_tc3_0FC 00000000  809fff80  809fff80  000068f8  2**0
                  CONTENTS
1041 .inttab_tc3_0FD 00000000  809fffa0  809fffa0  000068f8  2**0
                  CONTENTS
1042 .inttab_tc3_0FE 00000000  809fffc0  809fffc0  000068f8  2**0
                  CONTENTS
1043 .inttab_tc3_0FF 00000000  809fffe0  809fffe0  000068f8  2**0
                  CONTENTS
1044 .bmhd_0_org   000001f4  af400000  af400000  00005958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1045 .bmhd_1_org   000001f4  af400200  af400200  00005b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1046 .bmhd_2_org   000001f4  af400400  af400400  00005d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1047 .bmhd_3_org   000001f4  af400600  af400600  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1048 .bmhd_0_copy  000001f4  af401000  af401000  00006128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1049 .bmhd_1_copy  000001f4  af401200  af401200  0000631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1050 .bmhd_2_copy  000001f4  af401400  af401400  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1051 .bmhd_3_copy  000001f4  af401600  af401600  00006704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1052 .CPU3.zdata   00000000  40000000  40000000  000068f8  2**0
                  CONTENTS
1053 .CPU2.zdata   00000000  50000000  50000000  000068f8  2**0
                  CONTENTS
1054 .CPU1.zdata   00000000  60000000  60000000  000068f8  2**0
                  CONTENTS
1055 .CPU0.zdata   00000000  70000000  70000000  000068f8  2**0
                  CONTENTS
1056 .zdata_powerOn 00000000  70000000  70000000  000068f8  2**0
                  CONTENTS
1057 .zdata        00000000  70000000  70000000  000068f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
1058 .lmuzdata     00000000  90000000  90000000  000068f8  2**0
                  CONTENTS
1059 .sdata        00000000  70000000  70000000  000068f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
1060 .sdata4       00000000  90040000  90040000  000068f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
1061 .CPU3.data    00000000  40000000  40000000  000068f8  2**0
                  CONTENTS
1062 .CPU3.lmudata 00000000  90030000  90030000  000068f8  2**0
                  CONTENTS
1063 .CPU2.data    00000000  50000000  50000000  000068f8  2**0
                  CONTENTS
1064 .CPU2.lmudata 00000000  90020000  90020000  000068f8  2**0
                  CONTENTS
1065 .CPU1.data    00000000  60000000  60000000  000068f8  2**0
                  CONTENTS
1066 .CPU1.lmudata 00000000  90010000  90010000  000068f8  2**0
                  CONTENTS
1067 .CPU0.data    00000000  70000000  70000000  000068f8  2**0
                  CONTENTS
1068 .CPU0.lmudata 00000000  90000000  90000000  000068f8  2**0
                  CONTENTS
1069 .data         00000010  70000000  80000200  000005e0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
1070 .bss          00000240  70000010  80000210  000005f0  2**3
                  ALLOC
1071 .heap         00001000  70000250  80000210  000005f0  2**0
                  ALLOC
1072 .lmudata      00000000  90040000  90040000  000068f8  2**0
                  CONTENTS
1073 .rodata       00000520  80000210  80000210  000005f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
1074 .CPU0.psram_text 00000000  70100000  70100000  000068f8  2**0
                  CONTENTS
1075 .CPU1.psram_text 00000000  60100000  60100000  000068f8  2**0
                  CONTENTS
1076 .CPU2.psram_text 00000000  50100000  50100000  000068f8  2**0
                  CONTENTS
1077 .CPU3.psram_text 00000000  40100000  40100000  000068f8  2**0
                  CONTENTS
1078 .CPU0.text    000003f0  80000730  80000730  00000b10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1079 .init         00000010  80000b20  80000b20  00000f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1080 .fini         00000008  80000b30  80000b30  00000f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1081 .CPU1.text    000001f8  8030010c  8030010c  00005140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1082 .CPU2.text    000001f8  8060010c  8060010c  00005440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1083 .CPU3.text    000001e6  8090010c  8090010c  00005740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1084 .text         000040d8  80000b38  80000b38  00000f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
1085 .eh_frame     00000000  80004c10  80004c10  000068f8  2**0
                  CONTENTS
1086 .ctors        00000010  80004c10  80004c10  00004ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
1087 .dtors        00000010  80004c20  80004c20  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
1088 .comment      00000082  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY
1089 .debug_aranges 00000ab8  00000000  00000000  00006980  2**3
                  CONTENTS, READONLY, DEBUGGING
1090 .debug_info   000c630a  00000000  00000000  00007438  2**0
                  CONTENTS, READONLY, DEBUGGING
1091 .debug_abbrev 00005422  00000000  00000000  000cd742  2**0
                  CONTENTS, READONLY, DEBUGGING
1092 .debug_line   00011bc8  00000000  00000000  000d2b64  2**0
                  CONTENTS, READONLY, DEBUGGING
1093 .debug_frame  000016c8  00000000  00000000  000e472c  2**2
                  CONTENTS, READONLY, DEBUGGING
1094 .debug_str    0000269c  00000000  00000000  000e5df4  2**0
                  CONTENTS, READONLY, DEBUGGING
1095 .debug_loc    00009b32  00000000  00000000  000e8490  2**0
                  CONTENTS, READONLY, DEBUGGING
1096 .debug_ranges 00000e90  00000000  00000000  000f1fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
1097 .debug_macro  0003c5fa  00000000  00000000  000f2e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .start_tc0:

a0000000 <_START>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunction(void (*fun)(void))
{
    __asm__ volatile ("ji %0" ::"a" (fun));
a0000000:	91 00 00 28 	movh.a %a2,32768
a0000004:	d9 22 98 40 	lea %a2,[%a2]2328 <80000918 <__StartUpSoftware>>
a0000008:	dc 02       	ji %a2
#endif

void _START(void)
{
    Ifx_Ssw_jumpToFunction(__StartUpSoftware);
}
a000000a:	00 90       	ret 

Disassembly of section .traptab_tc0:

80000100 <IfxCpu_Trap_vectorTable0>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu0"
#endif
void IfxCpu_Trap_vectorTable0(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80000100:	0d 00 00 02 	svlcx 
80000104:	02 f4       	mov %d4,%d15
80000106:	91 00 00 28 	movh.a %a2,32768
8000010a:	d9 22 ae d1 	lea %a2,[%a2]7022 <80001b6e <IfxCpu_Trap_memoryManagementError>>
8000010e:	dc 02       	ji %a2
80000110:	00 80       	rfe 
	...
8000011e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80000120:	0d 00 00 02 	svlcx 
80000124:	02 f4       	mov %d4,%d15
80000126:	91 00 00 28 	movh.a %a2,32768
8000012a:	d9 22 9c e1 	lea %a2,[%a2]7068 <80001b9c <IfxCpu_Trap_internalProtectionError>>
8000012e:	dc 02       	ji %a2
80000130:	00 80       	rfe 
	...
8000013e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80000140:	0d 00 00 02 	svlcx 
80000144:	02 f4       	mov %d4,%d15
80000146:	91 00 00 28 	movh.a %a2,32768
8000014a:	d9 22 8a f1 	lea %a2,[%a2]7114 <80001bca <IfxCpu_Trap_instructionError>>
8000014e:	dc 02       	ji %a2
80000150:	00 80       	rfe 
	...
8000015e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80000160:	02 f4       	mov %d4,%d15
80000162:	91 00 00 28 	movh.a %a2,32768
80000166:	d9 22 b8 f1 	lea %a2,[%a2]7160 <80001bf8 <IfxCpu_Trap_contextManagementError>>
8000016a:	dc 02       	ji %a2
8000016c:	00 80       	rfe 
	...
8000017e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80000180:	0d 00 00 02 	svlcx 
80000184:	02 f4       	mov %d4,%d15
80000186:	91 00 00 28 	movh.a %a2,32768
8000018a:	d9 22 e6 01 	lea %a2,[%a2]7206 <80001c26 <IfxCpu_Trap_busError>>
8000018e:	dc 02       	ji %a2
80000190:	00 80       	rfe 
	...
8000019e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
800001a0:	0d 00 00 02 	svlcx 
800001a4:	02 f4       	mov %d4,%d15
800001a6:	91 00 00 28 	movh.a %a2,32768
800001aa:	d9 22 d4 11 	lea %a2,[%a2]7252 <80001c54 <IfxCpu_Trap_assertion>>
800001ae:	dc 02       	ji %a2
800001b0:	00 80       	rfe 
	...
800001be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu0);
800001c0:	0d 00 00 02 	svlcx 
800001c4:	02 f4       	mov %d4,%d15
800001c6:	91 00 00 28 	movh.a %a2,32768
800001ca:	d9 22 c8 21 	lea %a2,[%a2]7304 <80001c88 <IfxCpu_Trap_systemCall_Cpu0>>
800001ce:	dc 02       	ji %a2
800001d0:	00 80       	rfe 
	...
800001de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
800001e0:	0d 00 00 02 	svlcx 
800001e4:	02 f4       	mov %d4,%d15
800001e6:	91 00 00 28 	movh.a %a2,32768
800001ea:	d9 22 f8 41 	lea %a2,[%a2]7480 <80001d38 <IfxCpu_Trap_nonMaskableInterrupt>>
800001ee:	dc 02       	ji %a2
800001f0:	00 80       	rfe 
}
800001f2:	00 90       	ret 

800001f4 <IfxCpu_Trap_vectorTable0_end>:
	...

Disassembly of section .traptab_tc1:

80300000 <IfxCpu_Trap_vectorTable1>:
#pragma ghs section
#pragma ghs section text=".traptab_cpu1"
#endif
void IfxCpu_Trap_vectorTable1(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80300000:	0d 00 00 02 	svlcx 
80300004:	02 f4       	mov %d4,%d15
80300006:	91 00 00 28 	movh.a %a2,32768
8030000a:	d9 22 ae d1 	lea %a2,[%a2]7022 <80001b6e <IfxCpu_Trap_memoryManagementError>>
8030000e:	dc 02       	ji %a2
80300010:	00 80       	rfe 
	...
8030001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80300020:	0d 00 00 02 	svlcx 
80300024:	02 f4       	mov %d4,%d15
80300026:	91 00 00 28 	movh.a %a2,32768
8030002a:	d9 22 9c e1 	lea %a2,[%a2]7068 <80001b9c <IfxCpu_Trap_internalProtectionError>>
8030002e:	dc 02       	ji %a2
80300030:	00 80       	rfe 
	...
8030003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80300040:	0d 00 00 02 	svlcx 
80300044:	02 f4       	mov %d4,%d15
80300046:	91 00 00 28 	movh.a %a2,32768
8030004a:	d9 22 8a f1 	lea %a2,[%a2]7114 <80001bca <IfxCpu_Trap_instructionError>>
8030004e:	dc 02       	ji %a2
80300050:	00 80       	rfe 
	...
8030005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80300060:	02 f4       	mov %d4,%d15
80300062:	91 00 00 28 	movh.a %a2,32768
80300066:	d9 22 b8 f1 	lea %a2,[%a2]7160 <80001bf8 <IfxCpu_Trap_contextManagementError>>
8030006a:	dc 02       	ji %a2
8030006c:	00 80       	rfe 
	...
8030007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80300080:	0d 00 00 02 	svlcx 
80300084:	02 f4       	mov %d4,%d15
80300086:	91 00 00 28 	movh.a %a2,32768
8030008a:	d9 22 e6 01 	lea %a2,[%a2]7206 <80001c26 <IfxCpu_Trap_busError>>
8030008e:	dc 02       	ji %a2
80300090:	00 80       	rfe 
	...
8030009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
803000a0:	0d 00 00 02 	svlcx 
803000a4:	02 f4       	mov %d4,%d15
803000a6:	91 00 00 28 	movh.a %a2,32768
803000aa:	d9 22 d4 11 	lea %a2,[%a2]7252 <80001c54 <IfxCpu_Trap_assertion>>
803000ae:	dc 02       	ji %a2
803000b0:	00 80       	rfe 
	...
803000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu1);
803000c0:	0d 00 00 02 	svlcx 
803000c4:	02 f4       	mov %d4,%d15
803000c6:	91 00 00 28 	movh.a %a2,32768
803000ca:	d9 22 f4 21 	lea %a2,[%a2]7348 <80001cb4 <IfxCpu_Trap_systemCall_Cpu1>>
803000ce:	dc 02       	ji %a2
803000d0:	00 80       	rfe 
	...
803000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
803000e0:	0d 00 00 02 	svlcx 
803000e4:	02 f4       	mov %d4,%d15
803000e6:	91 00 00 28 	movh.a %a2,32768
803000ea:	d9 22 f8 41 	lea %a2,[%a2]7480 <80001d38 <IfxCpu_Trap_nonMaskableInterrupt>>
803000ee:	dc 02       	ji %a2
803000f0:	00 80       	rfe 
}
803000f2:	00 90       	ret 

803000f4 <IfxCpu_Trap_vectorTable1_end>:
	...

Disassembly of section .traptab_tc2:

80600000 <IfxCpu_Trap_vectorTable2>:
#pragma ghs section text=".traptab_cpu2"
#endif

void IfxCpu_Trap_vectorTable2(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80600000:	0d 00 00 02 	svlcx 
80600004:	02 f4       	mov %d4,%d15
80600006:	91 00 00 28 	movh.a %a2,32768
8060000a:	d9 22 ae d1 	lea %a2,[%a2]7022 <80001b6e <IfxCpu_Trap_memoryManagementError>>
8060000e:	dc 02       	ji %a2
80600010:	00 80       	rfe 
	...
8060001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80600020:	0d 00 00 02 	svlcx 
80600024:	02 f4       	mov %d4,%d15
80600026:	91 00 00 28 	movh.a %a2,32768
8060002a:	d9 22 9c e1 	lea %a2,[%a2]7068 <80001b9c <IfxCpu_Trap_internalProtectionError>>
8060002e:	dc 02       	ji %a2
80600030:	00 80       	rfe 
	...
8060003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80600040:	0d 00 00 02 	svlcx 
80600044:	02 f4       	mov %d4,%d15
80600046:	91 00 00 28 	movh.a %a2,32768
8060004a:	d9 22 8a f1 	lea %a2,[%a2]7114 <80001bca <IfxCpu_Trap_instructionError>>
8060004e:	dc 02       	ji %a2
80600050:	00 80       	rfe 
	...
8060005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80600060:	02 f4       	mov %d4,%d15
80600062:	91 00 00 28 	movh.a %a2,32768
80600066:	d9 22 b8 f1 	lea %a2,[%a2]7160 <80001bf8 <IfxCpu_Trap_contextManagementError>>
8060006a:	dc 02       	ji %a2
8060006c:	00 80       	rfe 
	...
8060007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80600080:	0d 00 00 02 	svlcx 
80600084:	02 f4       	mov %d4,%d15
80600086:	91 00 00 28 	movh.a %a2,32768
8060008a:	d9 22 e6 01 	lea %a2,[%a2]7206 <80001c26 <IfxCpu_Trap_busError>>
8060008e:	dc 02       	ji %a2
80600090:	00 80       	rfe 
	...
8060009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
806000a0:	0d 00 00 02 	svlcx 
806000a4:	02 f4       	mov %d4,%d15
806000a6:	91 00 00 28 	movh.a %a2,32768
806000aa:	d9 22 d4 11 	lea %a2,[%a2]7252 <80001c54 <IfxCpu_Trap_assertion>>
806000ae:	dc 02       	ji %a2
806000b0:	00 80       	rfe 
	...
806000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu2);
806000c0:	0d 00 00 02 	svlcx 
806000c4:	02 f4       	mov %d4,%d15
806000c6:	91 00 00 28 	movh.a %a2,32768
806000ca:	d9 22 e0 31 	lea %a2,[%a2]7392 <80001ce0 <IfxCpu_Trap_systemCall_Cpu2>>
806000ce:	dc 02       	ji %a2
806000d0:	00 80       	rfe 
	...
806000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
806000e0:	0d 00 00 02 	svlcx 
806000e4:	02 f4       	mov %d4,%d15
806000e6:	91 00 00 28 	movh.a %a2,32768
806000ea:	d9 22 f8 41 	lea %a2,[%a2]7480 <80001d38 <IfxCpu_Trap_nonMaskableInterrupt>>
806000ee:	dc 02       	ji %a2
806000f0:	00 80       	rfe 
}
806000f2:	00 90       	ret 

806000f4 <IfxCpu_Trap_vectorTable2_end>:
	...

Disassembly of section .traptab_tc3:

80900000 <IfxCpu_Trap_vectorTable3>:
#endif


void IfxCpu_Trap_vectorTable3(void)
{
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_memoryManagementError);
80900000:	0d 00 00 02 	svlcx 
80900004:	02 f4       	mov %d4,%d15
80900006:	91 00 00 28 	movh.a %a2,32768
8090000a:	d9 22 ae d1 	lea %a2,[%a2]7022 <80001b6e <IfxCpu_Trap_memoryManagementError>>
8090000e:	dc 02       	ji %a2
80900010:	00 80       	rfe 
	...
8090001e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_internalProtectionError);
80900020:	0d 00 00 02 	svlcx 
80900024:	02 f4       	mov %d4,%d15
80900026:	91 00 00 28 	movh.a %a2,32768
8090002a:	d9 22 9c e1 	lea %a2,[%a2]7068 <80001b9c <IfxCpu_Trap_internalProtectionError>>
8090002e:	dc 02       	ji %a2
80900030:	00 80       	rfe 
	...
8090003e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_instructionError);
80900040:	0d 00 00 02 	svlcx 
80900044:	02 f4       	mov %d4,%d15
80900046:	91 00 00 28 	movh.a %a2,32768
8090004a:	d9 22 8a f1 	lea %a2,[%a2]7114 <80001bca <IfxCpu_Trap_instructionError>>
8090004e:	dc 02       	ji %a2
80900050:	00 80       	rfe 
	...
8090005e:	00 00       	nop 
    IfxCpu_Tsr_CallCSATSR(IfxCpu_Trap_contextManagementError);
80900060:	02 f4       	mov %d4,%d15
80900062:	91 00 00 28 	movh.a %a2,32768
80900066:	d9 22 b8 f1 	lea %a2,[%a2]7160 <80001bf8 <IfxCpu_Trap_contextManagementError>>
8090006a:	dc 02       	ji %a2
8090006c:	00 80       	rfe 
	...
8090007e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_busError);
80900080:	0d 00 00 02 	svlcx 
80900084:	02 f4       	mov %d4,%d15
80900086:	91 00 00 28 	movh.a %a2,32768
8090008a:	d9 22 e6 01 	lea %a2,[%a2]7206 <80001c26 <IfxCpu_Trap_busError>>
8090008e:	dc 02       	ji %a2
80900090:	00 80       	rfe 
	...
8090009e:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_assertion);
809000a0:	0d 00 00 02 	svlcx 
809000a4:	02 f4       	mov %d4,%d15
809000a6:	91 00 00 28 	movh.a %a2,32768
809000aa:	d9 22 d4 11 	lea %a2,[%a2]7252 <80001c54 <IfxCpu_Trap_assertion>>
809000ae:	dc 02       	ji %a2
809000b0:	00 80       	rfe 
	...
809000be:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_systemCall_Cpu3);
809000c0:	0d 00 00 02 	svlcx 
809000c4:	02 f4       	mov %d4,%d15
809000c6:	91 00 00 28 	movh.a %a2,32768
809000ca:	d9 22 cc 41 	lea %a2,[%a2]7436 <80001d0c <IfxCpu_Trap_systemCall_Cpu3>>
809000ce:	dc 02       	ji %a2
809000d0:	00 80       	rfe 
	...
809000de:	00 00       	nop 
    IfxCpu_Tsr_CallTSR(IfxCpu_Trap_nonMaskableInterrupt);
809000e0:	0d 00 00 02 	svlcx 
809000e4:	02 f4       	mov %d4,%d15
809000e6:	91 00 00 28 	movh.a %a2,32768
809000ea:	d9 22 f8 41 	lea %a2,[%a2]7480 <80001d38 <IfxCpu_Trap_nonMaskableInterrupt>>
809000ee:	dc 02       	ji %a2
809000f0:	00 80       	rfe 
}
809000f2:	00 90       	ret 

809000f4 <IfxCpu_Trap_vectorTable3_end>:
	...

Disassembly of section .start_tc1:

a0300100 <_START1>:
a0300100:	91 00 03 28 	movh.a %a2,32816
a0300104:	d9 22 0c 40 	lea %a2,[%a2]268 <8030010c <__Core1_start>>
a0300108:	dc 02       	ji %a2
#endif

void _START1(void)
{
    Ifx_Ssw_jumpToFunction(__Core1_start);
}
a030010a:	00 90       	ret 

Disassembly of section .start_tc2:

a0600100 <_START2>:
a0600100:	91 00 06 28 	movh.a %a2,32864
a0600104:	d9 22 0c 40 	lea %a2,[%a2]268 <8060010c <__Core2_start>>
a0600108:	dc 02       	ji %a2
#endif

void _START2(void)
{
    Ifx_Ssw_jumpToFunction(__Core2_start);
}
a060010a:	00 90       	ret 

Disassembly of section .start_tc3:

a0900100 <_START3>:
a0900100:	91 00 09 28 	movh.a %a2,32912
a0900104:	d9 22 0c 40 	lea %a2,[%a2]268 <8090010c <__Core3_start>>
a0900108:	dc 02       	ji %a2
#endif

void _START3(void)
{
    Ifx_Ssw_jumpToFunction(__Core3_start);
}
a090010a:	00 90       	ret 

Disassembly of section .inttab_tc0_002:

802fe040 <__intvec_tc0_2>:
802fe040:	0d 00 00 02 	svlcx 
802fe044:	91 00 00 e8 	movh.a %a14,32768
802fe048:	d9 ee d8 e3 	lea %a14,[%a14]16280 <80003f98 <canIsrTxHandler>>
802fe04c:	dc 0e       	ji %a14

Disassembly of section .inttab_tc0_003:

802fe060 <__intvec_tc0_3>:
802fe060:	0d 00 00 02 	svlcx 
802fe064:	91 00 00 e8 	movh.a %a14,32768
802fe068:	d9 ee d2 f3 	lea %a14,[%a14]16338 <80003fd2 <canIsrRxHandler>>
802fe06c:	dc 0e       	ji %a14

Disassembly of section .CPU0.text:

80000730 <__StartUpSoftware_Phase2>:
}


IFX_SSW_INLINE void Ifx_Ssw_jumpToFunctionWithLink(void *fun)
{
    __asm__ volatile ("jli %0" ::"a" (fun));
80000730:	91 00 00 28 	movh.a %a2,32768
80000734:	d9 22 ca 83 	lea %a2,[%a2]15882 <80003e0a <Ifx_Ssw_Pms_Init>>
80000738:	2d 02 20 00 	jli %a2
8000073c:	91 00 00 28 	movh.a %a2,32768
80000740:	d9 22 f0 c3 	lea %a2,[%a2]16176 <80003f30 <Ifx_Ssw_Pms_InitCheck>>
80000744:	2d 02 20 00 	jli %a2
    __asm__ volatile ("ji %0" ::"a" (fun));
80000748:	91 00 00 28 	movh.a %a2,32768
8000074c:	d9 22 54 d0 	lea %a2,[%a2]1876 <80000754 <__StartUpSoftware_Phase3PowerOnResetPath>>
80000750:	dc 02       	ji %a2
}
80000752:	00 90       	ret 

80000754 <__StartUpSoftware_Phase3PowerOnResetPath>:
    IFX_SSW_INIT_CONTEXT();
80000754:	91 40 00 a7 	movh.a %sp,28676
80000758:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
8000075c:	0d 00 80 04 	dsync 
{
    unsigned int  k;
    unsigned int  nxt_cxi_val = 0U;
    unsigned int *prvCsa      = csaBegin;
    unsigned int *nxtCsa      = csaBegin;
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80000760:	91 40 00 37 	movh.a %a3,28676
80000764:	91 40 00 27 	movh.a %a2,28676
80000768:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
8000076c:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
80000770:	01 32 20 20 	sub.a %a2,%a2,%a3
80000774:	80 22       	mov.d %d2,%a2
80000776:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
8000077a:	40 32       	mov.aa %a2,%a3
        else
        {
            *prvCsa = nxt_cxi_val;
        }

        if (k == (numOfCsa - 3U))
8000077c:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80000780:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80000782:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000784:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
80000788:	df 06 2d 00 	jeq %d6,0,800007e2 <__StartUpSoftware_Phase3PowerOnResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8000078c:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000790:	8f 42 1f 50 	sh %d5,%d2,-12
80000794:	26 75       	and %d5,%d7
80000796:	a6 54       	or %d4,%d5
        if (k == 0U)
80000798:	df 03 14 00 	jeq %d3,0,800007c0 <__StartUpSoftware_Phase3PowerOnResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
8000079c:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
8000079e:	5f 03 15 00 	jeq %d3,%d0,800007c8 <__StartUpSoftware_Phase3PowerOnResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
800007a2:	c2 13       	add %d3,1
800007a4:	60 22       	mov.a %a2,%d2
        {
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
        }

        prvCsa  = (unsigned int *)nxtCsa;
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007a6:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800007aa:	5f 36 17 00 	jeq %d6,%d3,800007d8 <__StartUpSoftware_Phase3PowerOnResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007ae:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
800007b0:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
800007b4:	8f 42 1f 50 	sh %d5,%d2,-12
800007b8:	26 75       	and %d5,%d7
800007ba:	a6 54       	or %d4,%d5
        if (k == 0U)
800007bc:	df 03 f0 ff 	jne %d3,0,8000079c <__StartUpSoftware_Phase3PowerOnResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
800007c0:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
800007c4:	5f 03 ef ff 	jne %d3,%d0,800007a2 <__StartUpSoftware_Phase3PowerOnResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
800007c8:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
800007cc:	c2 13       	add %d3,1
800007ce:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
800007d0:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
800007d4:	5f 36 ed ff 	jne %d6,%d3,800007ae <__StartUpSoftware_Phase3PowerOnResetPath+0x5a>
800007d8:	1b f6 ff 2f 	addi %d2,%d6,-1
800007dc:	06 62       	sh %d2,6
800007de:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    }

    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
800007e2:	82 02       	mov %d2,0
800007e4:	74 22       	st.w [%a2],%d2
800007e6:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
800007ea:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
800007ee:	91 00 00 28 	movh.a %a2,32768
800007f2:	d9 22 8a 30 	lea %a2,[%a2]2250 <800008ca <__StartUpSoftware_Phase4>>
800007f6:	dc 02       	ji %a2
}
800007f8:	00 90       	ret 

800007fa <__StartUpSoftware_Phase3ApplicationResetPath>:
    IFX_SSW_INIT_CONTEXT();
800007fa:	91 40 00 a7 	movh.a %sp,28676
800007fe:	d9 aa 40 89 	lea %sp,[%sp]-27136 <70039600 <__USTACK0>>
    __asm__ volatile ("dsync" : : : "memory");
80000802:	0d 00 80 04 	dsync 
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
80000806:	91 40 00 37 	movh.a %a3,28676
8000080a:	91 40 00 27 	movh.a %a2,28676
8000080e:	d9 33 c0 09 	lea %a3,[%a3]-25600 <70039c00 <__CSA0>>
80000812:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <7003bc00 <__CSA0_END>>
80000816:	01 32 20 20 	sub.a %a2,%a2,%a3
8000081a:	80 22       	mov.d %d2,%a2
8000081c:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
80000820:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
80000822:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80000826:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80000828:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000082a:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8000082e:	df 06 2d 00 	jeq %d6,0,80000888 <__StartUpSoftware_Phase3ApplicationResetPath+0x8e>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000832:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80000836:	8f 42 1f 50 	sh %d5,%d2,-12
8000083a:	26 75       	and %d5,%d7
8000083c:	a6 54       	or %d4,%d5
        if (k == 0U)
8000083e:	df 03 14 00 	jeq %d3,0,80000866 <__StartUpSoftware_Phase3ApplicationResetPath+0x6c>
            *prvCsa = nxt_cxi_val;
80000842:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80000844:	5f 03 15 00 	jeq %d3,%d0,8000086e <__StartUpSoftware_Phase3ApplicationResetPath+0x74>
    for (k = 0U; k < numOfCsa; k++)
80000848:	c2 13       	add %d3,1
8000084a:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
8000084c:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80000850:	5f 36 17 00 	jeq %d6,%d3,8000087e <__StartUpSoftware_Phase3ApplicationResetPath+0x84>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000854:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80000856:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
8000085a:	8f 42 1f 50 	sh %d5,%d2,-12
8000085e:	26 75       	and %d5,%d7
80000860:	a6 54       	or %d4,%d5
        if (k == 0U)
80000862:	df 03 f0 ff 	jne %d3,0,80000842 <__StartUpSoftware_Phase3ApplicationResetPath+0x48>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80000866:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
8000086a:	5f 03 ef ff 	jne %d3,%d0,80000848 <__StartUpSoftware_Phase3ApplicationResetPath+0x4e>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8000086e:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
80000872:	c2 13       	add %d3,1
80000874:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80000876:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8000087a:	5f 36 ed ff 	jne %d6,%d3,80000854 <__StartUpSoftware_Phase3ApplicationResetPath+0x5a>
8000087e:	1b f6 ff 2f 	addi %d2,%d6,-1
80000882:	06 62       	sh %d2,6
80000884:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80000888:	82 02       	mov %d2,0
8000088a:	74 22       	st.w [%a2],%d2
8000088c:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
80000890:	0d 00 c0 04 	isync 
    __asm__ volatile ("ji %0" ::"a" (fun));
80000894:	91 00 00 28 	movh.a %a2,32768
80000898:	d9 22 a0 20 	lea %a2,[%a2]2208 <800008a0 <__StartUpSoftware_Phase5>>
8000089c:	dc 02       	ji %a2
}
8000089e:	00 90       	ret 

800008a0 <__StartUpSoftware_Phase5>:
800008a0:	91 00 00 28 	movh.a %a2,32768
800008a4:	d9 22 ac 20 	lea %a2,[%a2]2220 <800008ac <__StartUpSoftware_Phase6>>
800008a8:	dc 02       	ji %a2
}
800008aa:	00 90       	ret 

800008ac <__StartUpSoftware_Phase6>:
    Ifx_Ssw_startCore(&MODULE_CPU1, (unsigned int)__START(1));           /*The status returned by function call is ignored */
800008ac:	91 00 03 2a 	movh.a %a2,41008
800008b0:	80 22       	mov.d %d2,%a2
800008b2:	1b 02 10 40 	addi %d4,%d2,256
800008b6:	91 20 88 4f 	movh.a %a4,63618
800008ba:	6d 00 97 19 	call 80003be8 <Ifx_Ssw_startCore>
800008be:	91 00 00 28 	movh.a %a2,32768
800008c2:	d9 22 9c 60 	lea %a2,[%a2]2460 <8000099c <__Core0_start>>
800008c6:	dc 02       	ji %a2
}
800008c8:	00 90       	ret 

800008ca <__StartUpSoftware_Phase4>:
    password  = watchdog->CON0.B.PW;
800008ca:	91 30 00 4f 	movh.a %a4,61443
800008ce:	19 44 0c 96 	ld.w %d4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
800008d2:	91 30 00 2f 	movh.a %a2,61443
800008d6:	19 28 28 a6 	ld.w %d8,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
800008da:	37 04 6e 41 	extr.u %d4,%d4,2,14
800008de:	d9 44 0c 96 	lea %a4,[%a4]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
800008e2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
        Ifx_Ssw_serviceCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
800008e6:	8f f4 83 41 	xor %d4,%d4,63
800008ea:	37 08 6e 81 	extr.u %d8,%d8,2,14
800008ee:	6d 00 e1 18 	call 80003ab0 <Ifx_Ssw_serviceCpuWatchdog>
        Ifx_Ssw_serviceSafetyWatchdog(safetyWdtPassword);
800008f2:	8f f8 83 41 	xor %d4,%d8,63
800008f6:	6d 00 f4 18 	call 80003ade <Ifx_Ssw_serviceSafetyWatchdog>
    IFX_CFG_SSW_CALLOUT_PLL_INIT();
800008fa:	91 00 00 48 	movh.a %a4,32768
800008fe:	d9 44 2c 90 	lea %a4,[%a4]620 <8000026c <IfxScuCcu_defaultClockConfig>>
80000902:	6d 00 65 03 	call 80000fcc <IfxScuCcu_init>
80000906:	df 12 03 80 	jne %d2,1,8000090c <__StartUpSoftware_Phase4+0x42>

/** Insert DEBUG instruction
 */
IFX_INLINE void Ifx__debug(void)
{
    __asm__ volatile ("debug" : : : "memory");
8000090a:	00 a0       	debug 
8000090c:	91 00 00 28 	movh.a %a2,32768
80000910:	d9 22 a0 20 	lea %a2,[%a2]2208 <800008a0 <__StartUpSoftware_Phase5>>
80000914:	dc 02       	ji %a2
}
80000916:	00 90       	ret 

80000918 <__StartUpSoftware>:
    Ifx_Ssw_setAddressReg(a1, __SDATA2(0));
80000918:	91 10 00 18 	movh.a %a1,32769
8000091c:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
80000920:	3b 00 98 20 	mov %d2,2432
80000924:	cd 42 e0 0f 	mtcr $psw,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
80000928:	91 30 00 2f 	movh.a %a2,61443
8000092c:	19 22 10 16 	ld.w %d2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
80000930:	7b d0 38 31 	movh %d3,5005
80000934:	26 23       	and %d3,%d2
    unsigned int  tempValue = SCU_RSTSTAT.U;
80000936:	d9 22 10 16 	lea %a2,[%a2]24656 <f0036050 <bmhd_3_copy+0x40c34a50>>
    if ((tempValue & IFX_SSW_POWERONRESET_MASK) > 0U)
8000093a:	df 03 15 80 	jne %d3,0,80000964 <__StartUpSoftware+0x4c>
    else if ((tempValue & IFX_SSW_APPLICATIONRESET_MASK) > 0U)
8000093e:	8f b2 1f 31 	and %d3,%d2,507
80000942:	df 03 17 00 	jeq %d3,0,80000970 <__StartUpSoftware+0x58>
        tempValue = (SCU_RSTCON.U >> ((31U - Ifx_Ssw_CLZ(tempValue)) << 1U)) & 3U;
80000946:	91 30 00 2f 	movh.a %a2,61443
8000094a:	0f 03 b0 21 	clz %d2,%d3
8000094e:	8b f2 01 21 	rsub %d2,%d2,31
80000952:	19 23 18 16 	ld.w %d3,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
80000956:	06 12       	sh %d2,1
80000958:	57 03 62 22 	extr.u %d2,%d3,%d2,2
8000095c:	d9 22 18 16 	lea %a2,[%a2]24664 <f0036058 <bmhd_3_copy+0x40c34a58>>
        if (tempValue == IFX_SSW_APPLICATIONRESET)
80000960:	df 22 0a 00 	jeq %d2,2,80000974 <__StartUpSoftware+0x5c>
80000964:	91 00 00 28 	movh.a %a2,32768
80000968:	d9 22 70 c0 	lea %a2,[%a2]1840 <80000730 <__StartUpSoftware_Phase2>>
8000096c:	dc 02       	ji %a2
}
8000096e:	00 90       	ret 
    else if (((unsigned int)tempValue & ((unsigned int)IFX_SCU_RSTSTAT_CB3_MSK << IFX_SCU_RSTSTAT_CB3_OFF)))
80000970:	ef 42 08 00 	jz.t %d2,20,80000980 <__StartUpSoftware+0x68>
    __asm__ volatile ("ji %0" ::"a" (fun));
80000974:	91 00 00 28 	movh.a %a2,32768
80000978:	d9 22 7a f0 	lea %a2,[%a2]2042 <800007fa <__StartUpSoftware_Phase3ApplicationResetPath>>
8000097c:	dc 02       	ji %a2
}
8000097e:	00 90       	ret 
    else if (CPU0_KRST0.B.RSTSTAT != 0)   /*CPU0 KRST status */
80000980:	91 10 88 2f 	movh.a %a2,63617
80000984:	19 22 00 0d 	ld.w %d2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
80000988:	d9 22 00 0d 	lea %a2,[%a2]-12288 <f880d000 <bmhd_3_copy+0x4940ba00>>
8000098c:	37 02 e2 20 	extr.u %d2,%d2,1,2
80000990:	df 02 f2 ff 	jne %d2,0,80000974 <__StartUpSoftware+0x5c>
80000994:	1d ff e8 ff 	j 80000964 <__StartUpSoftware+0x4c>

80000998 <hardware_init_hook>:
{}
80000998:	00 90       	ret 

8000099a <software_init_hook>:
{}
8000099a:	00 90       	ret 

8000099c <__Core0_start>:
    password  = watchdog->CON0.B.PW;
8000099c:	91 30 00 2f 	movh.a %a2,61443
    password  = watchdog->CON0.B.PW;
800009a0:	91 30 00 3f 	movh.a %a3,61443
    password  = watchdog->CON0.B.PW;
800009a4:	19 23 0c 96 	ld.w %d3,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
800009a8:	19 32 28 a6 	ld.w %d2,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
    password  = watchdog->CON0.B.PW;
800009ac:	37 03 6e 31 	extr.u %d3,%d3,2,14
    password  = watchdog->CON0.B.PW;
800009b0:	37 02 6e 21 	extr.u %d2,%d2,2,14
    if (watchdog->CON0.B.LCK)
800009b4:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
800009b8:	8f f3 83 81 	xor %d8,%d3,63
    password  = watchdog->CON0.B.PW;
800009bc:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
    password  = watchdog->CON0.B.PW;
800009c0:	d9 33 28 a6 	lea %a3,[%a3]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800009c4:	8f f2 83 91 	xor %d9,%d2,63
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009c8:	8f 28 00 20 	sh %d2,%d8,2
    if (watchdog->CON0.B.LCK)
800009cc:	6f 14 0b 00 	jz.t %d4,1,800009e2 <__Core0_start+0x46>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009d0:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009d2:	8f 28 00 20 	sh %d2,%d8,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009d6:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009da:	a6 23       	or %d3,%d2
800009dc:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009e0:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800009e2:	91 30 00 2f 	movh.a %a2,61443
800009e6:	19 24 0c 96 	ld.w %d4,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
800009ea:	d9 22 0c 96 	lea %a2,[%a2]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
800009ee:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
800009f2:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800009f4:	a6 24       	or %d4,%d2
800009f6:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800009fa:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
800009fc:	54 24       	ld.w %d4,[%a2]
800009fe:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
80000a02:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80000a06:	cd 03 04 09 	mtcr $dcon0,%d3
80000a0a:	0d 00 c0 04 	isync 
    Ifx_Ssw_setAddressReg(a0, __SDATA1(0));
80000a0e:	91 10 00 07 	movh.a %a0,28673
80000a12:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(0));
80000a16:	91 10 00 88 	movh.a %a8,32769
80000a1a:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(0));
80000a1e:	91 10 00 99 	movh.a %a9,36865
80000a22:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(0));
80000a26:	91 00 00 38 	movh.a %a3,32768
80000a2a:	80 33       	mov.d %d3,%a3
80000a2c:	1b 03 10 30 	addi %d3,%d3,256
80000a30:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(0));
80000a34:	91 00 03 38 	movh.a %a3,32816
80000a38:	80 33       	mov.d %d3,%a3
80000a3a:	1b 03 00 3e 	addi %d3,%d3,-8192
80000a3e:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(0));
80000a42:	91 40 00 37 	movh.a %a3,28676
80000a46:	80 33       	mov.d %d3,%a3
80000a48:	1b 03 b0 39 	addi %d3,%d3,-25856
80000a4c:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80000a50:	54 23       	ld.w %d3,[%a2]
80000a52:	6f 13 09 00 	jz.t %d3,1,80000a64 <__Core0_start+0xc8>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a56:	54 23       	ld.w %d3,[%a2]
80000a58:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a5c:	a6 23       	or %d3,%d2
80000a5e:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a62:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80000a64:	91 30 00 cf 	movh.a %a12,61443
80000a68:	19 c3 0c 96 	ld.w %d3,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000a6c:	d9 cc 0c 96 	lea %a12,[%a12]25164 <f003624c <bmhd_3_copy+0x40c34c4c>>
80000a70:	b7 03 10 30 	insert %d3,%d3,0,0,16
    Ifx_Ssw_disableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000a74:	40 c4       	mov.aa %a4,%a12
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80000a76:	a6 32       	or %d2,%d3
80000a78:	8f 32 40 21 	or %d2,%d2,3
80000a7c:	02 84       	mov %d4,%d8
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80000a7e:	74 c2       	st.w [%a12],%d2
    watchdog->CON0.U;
80000a80:	54 c2       	ld.w %d2,[%a12]
80000a82:	6d 00 4d 18 	call 80003b1c <Ifx_Ssw_disableCpuWatchdog>
    Ifx_Ssw_disableSafetyWatchdog(safetyWdtPassword);
80000a86:	02 94       	mov %d4,%d9
80000a88:	6d 00 8c 18 	call 80003ba0 <Ifx_Ssw_disableSafetyWatchdog>
	hardware_init_hook();
80000a8c:	6d ff 86 ff 	call 80000998 <hardware_init_hook>
	(void)Ifx_Ssw_doCppInit();
80000a90:	6d 00 1e 19 	call 80003ccc <Ifx_Ssw_doCppInit>
	software_init_hook();
80000a94:	6d ff 83 ff 	call 8000099a <software_init_hook>
    Ifx_Ssw_enableSafetyWatchdog(safetyWdtPassword);
80000a98:	02 94       	mov %d4,%d9
80000a9a:	6d 00 95 18 	call 80003bc4 <Ifx_Ssw_enableSafetyWatchdog>
    Ifx_Ssw_enableCpuWatchdog(&MODULE_SCU.WDTCPU[0], cpuWdtPassword);
80000a9e:	02 84       	mov %d4,%d8
80000aa0:	40 c4       	mov.aa %a4,%a12
80000aa2:	6d 00 5e 18 	call 80003b5e <Ifx_Ssw_enableCpuWatchdog>
    __asm__ volatile ("ji %0" ::"a" (fun));
80000aa6:	91 00 00 28 	movh.a %a2,32768
80000aaa:	d9 22 92 b0 	lea %a2,[%a2]2770 <80000ad2 <core0_main>>
80000aae:	dc 02       	ji %a2

80000ab0 <x>:
    __asm__ volatile ("ji %a11");
}

IFX_SSW_INLINE void Ifx_Ssw_infiniteLoop(void)
{
    __asm("x: loopu\t x");
80000ab0:	fd 00 00 80 	loopu 80000ab0 <x>
}
80000ab4:	00 90       	ret 

80000ab6 <nopDelay>:
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "IfxScuWdt.h"
#include "MCMCAN.h"

void nopDelay(uint32 cycles) {
80000ab6:	40 ae       	mov.aa %a14,%sp
    cycles*=150000;
80000ab8:	7b 20 00 20 	movh %d2,2
80000abc:	1b 02 9f 24 	addi %d2,%d2,18928
80000ac0:	e2 24       	mul %d4,%d2
    for (uint32 i = 0; i < cycles; i++) {
80000ac2:	82 02       	mov %d2,0
80000ac4:	1d 00 04 00 	j 80000acc <nopDelay+0x16>

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80000ac8:	00 00       	nop 
80000aca:	c2 12       	add %d2,1
80000acc:	3f 42 fe ff 	jlt.u %d2,%d4,80000ac8 <nopDelay+0x12>
        __nop();
    }
}
80000ad0:	00 90       	ret 

80000ad2 <core0_main>:

IFX_ALIGN(4) IfxCpu_syncEvent g_cpuSyncEvent = 0;

void core0_main(void)
{
80000ad2:	40 ae       	mov.aa %a14,%sp
}


IFX_INLINE void IfxCpu_enableInterrupts(void)
{
    __enable();
80000ad4:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!
     * Enable the watchdogs and service them periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
80000ad8:	6d 00 7f 07 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
80000adc:	02 24       	mov %d4,%d2
80000ade:	6d 00 ee 06 	call 800018ba <IfxScuWdt_disableCpuWatchdog>
    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
80000ae2:	6d 00 8c 07 	call 800019fa <IfxScuWdt_getSafetyWatchdogPassword>
80000ae6:	02 24       	mov %d4,%d2
80000ae8:	6d 00 28 07 	call 80001938 <IfxScuWdt_disableSafetyWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
80000aec:	91 00 00 c7 	movh.a %a12,28672
80000af0:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
80000af4:	40 c4       	mov.aa %a4,%a12
80000af6:	6d 00 79 09 	call 80001de8 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
80000afa:	82 14       	mov %d4,1
80000afc:	40 c4       	mov.aa %a4,%a12
80000afe:	6d 00 33 09 	call 80001d64 <IfxCpu_waitEvent>
    
    initLeds();
80000b02:	6d 00 47 1b 	call 80004190 <initLeds>
    /* Application code: initialization of MCMCAN module, LEDs and the transmission of the CAN message */
    initMcmcan();
80000b06:	6d 00 8f 1a 	call 80004024 <initMcmcan>
    initLeds();
80000b0a:	6d 00 43 1b 	call 80004190 <initLeds>
    transmitCanMessage();
80000b0e:	6d 00 0e 1b 	call 8000412a <transmitCanMessage>

    while(1)
    {
        transmitCanMessage();
80000b12:	6d 00 0c 1b 	call 8000412a <transmitCanMessage>
        nopDelay(5);
80000b16:	82 54       	mov %d4,5
80000b18:	6d ff cf ff 	call 80000ab6 <nopDelay>
    while(1)
80000b1c:	1d ff fb ff 	j 80000b12 <core0_main+0x40>

Disassembly of section .init:

80000b20 <_init>:
80000b20:	6d 00 70 00 	call 80000c00 <frame_dummy>
80000b24:	6d 00 62 20 	call 80004be8 <__do_global_ctors_aux>
80000b28:	00 90       	ret 
80000b2a:	00 00       	nop 
80000b2c:	00 00       	nop 
	...

Disassembly of section .fini:

80000b30 <_fini>:
80000b30:	6d 00 36 00 	call 80000b9c <__do_global_dtors_aux>
80000b34:	00 90       	ret 
	...

Disassembly of section .CPU1.text:

8030010c <__Core1_start>:
    password  = watchdog->CON0.B.PW;
8030010c:	91 30 00 2f 	movh.a %a2,61443
80300110:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80300114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80300118:	54 22       	ld.w %d2,[%a2]
8030011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8030011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(1));
80300122:	91 40 00 a6 	movh.a %sp,24580
80300126:	d9 aa 40 89 	lea %sp,[%sp]-27136 <60039600 <__USTACK1>>
    __asm__ volatile ("dsync" : : : "memory");
8030012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8030012e:	3b 00 98 30 	mov %d3,2432
80300132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80300136:	54 23       	ld.w %d3,[%a2]
80300138:	6f 13 c7 80 	jnz.t %d3,1,803002c6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8030013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030013e:	91 30 00 2f 	movh.a %a2,61443
80300142:	19 24 18 96 	ld.w %d4,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
80300146:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
8030014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8030014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80300150:	a6 24       	or %d4,%d2
80300152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80300156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80300158:	54 24       	ld.w %d4,[%a2]
8030015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8030015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80300162:	cd 03 04 09 	mtcr $dcon0,%d3
80300166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(1));
8030016a:	91 00 03 38 	movh.a %a3,32816
8030016e:	80 33       	mov.d %d3,%a3
80300170:	1b 03 00 30 	addi %d3,%d3,0
80300174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(1));
80300178:	91 00 06 38 	movh.a %a3,32864
8030017c:	80 33       	mov.d %d3,%a3
8030017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80300182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(1));
80300186:	91 40 00 36 	movh.a %a3,24580
8030018a:	80 33       	mov.d %d3,%a3
8030018c:	1b 03 b0 39 	addi %d3,%d3,-25856
80300190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80300194:	54 23       	ld.w %d3,[%a2]
80300196:	6f 13 09 00 	jz.t %d3,1,803001a8 <__Core1_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8030019a:	54 23       	ld.w %d3,[%a2]
8030019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803001a0:	a6 23       	or %d3,%d2
803001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803001a8:	91 30 00 2f 	movh.a %a2,61443
803001ac:	19 23 18 96 	ld.w %d3,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803001b0:	d9 22 18 96 	lea %a2,[%a2]25176 <f0036258 <bmhd_3_copy+0x40c34c58>>
803001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803001b8:	a6 32       	or %d2,%d3
803001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
803001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(1));
803001c2:	91 10 00 07 	movh.a %a0,28673
803001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(1));
803001ca:	91 10 00 18 	movh.a %a1,32769
803001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(1));
803001d2:	91 10 00 88 	movh.a %a8,32769
803001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(1));
803001da:	91 10 00 99 	movh.a %a9,36865
803001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
803001e2:	91 40 00 36 	movh.a %a3,24580
803001e6:	91 40 00 26 	movh.a %a2,24580
803001ea:	d9 33 c0 09 	lea %a3,[%a3]-25600 <60039c00 <__CSA1>>
803001ee:	d9 22 c0 0b 	lea %a2,[%a2]-17408 <6003bc00 <__CSA1_END>>
803001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
803001f6:	80 22       	mov.d %d2,%a2
803001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
803001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
803001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80300202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80300204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8030020a:	df 06 2d 00 	jeq %d6,0,80300264 <__Core1_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8030020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300212:	8f 42 1f 50 	sh %d5,%d2,-12
80300216:	26 75       	and %d5,%d7
80300218:	a6 54       	or %d4,%d5
        if (k == 0U)
8030021a:	df 03 14 00 	jeq %d3,0,80300242 <__Core1_start+0x136>
            *prvCsa = nxt_cxi_val;
8030021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80300220:	5f 03 15 00 	jeq %d3,%d0,8030024a <__Core1_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80300224:	c2 13       	add %d3,1
80300226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8030022c:	5f 36 17 00 	jeq %d6,%d3,8030025a <__Core1_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80300232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80300236:	8f 42 1f 50 	sh %d5,%d2,-12
8030023a:	26 75       	and %d5,%d7
8030023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8030023e:	df 03 f0 ff 	jne %d3,0,8030021e <__Core1_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80300242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80300246:	5f 03 ef ff 	jne %d3,%d0,80300224 <__Core1_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8030024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8030024e:	c2 13       	add %d3,1
80300250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80300252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80300256:	5f 36 ed ff 	jne %d6,%d3,80300230 <__Core1_start+0x124>
8030025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8030025e:	06 62       	sh %d2,6
80300260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80300264:	82 02       	mov %d2,0
80300266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80300268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8030026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80300270:	6d e8 da 1c 	call 80003c24 <Ifx_Ssw_getStmFrequency>
80300274:	02 24       	mov %d4,%d2
80300276:	6d e8 fd 1f 	call 80004270 <__extendsfdf2>
8030027a:	0b 23 10 48 	mov %e4,%d3,%d2
8030027e:	7b c0 b1 6e 	movh %d6,60188
80300282:	7b a0 f1 73 	movh %d7,16154
80300286:	1b d6 32 64 	addi %d6,%d6,17197
8030028a:	1b 27 6e 73 	addi %d7,%d7,14050
8030028e:	6d e8 59 21 	call 80004540 <__muldf3>
80300292:	0b 23 10 48 	mov %e4,%d3,%d2
80300296:	6d e8 d1 1f 	call 80004238 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8030029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8030029e:	a2 83       	sub %d3,%d8
803002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8030029a <__Core1_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU2, (unsigned int)__START(2));       /*The status returned by function call is ignored */
803002a4:	91 00 06 2a 	movh.a %a2,41056
803002a8:	80 22       	mov.d %d2,%a2
803002aa:	1b 02 10 40 	addi %d4,%d2,256
803002ae:	91 40 88 4f 	movh.a %a4,63620
803002b2:	6d e8 9b 1c 	call 80003be8 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
803002b6:	91 00 03 28 	movh.a %a2,32816
803002ba:	d9 22 1a b0 	lea %a2,[%a2]730 <803002da <core1_main>>
803002be:	dc 02       	ji %a2

803002c0 <x>:
    __asm("x: loopu\t x");
803002c0:	fd 00 00 80 	loopu 803002c0 <x>
}
803002c4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002c6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002c8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
803002ca:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
803002ce:	a6 23       	or %d3,%d2
803002d0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
803002d4:	74 23       	st.w [%a2],%d3
803002d6:	1d ff 34 ff 	j 8030013e <__Core1_start+0x32>

803002da <core1_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core1_main(void)
{
803002da:	40 ae       	mov.aa %a14,%sp
803002dc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG1 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
803002e0:	6d e8 7b 0b 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
803002e4:	02 24       	mov %d4,%d2
803002e6:	6d e8 ea 0a 	call 800018ba <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
803002ea:	91 00 00 c7 	movh.a %a12,28672
803002ee:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
803002f2:	40 c4       	mov.aa %a4,%a12
803002f4:	6d e8 7a 0d 	call 80001de8 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
803002f8:	82 14       	mov %d4,1
803002fa:	40 c4       	mov.aa %a4,%a12
803002fc:	6d e8 34 0d 	call 80001d64 <IfxCpu_waitEvent>
    
    while(1)
80300300:	1d 00 00 00 	j 80300300 <core1_main+0x26>

Disassembly of section .CPU2.text:

8060010c <__Core2_start>:
    password  = watchdog->CON0.B.PW;
8060010c:	91 30 00 2f 	movh.a %a2,61443
80600110:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80600114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80600118:	54 22       	ld.w %d2,[%a2]
8060011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8060011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(2));
80600122:	91 10 00 a5 	movh.a %sp,20481
80600126:	d9 aa 40 85 	lea %sp,[%sp]22016 <50015600 <__USTACK2>>
    __asm__ volatile ("dsync" : : : "memory");
8060012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8060012e:	3b 00 98 30 	mov %d3,2432
80600132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80600136:	54 23       	ld.w %d3,[%a2]
80600138:	6f 13 c7 80 	jnz.t %d3,1,806002c6 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8060013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8060013e:	91 30 00 2f 	movh.a %a2,61443
80600142:	19 24 24 96 	ld.w %d4,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
80600146:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
8060014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8060014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80600150:	a6 24       	or %d4,%d2
80600152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80600156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80600158:	54 24       	ld.w %d4,[%a2]
8060015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8060015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80600162:	cd 03 04 09 	mtcr $dcon0,%d3
80600166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(2));
8060016a:	91 00 06 38 	movh.a %a3,32864
8060016e:	80 33       	mov.d %d3,%a3
80600170:	1b 03 00 30 	addi %d3,%d3,0
80600174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(2));
80600178:	91 00 09 38 	movh.a %a3,32912
8060017c:	80 33       	mov.d %d3,%a3
8060017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80600182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(2));
80600186:	91 10 00 35 	movh.a %a3,20481
8060018a:	80 33       	mov.d %d3,%a3
8060018c:	1b 03 b0 35 	addi %d3,%d3,23296
80600190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80600194:	54 23       	ld.w %d3,[%a2]
80600196:	6f 13 09 00 	jz.t %d3,1,806001a8 <__Core2_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8060019a:	54 23       	ld.w %d3,[%a2]
8060019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806001a0:	a6 23       	or %d3,%d2
806001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806001a8:	91 30 00 2f 	movh.a %a2,61443
806001ac:	19 23 24 96 	ld.w %d3,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
806001b0:	d9 22 24 96 	lea %a2,[%a2]25188 <f0036264 <bmhd_3_copy+0x40c34c64>>
806001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806001b8:	a6 32       	or %d2,%d3
806001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
806001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(2));
806001c2:	91 10 00 07 	movh.a %a0,28673
806001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(2));
806001ca:	91 10 00 18 	movh.a %a1,32769
806001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(2));
806001d2:	91 10 00 88 	movh.a %a8,32769
806001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(2));
806001da:	91 10 00 99 	movh.a %a9,36865
806001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
806001e2:	91 10 00 35 	movh.a %a3,20481
806001e6:	91 10 00 25 	movh.a %a2,20481
806001ea:	d9 33 c0 05 	lea %a3,[%a3]23552 <50015c00 <__CSA2>>
806001ee:	d9 22 c0 07 	lea %a2,[%a2]31744 <50017c00 <__CSA2_END>>
806001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
806001f6:	80 22       	mov.d %d2,%a2
806001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
806001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
806001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80600202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80600204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8060020a:	df 06 2d 00 	jeq %d6,0,80600264 <__Core2_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8060020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600212:	8f 42 1f 50 	sh %d5,%d2,-12
80600216:	26 75       	and %d5,%d7
80600218:	a6 54       	or %d4,%d5
        if (k == 0U)
8060021a:	df 03 14 00 	jeq %d3,0,80600242 <__Core2_start+0x136>
            *prvCsa = nxt_cxi_val;
8060021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80600220:	5f 03 15 00 	jeq %d3,%d0,8060024a <__Core2_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80600224:	c2 13       	add %d3,1
80600226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8060022c:	5f 36 17 00 	jeq %d6,%d3,8060025a <__Core2_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80600232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80600236:	8f 42 1f 50 	sh %d5,%d2,-12
8060023a:	26 75       	and %d5,%d7
8060023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8060023e:	df 03 f0 ff 	jne %d3,0,8060021e <__Core2_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80600242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80600246:	5f 03 ef ff 	jne %d3,%d0,80600224 <__Core2_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8060024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8060024e:	c2 13       	add %d3,1
80600250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80600252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80600256:	5f 36 ed ff 	jne %d6,%d3,80600230 <__Core2_start+0x124>
8060025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8060025e:	06 62       	sh %d2,6
80600260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80600264:	82 02       	mov %d2,0
80600266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80600268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8060026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80600270:	6d d0 da 1c 	call 80003c24 <Ifx_Ssw_getStmFrequency>
80600274:	02 24       	mov %d4,%d2
80600276:	6d d0 fd 1f 	call 80004270 <__extendsfdf2>
8060027a:	0b 23 10 48 	mov %e4,%d3,%d2
8060027e:	7b c0 b1 6e 	movh %d6,60188
80600282:	7b a0 f1 73 	movh %d7,16154
80600286:	1b d6 32 64 	addi %d6,%d6,17197
8060028a:	1b 27 6e 73 	addi %d7,%d7,14050
8060028e:	6d d0 59 21 	call 80004540 <__muldf3>
80600292:	0b 23 10 48 	mov %e4,%d3,%d2
80600296:	6d d0 d1 1f 	call 80004238 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8060029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8060029e:	a2 83       	sub %d3,%d8
806002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8060029a <__Core2_start+0x18e>
    (void)Ifx_Ssw_startCore(&MODULE_CPU3, (unsigned int)__START(3));       /*The status returned by function call is ignored */
806002a4:	91 00 09 2a 	movh.a %a2,41104
806002a8:	80 22       	mov.d %d2,%a2
806002aa:	1b 02 10 40 	addi %d4,%d2,256
806002ae:	91 60 88 4f 	movh.a %a4,63622
806002b2:	6d d0 9b 1c 	call 80003be8 <Ifx_Ssw_startCore>
    __asm__ volatile ("ji %0" ::"a" (fun));
806002b6:	91 00 06 28 	movh.a %a2,32864
806002ba:	d9 22 1a b0 	lea %a2,[%a2]730 <806002da <core2_main>>
806002be:	dc 02       	ji %a2

806002c0 <x>:
    __asm("x: loopu\t x");
806002c0:	fd 00 00 80 	loopu 806002c0 <x>
}
806002c4:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806002c6:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806002c8:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
806002ca:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
806002ce:	a6 23       	or %d3,%d2
806002d0:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
806002d4:	74 23       	st.w [%a2],%d3
806002d6:	1d ff 34 ff 	j 8060013e <__Core2_start+0x32>

806002da <core2_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core2_main(void)
{
806002da:	40 ae       	mov.aa %a14,%sp
806002dc:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG2 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
806002e0:	6d d0 7b 0b 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
806002e4:	02 24       	mov %d4,%d2
806002e6:	6d d0 ea 0a 	call 800018ba <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
806002ea:	91 00 00 c7 	movh.a %a12,28672
806002ee:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
806002f2:	40 c4       	mov.aa %a4,%a12
806002f4:	6d d0 7a 0d 	call 80001de8 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
806002f8:	82 14       	mov %d4,1
806002fa:	40 c4       	mov.aa %a4,%a12
806002fc:	6d d0 34 0d 	call 80001d64 <IfxCpu_waitEvent>
    
    while(1)
80600300:	1d 00 00 00 	j 80600300 <core2_main+0x26>

Disassembly of section .CPU3.text:

8090010c <__Core3_start>:
    password  = watchdog->CON0.B.PW;
8090010c:	91 30 00 2f 	movh.a %a2,61443
80900110:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
    unsigned int   stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80900114:	85 f8 10 01 	ld.w %d8,f0001010 <bmhd_3_copy+0x40bffa10>
80900118:	54 22       	ld.w %d2,[%a2]
8090011a:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= IFX_SSW_WDT_PASSWORD_INVERT_MSK;
8090011e:	8f f2 83 21 	xor %d2,%d2,63
    Ifx_Ssw_setAddressReg(sp, __USTACK(3));
80900122:	91 10 00 a4 	movh.a %sp,16385
80900126:	d9 aa 40 85 	lea %sp,[%sp]22016 <40015600 <__USTACK3>>
    __asm__ volatile ("dsync" : : : "memory");
8090012a:	0d 00 80 04 	dsync 
    Ifx_Ssw_MTCR(CPU_PSW, IFX_CFG_SSW_PSW_DEFAULT);
8090012e:	3b 00 98 30 	mov %d3,2432
80900132:	cd 43 e0 0f 	mtcr $psw,%d3
    if (watchdog->CON0.B.LCK)
80900136:	54 23       	ld.w %d3,[%a2]
80900138:	6f 13 be 80 	jnz.t %d3,1,809002b4 <x+0x6>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8090013c:	06 22       	sh %d2,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8090013e:	91 30 00 2f 	movh.a %a2,61443
80900142:	19 24 30 96 	ld.w %d4,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
80900146:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
8090014a:	b7 04 10 40 	insert %d4,%d4,0,0,16
        Ifx_Ssw_MTCR(CPU_PCON0, pcon0.U);
8090014e:	82 03       	mov %d3,0
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80900150:	a6 24       	or %d4,%d2
80900152:	8f 24 40 41 	or %d4,%d4,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80900156:	74 24       	st.w [%a2],%d4
    watchdog->CON0.U;
80900158:	54 24       	ld.w %d4,[%a2]
8090015a:	cd c3 20 09 	mtcr $pcon0,%d3
    __asm__ volatile ("isync" : : : "memory");
8090015e:	0d 00 c0 04 	isync 
        Ifx_Ssw_MTCR(CPU_DCON0, dcon0.U);
80900162:	cd 03 04 09 	mtcr $dcon0,%d3
80900166:	0d 00 c0 04 	isync 
    Ifx_Ssw_MTCR(CPU_BTV, (unsigned int)__TRAPTAB(3));
8090016a:	91 00 09 38 	movh.a %a3,32912
8090016e:	80 33       	mov.d %d3,%a3
80900170:	1b 03 00 30 	addi %d3,%d3,0
80900174:	cd 43 e2 0f 	mtcr $btv,%d3
    Ifx_Ssw_MTCR(CPU_BIV, (unsigned int)__INTTAB(3));
80900178:	91 00 0a 38 	movh.a %a3,32928
8090017c:	80 33       	mov.d %d3,%a3
8090017e:	1b 03 00 3e 	addi %d3,%d3,-8192
80900182:	cd 03 e2 0f 	mtcr $biv,%d3
    Ifx_Ssw_MTCR(CPU_ISP, (unsigned int)__ISTACK(3));
80900186:	91 10 00 34 	movh.a %a3,16385
8090018a:	80 33       	mov.d %d3,%a3
8090018c:	1b 03 b0 35 	addi %d3,%d3,23296
80900190:	cd 83 e2 0f 	mtcr $isp,%d3
    if (watchdog->CON0.B.LCK)
80900194:	54 23       	ld.w %d3,[%a2]
80900196:	6f 13 09 00 	jz.t %d3,1,809001a8 <__Core3_start+0x9c>
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8090019a:	54 23       	ld.w %d3,[%a2]
8090019c:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809001a0:	a6 23       	or %d3,%d2
809001a2:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809001a6:	74 23       	st.w [%a2],%d3
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809001a8:	91 30 00 2f 	movh.a %a2,61443
809001ac:	19 23 30 96 	ld.w %d3,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
809001b0:	d9 22 30 96 	lea %a2,[%a2]25200 <f0036270 <bmhd_3_copy+0x40c34c70>>
809001b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809001b8:	a6 32       	or %d2,%d3
809001ba:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809001be:	74 22       	st.w [%a2],%d2
    watchdog->CON0.U;
809001c0:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setAddressReg(a0, __SDATA1(3));
809001c2:	91 10 00 07 	movh.a %a0,28673
809001c6:	d9 00 00 08 	lea %a0,[%a0]-32768 <70008000 <_SMALL_DATA_>>
    Ifx_Ssw_setAddressReg(a1, __SDATA2(3));
809001ca:	91 10 00 18 	movh.a %a1,32769
809001ce:	d9 11 00 08 	lea %a1,[%a1]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a8, __SDATA3(3));
809001d2:	91 10 00 88 	movh.a %a8,32769
809001d6:	d9 88 00 08 	lea %a8,[%a8]-32768 <80008000 <_SMALL_DATA2_>>
    Ifx_Ssw_setAddressReg(a9, __SDATA4(3));
809001da:	91 10 00 99 	movh.a %a9,36865
809001de:	d9 99 00 08 	lea %a9,[%a9]-32768 <90008000 <_SMALL_DATA4_>>
    unsigned int numOfCsa     = (((unsigned int)csaEnd - (unsigned int)csaBegin) / 64U);
809001e2:	91 10 00 34 	movh.a %a3,16385
809001e6:	91 10 00 24 	movh.a %a2,16385
809001ea:	d9 33 c0 05 	lea %a3,[%a3]23552 <40015c00 <__CSA3>>
809001ee:	d9 22 c0 07 	lea %a2,[%a2]31744 <40017c00 <__CSA3_END>>
809001f2:	01 32 20 20 	sub.a %a2,%a2,%a3
809001f6:	80 22       	mov.d %d2,%a2
809001f8:	8f a2 1f 60 	sh %d6,%d2,-6
    unsigned int *prvCsa      = csaBegin;
809001fc:	40 32       	mov.aa %a2,%a3
        if (k == (numOfCsa - 3U))
809001fe:	1b d6 ff 0f 	addi %d0,%d6,-3
    for (k = 0U; k < numOfCsa; k++)
80900202:	82 03       	mov %d3,0
    unsigned int *nxtCsa      = csaBegin;
80900204:	80 32       	mov.d %d2,%a3
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900206:	7b f0 00 70 	movh %d7,15
    for (k = 0U; k < numOfCsa; k++)
8090020a:	df 06 2d 00 	jeq %d6,0,80900264 <__Core3_start+0x158>
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
8090020e:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900212:	8f 42 1f 50 	sh %d5,%d2,-12
80900216:	26 75       	and %d5,%d7
80900218:	a6 54       	or %d4,%d5
        if (k == 0U)
8090021a:	df 03 14 00 	jeq %d3,0,80900242 <__Core3_start+0x136>
            *prvCsa = nxt_cxi_val;
8090021e:	74 24       	st.w [%a2],%d4
        if (k == (numOfCsa - 3U))
80900220:	5f 03 15 00 	jeq %d3,%d0,8090024a <__Core3_start+0x13e>
    for (k = 0U; k < numOfCsa; k++)
80900224:	c2 13       	add %d3,1
80900226:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900228:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
8090022c:	5f 36 17 00 	jeq %d6,%d3,8090025a <__Core3_start+0x14e>
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900230:	02 42       	mov %d2,%d4
                      ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFFFFU << 6U)) >> 6U);
80900232:	37 02 70 43 	extr.u %d4,%d2,6,16
        nxt_cxi_val = ((unsigned int)((unsigned int)nxtCsa & ((unsigned int)0XFU << 28U)) >> 12U) | \
80900236:	8f 42 1f 50 	sh %d5,%d2,-12
8090023a:	26 75       	and %d5,%d7
8090023c:	a6 54       	or %d4,%d5
        if (k == 0U)
8090023e:	df 03 f0 ff 	jne %d3,0,8090021e <__Core3_start+0x112>
            Ifx_Ssw_MTCR(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
80900242:	cd 84 e3 0f 	mtcr $fcx,%d4
        if (k == (numOfCsa - 3U))
80900246:	5f 03 ef ff 	jne %d3,%d0,80900224 <__Core3_start+0x118>
            Ifx_Ssw_MTCR(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
8090024a:	cd c4 e3 0f 	mtcr $lcx,%d4
    for (k = 0U; k < numOfCsa; k++)
8090024e:	c2 13       	add %d3,1
80900250:	60 22       	mov.a %a2,%d2
        nxtCsa += IFX_SSW_CSA_SIZE; /* next CSA */
80900252:	1b 02 04 40 	addi %d4,%d2,64
    for (k = 0U; k < numOfCsa; k++)
80900256:	5f 36 ed ff 	jne %d6,%d3,80900230 <__Core3_start+0x124>
8090025a:	1b f6 ff 2f 	addi %d2,%d6,-1
8090025e:	06 62       	sh %d2,6
80900260:	01 32 00 26 	addsc.a %a2,%a3,%d2,0
    *prvCsa = 0U;                       /* Store null pointer in last CSA (= very first time!) */
80900264:	82 02       	mov %d2,0
80900266:	74 22       	st.w [%a2],%d2
    __asm__ volatile ("dsync" : : : "memory");
80900268:	0d 00 80 04 	dsync 
    __asm__ volatile ("isync" : : : "memory");
8090026c:	0d 00 c0 04 	isync 
    stmCount = (unsigned int)(Ifx_Ssw_getStmFrequency() * IFX_CFG_SSW_STARTCPU_WAIT_TIME_IN_SECONDS);
80900270:	6d b8 da 1c 	call 80003c24 <Ifx_Ssw_getStmFrequency>
80900274:	02 24       	mov %d4,%d2
80900276:	6d b8 fd 1f 	call 80004270 <__extendsfdf2>
8090027a:	0b 23 10 48 	mov %e4,%d3,%d2
8090027e:	7b c0 b1 6e 	movh %d6,60188
80900282:	7b a0 f1 73 	movh %d7,16154
80900286:	1b d6 32 64 	addi %d6,%d6,17197
8090028a:	1b 27 6e 73 	addi %d7,%d7,14050
8090028e:	6d b8 59 21 	call 80004540 <__muldf3>
80900292:	0b 23 10 48 	mov %e4,%d3,%d2
80900296:	6d b8 d1 1f 	call 80004238 <__fixunsdfsi>
    while ((unsigned int)(STM0_TIM0.U - stmCountBegin) < stmCount)
8090029a:	85 f3 10 01 	ld.w %d3,f0001010 <bmhd_3_copy+0x40bffa10>
8090029e:	a2 83       	sub %d3,%d8
809002a0:	3f 23 fd ff 	jlt.u %d3,%d2,8090029a <__Core3_start+0x18e>
    __asm__ volatile ("ji %0" ::"a" (fun));
809002a4:	91 00 09 28 	movh.a %a2,32912
809002a8:	d9 22 08 b0 	lea %a2,[%a2]712 <809002c8 <core3_main>>
809002ac:	dc 02       	ji %a2

809002ae <x>:
    __asm("x: loopu\t x");
809002ae:	fd 00 00 80 	loopu 809002ae <x>
}
809002b2:	00 90       	ret 
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809002b4:	54 23       	ld.w %d3,[%a2]
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809002b6:	06 22       	sh %d2,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
809002b8:	b7 03 10 30 	insert %d3,%d3,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
809002bc:	a6 23       	or %d3,%d2
809002be:	8f 13 40 31 	or %d3,%d3,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
809002c2:	74 23       	st.w [%a2],%d3
809002c4:	1d ff 3d ff 	j 8090013e <__Core3_start+0x32>

809002c8 <core3_main>:
#include "IfxScuWdt.h"

extern IfxCpu_syncEvent g_cpuSyncEvent;

void core3_main(void)
{
809002c8:	40 ae       	mov.aa %a14,%sp
809002ca:	0d 00 00 03 	enable 
    IfxCpu_enableInterrupts();
    
    /* !!WATCHDOG3 IS DISABLED HERE!!
     * Enable the watchdog and service it periodically if it is required
     */
    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
809002ce:	6d b8 84 0b 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
809002d2:	02 24       	mov %d4,%d2
809002d4:	6d b8 f3 0a 	call 800018ba <IfxScuWdt_disableCpuWatchdog>
    
    /* Wait for CPU sync event */
    IfxCpu_emitEvent(&g_cpuSyncEvent);
809002d8:	91 00 00 c7 	movh.a %a12,28672
809002dc:	d9 cc 18 00 	lea %a12,[%a12]24 <70000018 <g_cpuSyncEvent>>
809002e0:	40 c4       	mov.aa %a4,%a12
809002e2:	6d b8 83 0d 	call 80001de8 <IfxCpu_emitEvent>
    IfxCpu_waitEvent(&g_cpuSyncEvent, 1);
809002e6:	82 14       	mov %d4,1
809002e8:	40 c4       	mov.aa %a4,%a12
809002ea:	6d b8 3d 0d 	call 80001d64 <IfxCpu_waitEvent>
    
    while(1)
809002ee:	1d 00 00 00 	j 809002ee <core3_main+0x26>

Disassembly of section .text:

80000b38 <deregister_tm_clones>:
80000b38:	7b 00 00 27 	movh %d2,28672
80000b3c:	1b 02 01 20 	addi %d2,%d2,16
80000b40:	91 00 00 47 	movh.a %a4,28672
80000b44:	60 22       	mov.a %a2,%d2
80000b46:	d9 44 10 00 	lea %a4,[%a4]16 <70000010 <__TMC_END__>>
80000b4a:	7d 42 0a 00 	jeq.a %a2,%a4,80000b5e <deregister_tm_clones+0x26>
80000b4e:	91 00 00 20 	movh.a %a2,0
80000b52:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000b56:	bd 02 04 00 	jz.a %a2,80000b5e <deregister_tm_clones+0x26>
80000b5a:	2d 02 00 00 	calli %a2
80000b5e:	00 90       	ret 

80000b60 <register_tm_clones>:
80000b60:	7b 00 00 27 	movh %d2,28672
80000b64:	1b 02 01 20 	addi %d2,%d2,16
80000b68:	91 00 00 47 	movh.a %a4,28672
80000b6c:	60 22       	mov.a %a2,%d2
80000b6e:	d9 44 10 00 	lea %a4,[%a4]16 <70000010 <__TMC_END__>>
80000b72:	01 42 20 20 	sub.a %a2,%a2,%a4
80000b76:	80 22       	mov.d %d2,%a2
80000b78:	8f e2 3f 30 	sha %d3,%d2,-2
80000b7c:	8f 12 1e 20 	sh %d2,%d2,-31
80000b80:	42 32       	add %d2,%d3
80000b82:	8f f2 3f 40 	sha %d4,%d2,-1
80000b86:	df 04 0a 00 	jeq %d4,0,80000b9a <register_tm_clones+0x3a>
80000b8a:	91 00 00 20 	movh.a %a2,0
80000b8e:	d9 22 00 00 	lea %a2,[%a2]0 <0 <__TRICORE_DERIVATE_MEMORY_MAP__-0x380>>
80000b92:	bd 02 04 00 	jz.a %a2,80000b9a <register_tm_clones+0x3a>
80000b96:	2d 02 00 00 	calli %a2
80000b9a:	00 90       	ret 

80000b9c <__do_global_dtors_aux>:
80000b9c:	91 00 00 e7 	movh.a %a14,28672
80000ba0:	39 e2 10 00 	ld.bu %d2,[%a14]16 <70000010 <__TMC_END__>>
80000ba4:	df 02 2d 80 	jne %d2,0,80000bfe <__do_global_dtors_aux+0x62>
80000ba8:	91 00 00 38 	movh.a %a3,32768
80000bac:	91 00 00 28 	movh.a %a2,32768
80000bb0:	d9 33 f0 04 	lea %a3,[%a3]19504 <80004c30 <__DTOR_END__>>
80000bb4:	d9 22 e4 04 	lea %a2,[%a2]19492 <80004c24 <__DTOR_LIST__>>
80000bb8:	01 23 20 20 	sub.a %a2,%a3,%a2
80000bbc:	80 22       	mov.d %d2,%a2
80000bbe:	86 e2       	sha %d2,-2
80000bc0:	1b f2 ff 8f 	addi %d8,%d2,-1
80000bc4:	91 00 00 c7 	movh.a %a12,28672
80000bc8:	7b 00 00 28 	movh %d2,32768
80000bcc:	1b 42 c2 24 	addi %d2,%d2,19492
80000bd0:	60 2d       	mov.a %a13,%d2
80000bd2:	19 c2 14 00 	ld.w %d2,[%a12]20 <70000014 <dtor_idx.0>>
80000bd6:	7f 82 0f 80 	jge.u %d2,%d8,80000bf4 <__do_global_dtors_aux+0x58>
80000bda:	d9 cc 14 00 	lea %a12,[%a12]20 <70000014 <dtor_idx.0>>
80000bde:	c2 12       	add %d2,1
80000be0:	74 c2       	st.w [%a12],%d2
80000be2:	06 22       	sh %d2,2
80000be4:	01 d2 00 26 	addsc.a %a2,%a13,%d2,0
80000be8:	d4 22       	ld.a %a2,[%a2]
80000bea:	2d 02 00 00 	calli %a2
80000bee:	54 c2       	ld.w %d2,[%a12]
80000bf0:	3f 82 f7 ff 	jlt.u %d2,%d8,80000bde <__do_global_dtors_aux+0x42>
80000bf4:	6d ff a2 ff 	call 80000b38 <deregister_tm_clones>
80000bf8:	82 12       	mov %d2,1
80000bfa:	e9 e2 10 00 	st.b [%a14]16 <70000010 <__TMC_END__>>,%d2
80000bfe:	00 90       	ret 

80000c00 <frame_dummy>:
80000c00:	6d ff b0 ff 	call 80000b60 <register_tm_clones>
80000c04:	00 90       	ret 

80000c06 <IfxScuCcu_calRGainParameters>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P)
{
80000c06:	40 ae       	mov.aa %a14,%sp
    float32  mod_amp       = IfxScuCcu_MA_percent[modamp];
80000c08:	8f 24 00 20 	sh %d2,%d4,2
80000c0c:	91 00 00 28 	movh.a %a2,32768
80000c10:	d9 22 14 b0 	lea %a2,[%a2]724 <800002d4 <IfxScuCcu_MA_percent>>
80000c14:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80000c18:	54 22       	ld.w %d2,[%a2]

IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000c1a:	91 30 00 2f 	movh.a %a2,61443
80000c1e:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000c22:	54 23       	ld.w %d3,[%a2]
80000c24:	8f 23 1e 30 	sh %d3,%d3,-30
80000c28:	df 03 15 00 	jeq %d3,0,80000c52 <IfxScuCcu_calRGainParameters+0x4c>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000c2c:	54 23       	ld.w %d3,[%a2]
80000c2e:	8f 23 1e 30 	sh %d3,%d3,-30
80000c32:	df 13 47 00 	jeq %d3,1,80000cc0 <IfxScuCcu_calRGainParameters+0xba>
    {
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
    }
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000c36:	54 23       	ld.w %d3,[%a2]
80000c38:	8f 23 1e 30 	sh %d3,%d3,-30
80000c3c:	df 23 05 00 	jeq %d3,2,80000c46 <IfxScuCcu_calRGainParameters+0x40>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0f;
80000c40:	82 04       	mov %d4,0
80000c42:	1d 00 0c 00 	j 80000c5a <IfxScuCcu_calRGainParameters+0x54>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000c46:	7b 90 b9 44 	movh %d4,19353
80000c4a:	1b 04 68 49 	addi %d4,%d4,-27008
80000c4e:	1d 00 06 00 	j 80000c5a <IfxScuCcu_calRGainParameters+0x54>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000c52:	7b f0 cb 44 	movh %d4,19647
80000c56:	1b 04 c2 4b 	addi %d4,%d4,-17376
    float32 *RGainNom_Temp = &(RGain_P->RGainNom);
    uint16  *RGain_Temp    = &(RGain_P->RGainHex);

    Ifx_SCU *scu           = &MODULE_SCU;
    float32  Fosc_Hz       = IfxScuCcu_getOscFrequency();
    float32  Fdco_hz       = (Fosc_Hz * (scu->SYSPLLCON0.B.NDIV + 1)) / (scu->SYSPLLCON0.B.PDIV + 1);
80000c5a:	91 30 00 2f 	movh.a %a2,61443
80000c5e:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000c62:	d9 23 18 00 	lea %a3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000c66:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000c6a:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000c6e:	c2 13       	add %d3,1
80000c70:	4b 03 41 31 	itof %d3,%d3
80000c74:	4b 43 41 40 	mul.f %d4,%d3,%d4
80000c78:	54 33       	ld.w %d3,[%a3]
80000c7a:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000c7e:	c2 13       	add %d3,1
80000c80:	4b 03 41 31 	itof %d3,%d3
80000c84:	4b 34 51 40 	div.f %d4,%d4,%d3

    *RGainNom_Temp = IFXSCUCCU_GET_RGAIN_NOM(mod_amp, Fdco_hz);
80000c88:	7b 80 2c 34 	movh %d3,17096
80000c8c:	4b 32 51 30 	div.f %d3,%d2,%d3
80000c90:	6b 03 21 33 	add.f %d3,%d3,%d3
80000c94:	7b c0 a5 24 	movh %d2,19036
80000c98:	1b 02 a0 2b 	addi %d2,%d2,-17920
80000c9c:	4b 24 51 20 	div.f %d2,%d4,%d2
80000ca0:	4b 23 41 20 	mul.f %d2,%d3,%d2
80000ca4:	74 42       	st.w [%a4],%d2
    *RGain_Temp    = IFXSCUCCU_GET_RGAIN_HEX(*RGainNom_Temp);
80000ca6:	7b 00 20 34 	movh %d3,16896
80000caa:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000cae:	7b 00 f0 33 	movh %d3,16128
80000cb2:	6b 03 21 22 	add.f %d2,%d2,%d3
80000cb6:	4b 02 71 21 	ftouz %d2,%d2
80000cba:	f9 42 04 00 	st.h [%a4]4,%d2
}
80000cbe:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000cc0:	7b 90 b9 44 	movh %d4,19353
80000cc4:	1b 04 68 49 	addi %d4,%d4,-27008
80000cc8:	1d ff c9 ff 	j 80000c5a <IfxScuCcu_calRGainParameters+0x54>

80000ccc <IfxScuCcu_getPerPllFrequency1>:
    return mscFreq;
}


float32 IfxScuCcu_getPerPllFrequency1(void)
{
80000ccc:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000cce:	91 30 00 2f 	movh.a %a2,61443
80000cd2:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000cd6:	54 22       	ld.w %d2,[%a2]
80000cd8:	8f 22 1e 20 	sh %d2,%d2,-30
80000cdc:	df 02 15 00 	jeq %d2,0,80000d06 <IfxScuCcu_getPerPllFrequency1+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000ce0:	54 22       	ld.w %d2,[%a2]
80000ce2:	8f 22 1e 20 	sh %d2,%d2,-30
80000ce6:	df 12 32 00 	jeq %d2,1,80000d4a <IfxScuCcu_getPerPllFrequency1+0x7e>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000cea:	54 22       	ld.w %d2,[%a2]
80000cec:	8f 22 1e 20 	sh %d2,%d2,-30
80000cf0:	df 22 05 00 	jeq %d2,2,80000cfa <IfxScuCcu_getPerPllFrequency1+0x2e>
        freq = 0.0f;
80000cf4:	82 04       	mov %d4,0
80000cf6:	1d 00 0c 00 	j 80000d0e <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000cfa:	7b 90 b9 44 	movh %d4,19353
80000cfe:	1b 04 68 49 	addi %d4,%d4,-27008
80000d02:	1d 00 06 00 	j 80000d0e <IfxScuCcu_getPerPllFrequency1+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000d06:	7b f0 cb 44 	movh %d4,19647
80000d0a:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency1;
    float32  oscFreq;
    oscFreq       = IfxScuCcu_getOscFrequency();

    pllFrequency1 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K2DIV + 1));
80000d0e:	91 30 00 2f 	movh.a %a2,61443
80000d12:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000d16:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d1a:	19 22 28 00 	ld.w %d2,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000d1e:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000d22:	c2 12       	add %d2,1
80000d24:	4b 02 41 21 	itof %d2,%d2
80000d28:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000d2c:	54 32       	ld.w %d2,[%a3]
80000d2e:	37 02 63 2c 	extr.u %d2,%d2,24,3
80000d32:	19 23 2c 00 	ld.w %d3,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000d36:	8f 73 00 31 	and %d3,%d3,7
80000d3a:	c2 13       	add %d3,1
80000d3c:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000d40:	4b 02 41 21 	itof %d2,%d2

    return pllFrequency1;
}
80000d44:	4b 24 51 20 	div.f %d2,%d4,%d2
80000d48:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000d4a:	7b 90 b9 44 	movh %d4,19353
80000d4e:	1b 04 68 49 	addi %d4,%d4,-27008
80000d52:	1d ff de ff 	j 80000d0e <IfxScuCcu_getPerPllFrequency1+0x42>

80000d56 <IfxScuCcu_getPerPllFrequency2>:


float32 IfxScuCcu_getPerPllFrequency2(void)
{
80000d56:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000d58:	91 30 00 2f 	movh.a %a2,61443
80000d5c:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000d60:	54 22       	ld.w %d2,[%a2]
80000d62:	8f 22 1e 20 	sh %d2,%d2,-30
80000d66:	df 02 15 00 	jeq %d2,0,80000d90 <IfxScuCcu_getPerPllFrequency2+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000d6a:	54 22       	ld.w %d2,[%a2]
80000d6c:	8f 22 1e 20 	sh %d2,%d2,-30
80000d70:	df 12 40 00 	jeq %d2,1,80000df0 <IfxScuCcu_getPerPllFrequency2+0x9a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000d74:	54 22       	ld.w %d2,[%a2]
80000d76:	8f 22 1e 20 	sh %d2,%d2,-30
80000d7a:	df 22 05 00 	jeq %d2,2,80000d84 <IfxScuCcu_getPerPllFrequency2+0x2e>
        freq = 0.0f;
80000d7e:	82 02       	mov %d2,0
80000d80:	1d 00 0c 00 	j 80000d98 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000d84:	7b 90 b9 24 	movh %d2,19353
80000d88:	1b 02 68 29 	addi %d2,%d2,-27008
80000d8c:	1d 00 06 00 	j 80000d98 <IfxScuCcu_getPerPllFrequency2+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000d90:	7b f0 cb 24 	movh %d2,19647
80000d94:	1b 02 c2 2b 	addi %d2,%d2,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  pllFrequency2;
    float32  oscFreq;
    oscFreq = IfxScuCcu_getOscFrequency();

    if (!(scu->PERPLLCON0.B.DIVBY))
80000d98:	91 30 00 2f 	movh.a %a2,61443
80000d9c:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000da0:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000da4:	6f 03 2c 80 	jnz.t %d3,0,80000dfc <IfxScuCcu_getPerPllFrequency2+0xa6>
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 1.6f);
80000da8:	91 30 00 2f 	movh.a %a2,61443
80000dac:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000db0:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000db4:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000db8:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000dbc:	c2 13       	add %d3,1
80000dbe:	4b 03 41 31 	itof %d3,%d3
80000dc2:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000dc6:	54 34       	ld.w %d4,[%a3]
80000dc8:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000dcc:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000dd0:	37 02 63 24 	extr.u %d2,%d2,8,3
80000dd4:	c2 12       	add %d2,1
80000dd6:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000dda:	4b 02 41 21 	itof %d2,%d2
80000dde:	7b d0 fc 43 	movh %d4,16333
80000de2:	1b d4 cc 4c 	addi %d4,%d4,-13107
80000de6:	4b 42 41 20 	mul.f %d2,%d2,%d4
80000dea:	4b 23 51 20 	div.f %d2,%d3,%d2
80000dee:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000df0:	7b 90 b9 24 	movh %d2,19353
80000df4:	1b 02 68 29 	addi %d2,%d2,-27008
80000df8:	1d ff d0 ff 	j 80000d98 <IfxScuCcu_getPerPllFrequency2+0x42>
    }
    else
    {
        pllFrequency2 = (oscFreq * (scu->PERPLLCON0.B.NDIV + 1)) / ((scu->PERPLLCON0.B.PDIV + 1) * (scu->PERPLLCON1.B.K3DIV + 1) * 2);
80000dfc:	91 30 00 2f 	movh.a %a2,61443
80000e00:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000e04:	d9 23 28 00 	lea %a3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e08:	19 23 28 00 	ld.w %d3,[%a2]40 <f0030028 <bmhd_3_copy+0x40c2ea28>>
80000e0c:	37 03 e7 34 	extr.u %d3,%d3,9,7
80000e10:	c2 13       	add %d3,1
80000e12:	4b 03 41 31 	itof %d3,%d3
80000e16:	4b 23 41 30 	mul.f %d3,%d3,%d2
80000e1a:	54 34       	ld.w %d4,[%a3]
80000e1c:	37 04 63 4c 	extr.u %d4,%d4,24,3
80000e20:	19 22 2c 00 	ld.w %d2,[%a2]44 <f003002c <bmhd_3_copy+0x40c2ea2c>>
80000e24:	37 02 63 24 	extr.u %d2,%d2,8,3
80000e28:	c2 12       	add %d2,1
80000e2a:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80000e2e:	06 12       	sh %d2,1
80000e30:	4b 02 41 21 	itof %d2,%d2
80000e34:	4b 23 51 20 	div.f %d2,%d3,%d2
    }

    return pllFrequency2;
}
80000e38:	00 90       	ret 

80000e3a <IfxScuCcu_getPllFrequency>:


float32 IfxScuCcu_getPllFrequency(void)
{
80000e3a:	40 ae       	mov.aa %a14,%sp
    if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
80000e3c:	91 30 00 2f 	movh.a %a2,61443
80000e40:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000e44:	54 22       	ld.w %d2,[%a2]
80000e46:	8f 22 1e 20 	sh %d2,%d2,-30
80000e4a:	df 02 15 00 	jeq %d2,0,80000e74 <IfxScuCcu_getPllFrequency+0x3a>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
80000e4e:	54 22       	ld.w %d2,[%a2]
80000e50:	8f 22 1e 20 	sh %d2,%d2,-30
80000e54:	df 12 31 00 	jeq %d2,1,80000eb6 <IfxScuCcu_getPllFrequency+0x7c>
    else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
80000e58:	54 22       	ld.w %d2,[%a2]
80000e5a:	8f 22 1e 20 	sh %d2,%d2,-30
80000e5e:	df 22 05 00 	jeq %d2,2,80000e68 <IfxScuCcu_getPllFrequency+0x2e>
        freq = 0.0f;
80000e62:	82 04       	mov %d4,0
80000e64:	1d 00 0c 00 	j 80000e7c <IfxScuCcu_getPllFrequency+0x42>
        freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
80000e68:	7b 90 b9 44 	movh %d4,19353
80000e6c:	1b 04 68 49 	addi %d4,%d4,-27008
80000e70:	1d 00 06 00 	j 80000e7c <IfxScuCcu_getPllFrequency+0x42>
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80000e74:	7b f0 cb 44 	movh %d4,19647
80000e78:	1b 04 c2 4b 	addi %d4,%d4,-17376
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
    freq    = (oscFreq * (scu->SYSPLLCON0.B.NDIV + 1)) / ((scu->SYSPLLCON1.B.K2DIV + 1) * (scu->SYSPLLCON0.B.PDIV + 1));
80000e7c:	91 30 00 2f 	movh.a %a2,61443
80000e80:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80000e84:	19 22 18 00 	ld.w %d2,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000e88:	37 02 e7 24 	extr.u %d2,%d2,9,7
80000e8c:	c2 12       	add %d2,1
80000e8e:	4b 02 41 21 	itof %d2,%d2
80000e92:	4b 42 41 40 	mul.f %d4,%d2,%d4
80000e96:	19 22 1c 00 	ld.w %d2,[%a2]28 <f003001c <bmhd_3_copy+0x40c2ea1c>>
80000e9a:	8f 72 00 21 	and %d2,%d2,7
80000e9e:	19 23 18 00 	ld.w %d3,[%a2]24 <f0030018 <bmhd_3_copy+0x40c2ea18>>
80000ea2:	37 03 63 3c 	extr.u %d3,%d3,24,3
80000ea6:	c2 13       	add %d3,1
80000ea8:	03 32 0a 23 	madd %d2,%d3,%d2,%d3
80000eac:	4b 02 41 21 	itof %d2,%d2
    return freq;
}
80000eb0:	4b 24 51 20 	div.f %d2,%d4,%d2
80000eb4:	00 90       	ret 
        freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
80000eb6:	7b 90 b9 44 	movh %d4,19353
80000eba:	1b 04 68 49 	addi %d4,%d4,-27008
80000ebe:	1d ff df ff 	j 80000e7c <IfxScuCcu_getPllFrequency+0x42>

80000ec2 <IfxScuCcu_getSourceFrequency>:
    return freq;
}


float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource)
{
80000ec2:	40 ae       	mov.aa %a14,%sp
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80000ec4:	91 30 00 2f 	movh.a %a2,61443
80000ec8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80000ecc:	54 22       	ld.w %d2,[%a2]
80000ece:	37 02 62 2e 	extr.u %d2,%d2,28,2
80000ed2:	df 02 20 00 	jeq %d2,0,80000f12 <IfxScuCcu_getSourceFrequency+0x50>
80000ed6:	df 12 23 80 	jne %d2,1,80000f1c <IfxScuCcu_getSourceFrequency+0x5a>
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:

        switch (fsource)
80000eda:	df 14 0b 00 	jeq %d4,1,80000ef0 <IfxScuCcu_getSourceFrequency+0x2e>
80000ede:	df 24 17 00 	jeq %d4,2,80000f0c <IfxScuCcu_getSourceFrequency+0x4a>
80000ee2:	df 04 04 00 	jeq %d4,0,80000eea <IfxScuCcu_getSourceFrequency+0x28>
80000ee6:	82 02       	mov %d2,0
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80000ee8:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPllFrequency();
80000eea:	6d ff a8 ff 	call 80000e3a <IfxScuCcu_getPllFrequency>
            break;
80000eee:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency1();
80000ef0:	6d ff ee fe 	call 80000ccc <IfxScuCcu_getPerPllFrequency1>
            if (SCU_CCUCON1.B.PLL1DIVDIS == 0)
80000ef4:	91 30 00 2f 	movh.a %a2,61443
80000ef8:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000efc:	54 23       	ld.w %d3,[%a2]
80000efe:	6f 73 f5 ff 	jnz.t %d3,7,80000ee8 <IfxScuCcu_getSourceFrequency+0x26>
                sourcefreq = sourcefreq / 2.0f;
80000f02:	7b 00 f0 33 	movh %d3,16128
80000f06:	4b 32 41 20 	mul.f %d2,%d2,%d3
80000f0a:	00 90       	ret 
            sourcefreq = IfxScuCcu_getPerPllFrequency2();
80000f0c:	6d ff 25 ff 	call 80000d56 <IfxScuCcu_getPerPllFrequency2>
            break;
80000f10:	00 90       	ret 
    switch (SCU_CCUCON0.B.CLKSEL)
80000f12:	7b f0 cb 24 	movh %d2,19647
80000f16:	1b 02 c2 2b 	addi %d2,%d2,-17376
80000f1a:	00 90       	ret 
        sourcefreq = 0;
80000f1c:	82 02       	mov %d2,0
80000f1e:	00 90       	ret 

80000f20 <IfxScuCcu_getMcanFrequency>:
{
80000f20:	40 ae       	mov.aa %a14,%sp
    switch (SCU_CCUCON1.B.CLKSELMCAN)
80000f22:	91 30 00 2f 	movh.a %a2,61443
80000f26:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000f2a:	54 22       	ld.w %d2,[%a2]
80000f2c:	37 02 62 22 	extr.u %d2,%d2,4,2
80000f30:	df 12 09 00 	jeq %d2,1,80000f42 <IfxScuCcu_getMcanFrequency+0x22>
80000f34:	df 22 1c 80 	jne %d2,2,80000f6c <IfxScuCcu_getMcanFrequency+0x4c>
        mcanFreq = IfxScuCcu_getOsc0Frequency();
80000f38:	7b 90 b9 24 	movh %d2,19353
80000f3c:	1b 02 68 29 	addi %d2,%d2,-27008
80000f40:	00 90       	ret 
        mcanSource = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
80000f42:	82 14       	mov %d4,1
80000f44:	6d ff bf ff 	call 80000ec2 <IfxScuCcu_getSourceFrequency>
80000f48:	02 24       	mov %d4,%d2
        if (SCU_CCUCON1.B.MCANDIV)
80000f4a:	91 30 00 2f 	movh.a %a2,61443
80000f4e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80000f52:	54 23       	ld.w %d3,[%a2]
80000f54:	8f f3 00 31 	and %d3,%d3,15
80000f58:	df 03 0c 00 	jeq %d3,0,80000f70 <IfxScuCcu_getMcanFrequency+0x50>
            mcanFreq = mcanSource / SCU_CCUCON1.B.MCANDIV;
80000f5c:	54 22       	ld.w %d2,[%a2]
80000f5e:	8f f2 00 21 	and %d2,%d2,15
80000f62:	4b 02 41 21 	itof %d2,%d2
80000f66:	4b 24 51 20 	div.f %d2,%d4,%d2
80000f6a:	00 90       	ret 
    switch (SCU_CCUCON1.B.CLKSELMCAN)
80000f6c:	82 02       	mov %d2,0
80000f6e:	00 90       	ret 
    float32 mcanFreq   = 0;
80000f70:	82 02       	mov %d2,0
}
80000f72:	00 90       	ret 

80000f74 <IfxScuCcu_modulation_init>:
    *cfg = IfxScuCcu_defaultClockConfig;
}


void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg)
{
80000f74:	40 ae       	mov.aa %a14,%sp
80000f76:	20 08       	sub.a %sp,8
    uint16                        endinitSfty_pw;
    IfxScuCcu_RGain_Values        RGain_P;
    IfxScuCcu_ModEn               mod_enable = Mod_Cfg->Mod_Enable;
80000f78:	54 42       	ld.w %d2,[%a4]
    IfxScuCcu_ModulationAmplitude Mod_Amp    = Mod_Cfg->Mod_Amp;
80000f7a:	19 44 04 00 	ld.w %d4,[%a4]4

    Ifx_SCU_SYSPLLCON0            syspllcon0;
    Ifx_SCU_SYSPLLCON2            syspllcon2;

    if (mod_enable == IfxScuCcu_ModEn_enabled)  /* do this only if modulation is enabled */
80000f7e:	df 12 03 00 	jeq %d2,1,80000f84 <IfxScuCcu_modulation_init+0x10>
        SCU_SYSPLLCON0.U   = syspllcon0.U;

        /* set the endinit protection again */
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
}
80000f82:	00 90       	ret 
        IfxScuCcu_calRGainParameters(Mod_Amp, &RGain_P);
80000f84:	d9 e4 f8 ff 	lea %a4,[%a14]-8
80000f88:	6d ff 3f fe 	call 80000c06 <IfxScuCcu_calRGainParameters>
        endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80000f8c:	6d 00 37 05 	call 800019fa <IfxScuWdt_getSafetyWatchdogPassword>
80000f90:	02 28       	mov %d8,%d2
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80000f92:	02 24       	mov %d4,%d2
80000f94:	6d 00 6b 04 	call 8000186a <IfxScuWdt_clearSafetyEndinit>
        syspllcon2.U        = SCU_SYSPLLCON2.U;
80000f98:	91 30 00 2f 	movh.a %a2,61443
80000f9c:	d9 22 20 06 	lea %a2,[%a2]24608 <f0036020 <bmhd_3_copy+0x40c34a20>>
80000fa0:	54 22       	ld.w %d2,[%a2]
        syspllcon2.B.MODCFG = IFXSCUCCU_GET_MODCFG(RGain_P.RGainHex);
80000fa2:	b9 e3 fc ff 	ld.hu %d3,[%a14]-4 <f0036020 <bmhd_3_copy+0x40c34a20>>
80000fa6:	3b 00 40 4f 	mov %d4,-3072
80000faa:	a6 43       	or %d3,%d4
80000fac:	37 32 10 20 	insert %d2,%d2,%d3,0,16
        SCU_SYSPLLCON2.U    = syspllcon2.U;
80000fb0:	74 22       	st.w [%a2],%d2
        syspllcon0.U       = SCU_SYSPLLCON0.U;
80000fb2:	91 30 00 2f 	movh.a %a2,61443
80000fb6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80000fba:	54 22       	ld.w %d2,[%a2]
        syspllcon0.B.MODEN = (uint32)IfxScuCcu_ModEn_enabled;
80000fbc:	b7 12 01 21 	insert %d2,%d2,1,2,1
        SCU_SYSPLLCON0.U   = syspllcon0.U;
80000fc0:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80000fc2:	02 84       	mov %d4,%d8
80000fc4:	6d 00 4b 05 	call 80001a5a <IfxScuWdt_setSafetyEndinit>
}
80000fc8:	1d ff dd ff 	j 80000f82 <IfxScuCcu_modulation_init+0xe>

80000fcc <IfxScuCcu_init>:
{
80000fcc:	40 ae       	mov.aa %a14,%sp
80000fce:	40 4c       	mov.aa %a12,%a4
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80000fd0:	91 30 00 2f 	movh.a %a2,61443
80000fd4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80000fd8:	54 22       	ld.w %d2,[%a2]
80000fda:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
80000fde:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
80000fe2:	54 23       	ld.w %d3,[%a2]
80000fe4:	6f 13 0b 00 	jz.t %d3,1,80000ffa <IfxScuCcu_init+0x2e>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000fe8:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000fec:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80000ff0:	54 23       	ld.w %d3,[%a2]
80000ff2:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000ff6:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80000ff8:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80000ffa:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80000ffe:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001002:	91 30 00 2f 	movh.a %a2,61443
80001006:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000100a:	54 22       	ld.w %d2,[%a2]
8000100c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001010:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001012:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001014:	91 30 00 2f 	movh.a %a2,61443
80001018:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000101c:	54 22       	ld.w %d2,[%a2]
8000101e:	6f 02 fb ff 	jnz.t %d2,0,80001014 <IfxScuCcu_init+0x48>
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001022:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
80001026:	91 30 00 2f 	movh.a %a2,61443
8000102a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000102e:	54 23       	ld.w %d3,[%a2]
80001030:	ff 03 08 00 	jge %d3,0,80001040 <IfxScuCcu_init+0x74>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001034:	c2 f2       	add %d2,-1
80001036:	ff 12 f8 7f 	jge %d2,1,80001026 <IfxScuCcu_init+0x5a>
8000103a:	82 19       	mov %d9,1
8000103c:	1d 00 03 00 	j 80001042 <IfxScuCcu_init+0x76>
    uint8                                initError = 0;
80001040:	82 09       	mov %d9,0
        scuCcucon0.U        = SCU_CCUCON0.U;
80001042:	91 30 00 2f 	movh.a %a2,61443
80001046:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000104a:	54 22       	ld.w %d2,[%a2]
        scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
8000104c:	b7 02 02 2e 	insert %d2,%d2,0,28,2
        scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
80001050:	b7 12 01 2f 	insert %d2,%d2,1,30,1
        SCU_CCUCON0.U       = scuCcucon0.U;
80001054:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001056:	3b 00 00 21 	mov %d2,4096
    while (SCU_CCUCON0.B.LCK != 0U)
8000105a:	91 30 00 2f 	movh.a %a2,61443
8000105e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001062:	54 23       	ld.w %d3,[%a2]
80001064:	ff 03 06 00 	jge %d3,0,80001070 <IfxScuCcu_init+0xa4>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001068:	c2 f2       	add %d2,-1
8000106a:	ff 12 f8 7f 	jge %d2,1,8000105a <IfxScuCcu_init+0x8e>
8000106e:	82 19       	mov %d9,1
        SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
80001070:	91 30 00 2f 	movh.a %a2,61443
80001074:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
80001078:	3b c0 0b 20 	mov %d2,188
8000107c:	74 22       	st.w [%a2],%d2
        SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
8000107e:	91 30 00 3f 	movh.a %a3,61443
80001082:	d9 33 a0 56 	lea %a3,[%a3]26976 <f0036960 <bmhd_3_copy+0x40c35360>>
80001086:	54 32       	ld.w %d2,[%a3]
80001088:	8f d2 c1 21 	andn %d2,%d2,29
8000108c:	74 32       	st.w [%a3],%d2
        SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
8000108e:	91 30 00 3f 	movh.a %a3,61443
80001092:	d9 33 a4 56 	lea %a3,[%a3]26980 <f0036964 <bmhd_3_copy+0x40c35364>>
80001096:	54 32       	ld.w %d2,[%a3]
80001098:	8f d2 c1 21 	andn %d2,%d2,29
8000109c:	74 32       	st.w [%a3],%d2
        SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
8000109e:	91 30 00 3f 	movh.a %a3,61443
800010a2:	d9 33 a8 56 	lea %a3,[%a3]26984 <f0036968 <bmhd_3_copy+0x40c35368>>
800010a6:	54 32       	ld.w %d2,[%a3]
800010a8:	8f d2 c1 21 	andn %d2,%d2,29
800010ac:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U    = (uint32)0U;
800010ae:	82 02       	mov %d2,0
800010b0:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 0;
800010b2:	91 30 00 2f 	movh.a %a2,61443
800010b6:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
800010ba:	54 22       	ld.w %d2,[%a2]
800010bc:	7b f0 ff 3f 	movh %d3,65535
800010c0:	c2 f3       	add %d3,-1
800010c2:	26 32       	and %d2,%d3
800010c4:	74 22       	st.w [%a2],%d2
    SCU_PERPLLCON0.B.PLLPWD = 0;
800010c6:	91 30 00 2f 	movh.a %a2,61443
800010ca:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
800010ce:	54 22       	ld.w %d2,[%a2]
800010d0:	26 32       	and %d2,%d3
800010d2:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
800010d4:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
800010d8:	1d 00 05 00 	j 800010e2 <IfxScuCcu_init+0x116>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800010dc:	c2 f2       	add %d2,-1
800010de:	bf 12 45 00 	jlt %d2,1,80001168 <IfxScuCcu_init+0x19c>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
800010e2:	91 30 00 2f 	movh.a %a2,61443
800010e6:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800010ea:	54 23       	ld.w %d3,[%a2]
800010ec:	6f 13 f8 7f 	jz.t %d3,1,800010dc <IfxScuCcu_init+0x110>
800010f0:	91 30 00 2f 	movh.a %a2,61443
800010f4:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800010f8:	54 23       	ld.w %d3,[%a2]
800010fa:	6f 13 f1 7f 	jz.t %d3,1,800010dc <IfxScuCcu_init+0x110>
    if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
800010fe:	19 c2 04 00 	ld.w %d2,[%a12]4
80001102:	c2 f2       	add %d2,-1
80001104:	bf 22 35 80 	jlt.u %d2,2,8000116e <IfxScuCcu_init+0x1a2>
        sysPllCon0.U       = SCU_SYSPLLCON0.U;
80001108:	91 30 00 3f 	movh.a %a3,61443
8000110c:	d9 33 18 06 	lea %a3,[%a3]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001110:	54 32       	ld.w %d2,[%a3]
        sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
80001112:	39 c3 08 00 	ld.bu %d3,[%a12]8 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001116:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
8000111a:	39 c3 09 00 	ld.bu %d3,[%a12]9
8000111e:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
80001122:	19 c3 04 00 	ld.w %d3,[%a12]4
80001126:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
        SCU_SYSPLLCON0.U   = sysPllCon0.U;
8000112a:	74 32       	st.w [%a3],%d2
        scuPerPllCon0.U       = SCU_PERPLLCON0.U;
8000112c:	91 30 00 2f 	movh.a %a2,61443
80001130:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
80001134:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
80001136:	39 c3 10 00 	ld.bu %d3,[%a12]16 <f0036028 <bmhd_3_copy+0x40c34a28>>
8000113a:	67 32 00 20 	ins.t %d2,%d2,0,%d3,0
        scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
8000113e:	39 c3 0c 00 	ld.bu %d3,[%a12]12
80001142:	37 32 03 2c 	insert %d2,%d2,%d3,24,3
        scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
80001146:	39 c3 0d 00 	ld.bu %d3,[%a12]13
8000114a:	37 32 87 24 	insert %d2,%d2,%d3,9,7
        SCU_PERPLLCON0.U      = scuPerPllCon0.U;
8000114e:	74 22       	st.w [%a2],%d2
    SCU_SYSPLLCON0.B.PLLPWD = 1;
80001150:	54 32       	ld.w %d2,[%a3]
80001152:	b7 12 01 28 	insert %d2,%d2,1,16,1
80001156:	74 32       	st.w [%a3],%d2
    SCU_PERPLLCON0.B.PLLPWD = 1;
80001158:	54 22       	ld.w %d2,[%a2]
8000115a:	b7 12 01 28 	insert %d2,%d2,1,16,1
8000115e:	74 22       	st.w [%a2],%d2
    timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
80001160:	3b 00 00 23 	mov %d2,12288
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
80001164:	1d 00 1f 00 	j 800011a2 <IfxScuCcu_init+0x1d6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001168:	82 19       	mov %d9,1
8000116a:	1d ff ca ff 	j 800010fe <IfxScuCcu_init+0x132>
        scuOsccon.U      = SCU_OSCCON.U;
8000116e:	91 30 00 2f 	movh.a %a2,61443
80001172:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
80001176:	54 24       	ld.w %d4,[%a2]
        scuOsccon.B.MODE = 0U;
80001178:	8f 04 c6 41 	andn %d4,%d4,96
        scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
8000117c:	54 c3       	ld.w %d3,[%a12]
8000117e:	7b c0 31 24 	movh %d2,17180
80001182:	1b 32 e8 2d 	addi %d2,%d2,-8573
80001186:	73 23 68 20 	mul.u %e2,%d3,%d2
8000118a:	8f e3 1e 20 	sh %d2,%d3,-18
8000118e:	1b 12 ff 2f 	addi %d2,%d2,-15
80001192:	37 24 05 48 	insert %d4,%d4,%d2,16,5
        SCU_OSCCON.U       = scuOsccon.U;
80001196:	74 24       	st.w [%a2],%d4
80001198:	1d ff b8 ff 	j 80001108 <IfxScuCcu_init+0x13c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000119c:	c2 f2       	add %d2,-1
8000119e:	bf 12 14 00 	jlt %d2,1,800011c6 <IfxScuCcu_init+0x1fa>
    while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
800011a2:	91 30 00 2f 	movh.a %a2,61443
800011a6:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800011aa:	54 23       	ld.w %d3,[%a2]
800011ac:	6f 13 f8 ff 	jnz.t %d3,1,8000119c <IfxScuCcu_init+0x1d0>
800011b0:	91 30 00 2f 	movh.a %a2,61443
800011b4:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800011b8:	54 23       	ld.w %d3,[%a2]
800011ba:	6f 13 f1 ff 	jnz.t %d3,1,8000119c <IfxScuCcu_init+0x1d0>
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
800011be:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800011c2:	1d 00 08 00 	j 800011d2 <IfxScuCcu_init+0x206>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800011c6:	82 19       	mov %d9,1
800011c8:	1d ff fb ff 	j 800011be <IfxScuCcu_init+0x1f2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800011cc:	c2 f2       	add %d2,-1
800011ce:	bf 12 2f 00 	jlt %d2,1,8000122c <IfxScuCcu_init+0x260>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800011d2:	91 30 00 2f 	movh.a %a2,61443
800011d6:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800011da:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800011dc:	6f 53 f8 7f 	jz.t %d3,5,800011cc <IfxScuCcu_init+0x200>
800011e0:	91 30 00 2f 	movh.a %a2,61443
800011e4:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800011e8:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
800011ea:	6f 53 f1 7f 	jz.t %d3,5,800011cc <IfxScuCcu_init+0x200>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
800011ee:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
800011f0:	6f 43 ee 7f 	jz.t %d3,4,800011cc <IfxScuCcu_init+0x200>
    SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
800011f4:	39 c3 0a 00 	ld.bu %d3,[%a12]10
800011f8:	91 30 00 2f 	movh.a %a2,61443
800011fc:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80001200:	54 22       	ld.w %d2,[%a2]
80001202:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80001206:	74 22       	st.w [%a2],%d2
        scuPerPllCon1.U       = SCU_PERPLLCON1.U;
80001208:	91 30 00 2f 	movh.a %a2,61443
8000120c:	d9 22 2c 06 	lea %a2,[%a2]24620 <f003602c <bmhd_3_copy+0x40c34a2c>>
80001210:	54 22       	ld.w %d2,[%a2]
        scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
80001212:	39 c3 0e 00 	ld.bu %d3,[%a12]14 <f003602c <bmhd_3_copy+0x40c34a2c>>
80001216:	37 32 03 20 	insert %d2,%d2,%d3,0,3
        scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
8000121a:	39 c3 0f 00 	ld.bu %d3,[%a12]15
8000121e:	37 32 03 24 	insert %d2,%d2,%d3,8,3
        SCU_PERPLLCON1.U      = scuPerPllCon1.U;
80001222:	74 22       	st.w [%a2],%d2
    timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
80001224:	3b 00 00 26 	mov %d2,24576
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001228:	1d 00 08 00 	j 80001238 <IfxScuCcu_init+0x26c>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000122c:	82 19       	mov %d9,1
8000122e:	1d ff e3 ff 	j 800011f4 <IfxScuCcu_init+0x228>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001232:	c2 f2       	add %d2,-1
80001234:	bf 12 39 00 	jlt %d2,1,800012a6 <IfxScuCcu_init+0x2da>
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001238:	91 30 00 2f 	movh.a %a2,61443
8000123c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
80001240:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001242:	6f 53 f8 7f 	jz.t %d3,5,80001232 <IfxScuCcu_init+0x266>
80001246:	91 30 00 2f 	movh.a %a2,61443
8000124a:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
8000124e:	54 23       	ld.w %d3,[%a2]
    while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
80001250:	6f 53 f1 7f 	jz.t %d3,5,80001232 <IfxScuCcu_init+0x266>
           (SCU_PERPLLSTAT.B.K3RDY == 0U))
80001254:	54 23       	ld.w %d3,[%a2]
           (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
80001256:	6f 43 ee 7f 	jz.t %d3,4,80001232 <IfxScuCcu_init+0x266>
    timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
8000125a:	7b 50 00 20 	movh %d2,5
8000125e:	1b 02 3e 29 	addi %d2,%d2,-27680
    while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
80001262:	91 30 00 2f 	movh.a %a2,61443
80001266:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <bmhd_3_copy+0x40c34a10>>
8000126a:	54 23       	ld.w %d3,[%a2]
8000126c:	6f 13 09 80 	jnz.t %d3,1,8000127e <IfxScuCcu_init+0x2b2>
80001270:	54 23       	ld.w %d3,[%a2]
80001272:	6f 83 06 80 	jnz.t %d3,8,8000127e <IfxScuCcu_init+0x2b2>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001276:	c2 f2       	add %d2,-1
80001278:	ff 12 f5 7f 	jge %d2,1,80001262 <IfxScuCcu_init+0x296>
8000127c:	82 19       	mov %d9,1
        SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
8000127e:	91 30 00 2f 	movh.a %a2,61443
80001282:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80001286:	54 22       	ld.w %d2,[%a2]
80001288:	b7 12 01 29 	insert %d2,%d2,1,18,1
8000128c:	74 22       	st.w [%a2],%d2
        SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
8000128e:	91 30 00 2f 	movh.a %a2,61443
80001292:	d9 22 28 06 	lea %a2,[%a2]24616 <f0036028 <bmhd_3_copy+0x40c34a28>>
80001296:	54 22       	ld.w %d2,[%a2]
80001298:	b7 12 01 29 	insert %d2,%d2,1,18,1
8000129c:	74 22       	st.w [%a2],%d2
        timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
8000129e:	3b 00 00 23 	mov %d2,12288
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
800012a2:	1d 00 08 00 	j 800012b2 <IfxScuCcu_init+0x2e6>
        IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012a6:	82 19       	mov %d9,1
800012a8:	1d ff d9 ff 	j 8000125a <IfxScuCcu_init+0x28e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800012ac:	c2 f2       	add %d2,-1
800012ae:	bf 12 b7 00 	jlt %d2,1,8000141c <IfxScuCcu_init+0x450>
        while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
800012b2:	91 30 00 2f 	movh.a %a2,61443
800012b6:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
800012ba:	54 23       	ld.w %d3,[%a2]
800012bc:	6f 23 f8 7f 	jz.t %d3,2,800012ac <IfxScuCcu_init+0x2e0>
800012c0:	91 30 00 2f 	movh.a %a2,61443
800012c4:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <bmhd_3_copy+0x40c34a24>>
800012c8:	54 23       	ld.w %d3,[%a2]
800012ca:	6f 23 f1 7f 	jz.t %d3,2,800012ac <IfxScuCcu_init+0x2e0>
        SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
800012ce:	91 30 00 2f 	movh.a %a2,61443
800012d2:	d9 22 b4 06 	lea %a2,[%a2]26676 <f0036834 <bmhd_3_copy+0x40c35234>>
800012d6:	3b c0 0b 20 	mov %d2,188
800012da:	74 22       	st.w [%a2],%d2
        SMU_CMD.U  = (uint32)0x00000005;
800012dc:	91 30 00 3f 	movh.a %a3,61443
800012e0:	d9 33 a0 06 	lea %a3,[%a3]26656 <f0036820 <bmhd_3_copy+0x40c35220>>
800012e4:	82 52       	mov %d2,5
800012e6:	74 32       	st.w [%a3],%d2
        SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
800012e8:	91 30 00 3f 	movh.a %a3,61443
800012ec:	d9 33 a0 76 	lea %a3,[%a3]27104 <f00369e0 <bmhd_3_copy+0x40c353e0>>
800012f0:	3b d0 01 20 	mov %d2,29
800012f4:	74 32       	st.w [%a3],%d2
        SMU_KEYS.U = (uint32)0U;
800012f6:	82 02       	mov %d2,0
800012f8:	74 22       	st.w [%a2],%d2
        scu_ccucon0.U        = SCU_CCUCON0.U;
800012fa:	91 30 00 2f 	movh.a %a2,61443
800012fe:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001302:	54 24       	ld.w %d4,[%a2]
        scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
80001304:	b7 14 02 4e 	insert %d4,%d4,1,28,2
        scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
80001308:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000130c:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
80001310:	91 30 00 2f 	movh.a %a2,61443
80001314:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001318:	54 23       	ld.w %d3,[%a2]
8000131a:	ff 03 06 00 	jge %d3,0,80001326 <IfxScuCcu_init+0x35a>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000131e:	c2 f2       	add %d2,-1
80001320:	ff 12 f8 7f 	jge %d2,1,80001310 <IfxScuCcu_init+0x344>
80001324:	82 19       	mov %d9,1
        SCU_CCUCON0.U     = scu_ccucon0.U;
80001326:	91 30 00 2f 	movh.a %a2,61443
8000132a:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000132e:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001330:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
80001334:	91 30 00 2f 	movh.a %a2,61443
80001338:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000133c:	54 23       	ld.w %d3,[%a2]
8000133e:	ff 03 06 00 	jge %d3,0,8000134a <IfxScuCcu_init+0x37e>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001342:	c2 f2       	add %d2,-1
80001344:	ff 12 f8 7f 	jge %d2,1,80001334 <IfxScuCcu_init+0x368>
80001348:	82 19       	mov %d9,1
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000134a:	91 30 00 2f 	movh.a %a2,61443
8000134e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001352:	54 22       	ld.w %d2,[%a2]
80001354:	6f 12 09 00 	jz.t %d2,1,80001366 <IfxScuCcu_init+0x39a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001358:	8f 15 40 31 	or %d3,%d5,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000135c:	54 22       	ld.w %d2,[%a2]
8000135e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001362:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001364:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001366:	8f 35 40 51 	or %d5,%d5,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000136a:	91 30 00 2f 	movh.a %a2,61443
8000136e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001372:	54 22       	ld.w %d2,[%a2]
80001374:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001378:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000137a:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000137c:	91 30 00 2f 	movh.a %a2,61443
80001380:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001384:	54 22       	ld.w %d2,[%a2]
80001386:	6f 02 fb 7f 	jz.t %d2,0,8000137c <IfxScuCcu_init+0x3b0>
    if (!status)
8000138a:	df 09 4c 00 	jeq %d9,0,80001422 <IfxScuCcu_init+0x456>
    if (!status)
8000138e:	df 09 b1 81 	jne %d9,0,800016f0 <IfxScuCcu_init+0x724>
    password  = watchdog->CON0.B.PW;
80001392:	91 30 00 2f 	movh.a %a2,61443
80001396:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000139a:	54 22       	ld.w %d2,[%a2]
8000139c:	37 02 6e 21 	extr.u %d2,%d2,2,14
    IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
800013a0:	8f f2 83 21 	xor %d2,%d2,63
    if (SCU_WDTS_CON0.B.LCK)
800013a4:	54 23       	ld.w %d3,[%a2]
800013a6:	6f 13 0b 00 	jz.t %d3,1,800013bc <IfxScuCcu_init+0x3f0>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013aa:	8f 22 00 40 	sh %d4,%d2,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800013ae:	8f 14 40 41 	or %d4,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800013b2:	54 23       	ld.w %d3,[%a2]
800013b4:	b7 03 10 30 	insert %d3,%d3,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013b8:	a6 43       	or %d3,%d4
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800013ba:	74 23       	st.w [%a2],%d3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013bc:	8f 22 00 50 	sh %d5,%d2,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800013c0:	8f 25 40 31 	or %d3,%d5,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800013c4:	91 30 00 2f 	movh.a %a2,61443
800013c8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800013cc:	54 22       	ld.w %d2,[%a2]
800013ce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800013d2:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800013d4:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800013d6:	91 30 00 2f 	movh.a %a2,61443
800013da:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800013de:	54 22       	ld.w %d2,[%a2]
800013e0:	6f 02 fb ff 	jnz.t %d2,0,800013d6 <IfxScuCcu_init+0x40a>
        ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
800013e4:	91 30 00 2f 	movh.a %a2,61443
800013e8:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
800013ec:	54 22       	ld.w %d2,[%a2]
800013ee:	19 c4 24 00 	ld.w %d4,[%a12]36 <f0036030 <bmhd_3_copy+0x40c34a30>>
800013f2:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
800013f6:	19 c3 20 00 	ld.w %d3,[%a12]32
800013fa:	26 34       	and %d4,%d3
800013fc:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800013fe:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
80001402:	91 30 00 2f 	movh.a %a2,61443
80001406:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
8000140a:	54 23       	ld.w %d3,[%a2]
8000140c:	ff 03 11 00 	jge %d3,0,8000142e <IfxScuCcu_init+0x462>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001410:	c2 f2       	add %d2,-1
80001412:	ff 12 f8 7f 	jge %d2,1,80001402 <IfxScuCcu_init+0x436>
80001416:	82 19       	mov %d9,1
80001418:	1d 00 0c 00 	j 80001430 <IfxScuCcu_init+0x464>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000141c:	82 19       	mov %d9,1
8000141e:	1d ff 58 ff 	j 800012ce <IfxScuCcu_init+0x302>
        IfxScuCcu_modulation_init(config->modulationConfig);  /* initialize modulation */
80001422:	99 c4 24 10 	ld.a %a4,[%a12]100
80001426:	6d ff a7 fd 	call 80000f74 <IfxScuCcu_modulation_init>
8000142a:	1d ff b2 ff 	j 8000138e <IfxScuCcu_init+0x3c2>
    uint32 initError = 0;
8000142e:	82 09       	mov %d9,0
        SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
80001430:	91 30 00 2f 	movh.a %a2,61443
80001434:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001438:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000143a:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON0.B.LCK != 0U)
8000143e:	91 30 00 2f 	movh.a %a2,61443
80001442:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001446:	54 23       	ld.w %d3,[%a2]
80001448:	ff 03 06 00 	jge %d3,0,80001454 <IfxScuCcu_init+0x488>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000144c:	c2 f2       	add %d2,-1
8000144e:	ff 12 f8 7f 	jge %d2,1,8000143e <IfxScuCcu_init+0x472>
80001452:	82 19       	mov %d9,1
        ccucon1.U = SCU_CCUCON1.U;
80001454:	91 30 00 2f 	movh.a %a2,61443
80001458:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
8000145c:	54 22       	ld.w %d2,[%a2]
            || ccucon1.B.CLKSELQSPI)
8000145e:	7b 00 03 33 	movh %d3,12336
80001462:	1b 03 03 30 	addi %d3,%d3,48
80001466:	26 32       	and %d2,%d3
        if (ccucon1.B.CLKSELMCAN
80001468:	df 02 30 00 	jeq %d2,0,800014c8 <IfxScuCcu_init+0x4fc>
            ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
8000146c:	54 22       	ld.w %d2,[%a2]
8000146e:	19 c4 2c 00 	ld.w %d4,[%a12]44
80001472:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
80001476:	19 c3 28 00 	ld.w %d3,[%a12]40
8000147a:	26 34       	and %d4,%d3
8000147c:	a6 24       	or %d4,%d2
            ccucon1.B.CLKSELMCAN = (uint32)0;
8000147e:	8f 04 c3 41 	andn %d4,%d4,48
            ccucon1.B.CLKSELMSC  = (uint32)0;
80001482:	b7 04 02 4a 	insert %d4,%d4,0,20,2
            ccucon1.B.CLKSELQSPI = (uint32)0;
80001486:	b7 04 02 4e 	insert %d4,%d4,0,28,2
            timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000148a:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
8000148e:	91 30 00 2f 	movh.a %a2,61443
80001492:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001496:	54 23       	ld.w %d3,[%a2]
80001498:	ff 03 06 00 	jge %d3,0,800014a4 <IfxScuCcu_init+0x4d8>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000149c:	c2 f2       	add %d2,-1
8000149e:	ff 12 f8 7f 	jge %d2,1,8000148e <IfxScuCcu_init+0x4c2>
800014a2:	82 19       	mov %d9,1
            SCU_CCUCON1.U     = ccucon1.U;
800014a4:	91 30 00 2f 	movh.a %a2,61443
800014a8:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014ac:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800014ae:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON1.B.LCK != 0U)
800014b2:	91 30 00 2f 	movh.a %a2,61443
800014b6:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014ba:	54 23       	ld.w %d3,[%a2]
800014bc:	ff 03 06 00 	jge %d3,0,800014c8 <IfxScuCcu_init+0x4fc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800014c0:	c2 f2       	add %d2,-1
800014c2:	ff 12 f8 7f 	jge %d2,1,800014b2 <IfxScuCcu_init+0x4e6>
800014c6:	82 19       	mov %d9,1
        ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
800014c8:	91 30 00 2f 	movh.a %a2,61443
800014cc:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014d0:	54 22       	ld.w %d2,[%a2]
800014d2:	19 c4 2c 00 	ld.w %d4,[%a12]44 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014d6:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
800014da:	19 c3 28 00 	ld.w %d3,[%a12]40
800014de:	26 34       	and %d4,%d3
800014e0:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800014e2:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
800014e6:	91 30 00 2f 	movh.a %a2,61443
800014ea:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
800014ee:	54 23       	ld.w %d3,[%a2]
800014f0:	ff 03 06 00 	jge %d3,0,800014fc <IfxScuCcu_init+0x530>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800014f4:	c2 f2       	add %d2,-1
800014f6:	ff 12 f8 7f 	jge %d2,1,800014e6 <IfxScuCcu_init+0x51a>
800014fa:	82 19       	mov %d9,1
        SCU_CCUCON1.U     = ccucon1.U;
800014fc:	91 30 00 2f 	movh.a %a2,61443
80001500:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001504:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001506:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON1.B.LCK != 0U)
8000150a:	91 30 00 2f 	movh.a %a2,61443
8000150e:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <bmhd_3_copy+0x40c34a34>>
80001512:	54 23       	ld.w %d3,[%a2]
80001514:	ff 03 06 00 	jge %d3,0,80001520 <IfxScuCcu_init+0x554>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001518:	c2 f2       	add %d2,-1
8000151a:	ff 12 f8 7f 	jge %d2,1,8000150a <IfxScuCcu_init+0x53e>
8000151e:	82 19       	mov %d9,1
        ccucon2.U = SCU_CCUCON2.U;
80001520:	91 30 00 2f 	movh.a %a2,61443
80001524:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001528:	54 22       	ld.w %d2,[%a2]
        if (ccucon2.B.CLKSELASCLINS)
8000152a:	3b 00 00 33 	mov %d3,12288
8000152e:	26 32       	and %d2,%d3
80001530:	df 02 2c 00 	jeq %d2,0,80001588 <IfxScuCcu_init+0x5bc>
            ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
80001534:	54 22       	ld.w %d2,[%a2]
80001536:	19 c4 34 00 	ld.w %d4,[%a12]52
8000153a:	0f 42 e0 20 	andn %d2,%d2,%d4
            ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
8000153e:	19 c3 30 00 	ld.w %d3,[%a12]48
80001542:	26 34       	and %d4,%d3
80001544:	a6 24       	or %d4,%d2
            ccucon2.B.CLKSELASCLINS = (uint32)0;
80001546:	b7 04 02 46 	insert %d4,%d4,0,12,2
            timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000154a:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
8000154e:	91 30 00 2f 	movh.a %a2,61443
80001552:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001556:	54 23       	ld.w %d3,[%a2]
80001558:	ff 03 06 00 	jge %d3,0,80001564 <IfxScuCcu_init+0x598>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
8000155c:	c2 f2       	add %d2,-1
8000155e:	ff 12 f8 7f 	jge %d2,1,8000154e <IfxScuCcu_init+0x582>
80001562:	82 19       	mov %d9,1
            SCU_CCUCON2.U     = ccucon2.U;
80001564:	91 30 00 2f 	movh.a %a2,61443
80001568:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000156c:	74 24       	st.w [%a2],%d4
            timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
8000156e:	3b 00 00 21 	mov %d2,4096
            while (SCU_CCUCON2.B.LCK != 0U)
80001572:	91 30 00 2f 	movh.a %a2,61443
80001576:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
8000157a:	54 23       	ld.w %d3,[%a2]
8000157c:	ff 03 06 00 	jge %d3,0,80001588 <IfxScuCcu_init+0x5bc>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001580:	c2 f2       	add %d2,-1
80001582:	ff 12 f8 7f 	jge %d2,1,80001572 <IfxScuCcu_init+0x5a6>
80001586:	82 19       	mov %d9,1
        ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
80001588:	91 30 00 2f 	movh.a %a2,61443
8000158c:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001590:	54 22       	ld.w %d2,[%a2]
80001592:	19 c4 34 00 	ld.w %d4,[%a12]52 <f0036040 <bmhd_3_copy+0x40c34a40>>
80001596:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
8000159a:	19 c3 30 00 	ld.w %d3,[%a12]48
8000159e:	26 34       	and %d4,%d3
800015a0:	a6 24       	or %d4,%d2
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800015a2:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
800015a6:	91 30 00 2f 	movh.a %a2,61443
800015aa:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015ae:	54 23       	ld.w %d3,[%a2]
800015b0:	ff 03 06 00 	jge %d3,0,800015bc <IfxScuCcu_init+0x5f0>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800015b4:	c2 f2       	add %d2,-1
800015b6:	ff 12 f8 7f 	jge %d2,1,800015a6 <IfxScuCcu_init+0x5da>
800015ba:	82 19       	mov %d9,1
        SCU_CCUCON2.U     = ccucon2.U;
800015bc:	91 30 00 2f 	movh.a %a2,61443
800015c0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015c4:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800015c6:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON2.B.LCK != 0U)
800015ca:	91 30 00 2f 	movh.a %a2,61443
800015ce:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <bmhd_3_copy+0x40c34a40>>
800015d2:	54 23       	ld.w %d3,[%a2]
800015d4:	ff 03 06 00 	jge %d3,0,800015e0 <IfxScuCcu_init+0x614>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
800015d8:	c2 f2       	add %d2,-1
800015da:	ff 12 f8 7f 	jge %d2,1,800015ca <IfxScuCcu_init+0x5fe>
800015de:	82 19       	mov %d9,1
        ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
800015e0:	91 30 00 2f 	movh.a %a2,61443
800015e4:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
800015e8:	54 22       	ld.w %d2,[%a2]
800015ea:	19 c4 3c 00 	ld.w %d4,[%a12]60 <f003604c <bmhd_3_copy+0x40c34a4c>>
800015ee:	0f 42 e0 20 	andn %d2,%d2,%d4
        ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
800015f2:	19 c3 38 00 	ld.w %d3,[%a12]56
800015f6:	26 34       	and %d4,%d3
800015f8:	a6 24       	or %d4,%d2
        ccucon5.B.UP      = 1;
800015fa:	b7 14 01 4f 	insert %d4,%d4,1,30,1
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
800015fe:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
80001602:	91 30 00 2f 	movh.a %a2,61443
80001606:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
8000160a:	54 23       	ld.w %d3,[%a2]
8000160c:	ff 03 06 00 	jge %d3,0,80001618 <IfxScuCcu_init+0x64c>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001610:	c2 f2       	add %d2,-1
80001612:	ff 12 f8 7f 	jge %d2,1,80001602 <IfxScuCcu_init+0x636>
80001616:	82 19       	mov %d9,1
        SCU_CCUCON5.U     = ccucon5.U;
80001618:	91 30 00 2f 	movh.a %a2,61443
8000161c:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
80001620:	74 24       	st.w [%a2],%d4
        timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
80001622:	3b 00 00 21 	mov %d2,4096
        while (SCU_CCUCON5.B.LCK != 0U)
80001626:	91 30 00 2f 	movh.a %a2,61443
8000162a:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <bmhd_3_copy+0x40c34a4c>>
8000162e:	54 23       	ld.w %d3,[%a2]
80001630:	ff 03 06 00 	jge %d3,0,8000163c <IfxScuCcu_init+0x670>
            IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001634:	c2 f2       	add %d2,-1
80001636:	ff 12 f8 7f 	jge %d2,1,80001626 <IfxScuCcu_init+0x65a>
8000163a:	82 19       	mov %d9,1
        ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
8000163c:	91 30 00 2f 	movh.a %a2,61443
80001640:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <bmhd_3_copy+0x40c34a80>>
80001644:	54 23       	ld.w %d3,[%a2]
80001646:	19 c4 04 10 	ld.w %d4,[%a12]68 <f0036080 <bmhd_3_copy+0x40c34a80>>
8000164a:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
8000164e:	19 c2 00 10 	ld.w %d2,[%a12]64
80001652:	26 42       	and %d2,%d4
80001654:	a6 32       	or %d2,%d3
        SCU_CCUCON6.U = ccucon6.U;
80001656:	74 22       	st.w [%a2],%d2
        ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
80001658:	91 30 00 2f 	movh.a %a2,61443
8000165c:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <bmhd_3_copy+0x40c34a84>>
80001660:	54 23       	ld.w %d3,[%a2]
80001662:	19 c4 0c 10 	ld.w %d4,[%a12]76 <f0036084 <bmhd_3_copy+0x40c34a84>>
80001666:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
8000166a:	19 c2 08 10 	ld.w %d2,[%a12]72
8000166e:	26 42       	and %d2,%d4
80001670:	a6 32       	or %d2,%d3
        SCU_CCUCON7.U = ccucon7.U;
80001672:	74 22       	st.w [%a2],%d2
        ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
80001674:	91 30 00 2f 	movh.a %a2,61443
80001678:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <bmhd_3_copy+0x40c34a88>>
8000167c:	54 23       	ld.w %d3,[%a2]
8000167e:	19 c4 14 10 	ld.w %d4,[%a12]84 <f0036088 <bmhd_3_copy+0x40c34a88>>
80001682:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
80001686:	19 c2 10 10 	ld.w %d2,[%a12]80
8000168a:	26 42       	and %d2,%d4
8000168c:	a6 32       	or %d2,%d3
        SCU_CCUCON8.U = ccucon8.U;
8000168e:	74 22       	st.w [%a2],%d2
        ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
80001690:	91 30 00 2f 	movh.a %a2,61443
80001694:	d9 22 0c 26 	lea %a2,[%a2]24716 <f003608c <bmhd_3_copy+0x40c34a8c>>
80001698:	54 23       	ld.w %d3,[%a2]
8000169a:	19 c4 1c 10 	ld.w %d4,[%a12]92 <f003608c <bmhd_3_copy+0x40c34a8c>>
8000169e:	0f 43 e0 30 	andn %d3,%d3,%d4
        ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
800016a2:	19 c2 18 10 	ld.w %d2,[%a12]88
800016a6:	26 42       	and %d2,%d4
800016a8:	a6 32       	or %d2,%d3
        SCU_CCUCON9.U = ccucon9.U;
800016aa:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
800016ac:	91 30 00 2f 	movh.a %a2,61443
800016b0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016b4:	54 22       	ld.w %d2,[%a2]
800016b6:	6f 12 09 00 	jz.t %d2,1,800016c8 <IfxScuCcu_init+0x6fc>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800016ba:	8f 15 40 31 	or %d3,%d5,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800016be:	54 22       	ld.w %d2,[%a2]
800016c0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800016c4:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800016c6:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800016c8:	8f 35 40 51 	or %d5,%d5,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800016cc:	91 30 00 2f 	movh.a %a2,61443
800016d0:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016d4:	54 22       	ld.w %d2,[%a2]
800016d6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800016da:	a6 52       	or %d2,%d5
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800016dc:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800016de:	91 30 00 2f 	movh.a %a2,61443
800016e2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016e6:	54 22       	ld.w %d2,[%a2]
800016e8:	6f 02 fb 7f 	jz.t %d2,0,800016de <IfxScuCcu_init+0x712>
    return (boolean)initError;
800016ec:	8f f9 0f 91 	and %d9,%d9,255
    if (!status)
800016f0:	df 09 96 80 	jne %d9,0,8000181c <IfxScuCcu_init+0x850>
    password  = watchdog->CON0.B.PW;
800016f4:	91 30 00 2f 	movh.a %a2,61443
800016f8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800016fc:	54 22       	ld.w %d2,[%a2]
800016fe:	37 02 6e 21 	extr.u %d2,%d2,2,14
    password ^= 0x003F;
80001702:	8f f2 83 b1 	xor %d11,%d2,63

    /*get the watch-dog passwords for usage with this function*/
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
80001706:	02 98       	mov %d8,%d9
80001708:	1d 00 53 00 	j 800017ae <IfxScuCcu_init+0x7e2>
            {
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount].k2Step;
8000170c:	8f 38 00 50 	sh %d5,%d8,3
80001710:	99 c2 1c 00 	ld.a %a2,[%a12]28
80001714:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
80001718:	14 23       	ld.bu %d3,[%a2]
8000171a:	91 30 00 2f 	movh.a %a2,61443
8000171e:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80001722:	54 22       	ld.w %d2,[%a2]
80001724:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80001728:	74 22       	st.w [%a2],%d2
    if (SCU_WDTS_CON0.B.LCK)
8000172a:	91 30 00 2f 	movh.a %a2,61443
8000172e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001732:	54 22       	ld.w %d2,[%a2]
80001734:	6f 12 09 00 	jz.t %d2,1,80001746 <IfxScuCcu_init+0x77a>
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001738:	8f 14 40 31 	or %d3,%d4,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000173c:	54 22       	ld.w %d2,[%a2]
8000173e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001742:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001744:	74 22       	st.w [%a2],%d2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001746:	8f 34 40 41 	or %d4,%d4,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000174a:	91 30 00 2f 	movh.a %a2,61443
8000174e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001752:	54 22       	ld.w %d2,[%a2]
80001754:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001758:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000175a:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000175c:	91 30 00 2f 	movh.a %a2,61443
80001760:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001764:	54 22       	ld.w %d2,[%a2]
80001766:	6f 02 fb 7f 	jz.t %d2,0,8000175c <IfxScuCcu_init+0x790>
            IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
        }

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(pllThrottleConfig->pllSteps[pllStepsCount].waitTime);
8000176a:	99 c2 1c 00 	ld.a %a2,[%a12]28
8000176e:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
80001772:	19 2a 04 00 	ld.w %d10,[%a2]4
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80001776:	82 04       	mov %d4,0
80001778:	6d ff a5 fb 	call 80000ec2 <IfxScuCcu_getSourceFrequency>
8000177c:	91 30 00 2f 	movh.a %a2,61443
80001780:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001784:	54 23       	ld.w %d3,[%a2]
80001786:	8f f3 00 31 	and %d3,%d3,15
8000178a:	4b 03 41 31 	itof %d3,%d3
8000178e:	4b 32 51 20 	div.f %d2,%d2,%d3
}


IFX_INLINE void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80001792:	4b 2a 41 20 	mul.f %d2,%d10,%d2
80001796:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;
8000179a:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
8000179e:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
800017a2:	a2 42       	sub %d2,%d4
800017a4:	3f 32 fd ff 	jlt.u %d2,%d3,8000179e <IfxScuCcu_init+0x7d2>
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
800017a8:	c2 18       	add %d8,1
800017aa:	8f f8 0f 81 	and %d8,%d8,255
800017ae:	39 c2 18 00 	ld.bu %d2,[%a12]24
800017b2:	7f 28 35 80 	jge.u %d8,%d2,8000181c <IfxScuCcu_init+0x850>
    if (SCU_WDTS_CON0.B.LCK)
800017b6:	91 30 00 2f 	movh.a %a2,61443
800017ba:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017be:	54 22       	ld.w %d2,[%a2]
800017c0:	6f 12 0b 00 	jz.t %d2,1,800017d6 <IfxScuCcu_init+0x80a>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017c4:	8f 2b 00 30 	sh %d3,%d11,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017c8:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017cc:	54 22       	ld.w %d2,[%a2]
800017ce:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017d2:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017d4:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017d6:	8f 2b 00 40 	sh %d4,%d11,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800017da:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800017de:	91 30 00 2f 	movh.a %a2,61443
800017e2:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017e6:	54 22       	ld.w %d2,[%a2]
800017e8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800017ec:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800017ee:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800017f0:	91 30 00 2f 	movh.a %a2,61443
800017f4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800017f8:	54 22       	ld.w %d2,[%a2]
800017fa:	6f 02 fb ff 	jnz.t %d2,0,800017f0 <IfxScuCcu_init+0x824>
            timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
800017fe:	3b 00 00 26 	mov %d2,24576
            while (SCU_SYSPLLSTAT.B.K2RDY == 0U)
80001802:	91 30 00 2f 	movh.a %a2,61443
80001806:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <bmhd_3_copy+0x40c34a14>>
8000180a:	54 23       	ld.w %d3,[%a2]
8000180c:	6f 53 80 ff 	jnz.t %d3,5,8000170c <IfxScuCcu_init+0x740>
                IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
80001810:	c2 f2       	add %d2,-1
80001812:	ff 12 f8 7f 	jge %d2,1,80001802 <IfxScuCcu_init+0x836>
80001816:	82 19       	mov %d9,1
80001818:	1d ff 7a ff 	j 8000170c <IfxScuCcu_init+0x740>
}
8000181c:	02 92       	mov %d2,%d9
8000181e:	00 90       	ret 

80001820 <IfxScuWdt_clearCpuEndinit>:
    {}
}


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
80001820:	40 ae       	mov.aa %a14,%sp


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80001822:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001826:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
8000182a:	7b 30 00 3f 	movh %d3,61443
8000182e:	1b c3 24 36 	addi %d3,%d3,25164
80001832:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001836:	60 22       	mov.a %a2,%d2
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80001838:	54 22       	ld.w %d2,[%a2]
8000183a:	6f 12 0b 00 	jz.t %d2,1,80001850 <IfxScuWdt_clearCpuEndinit+0x30>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000183e:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001842:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001846:	54 22       	ld.w %d2,[%a2]
80001848:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000184c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000184e:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001850:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001854:	8f 23 40 31 	or %d3,%d3,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001858:	54 22       	ld.w %d2,[%a2]
8000185a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000185e:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001860:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80001862:	54 22       	ld.w %d2,[%a2]
80001864:	6f 02 ff ff 	jnz.t %d2,0,80001862 <IfxScuWdt_clearCpuEndinit+0x42>
}
80001868:	00 90       	ret 

8000186a <IfxScuWdt_clearSafetyEndinit>:
    {}
}


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
8000186a:	40 ae       	mov.aa %a14,%sp
8000186c:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001870:	91 30 00 2f 	movh.a %a2,61443
80001874:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001878:	54 22       	ld.w %d2,[%a2]
8000187a:	6f 12 0b 00 	jz.t %d2,1,80001890 <IfxScuWdt_clearSafetyEndinit+0x26>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000187e:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001882:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001886:	54 22       	ld.w %d2,[%a2]
80001888:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000188c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000188e:	74 22       	st.w [%a2],%d2
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001890:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001894:	8f 23 40 31 	or %d3,%d3,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001898:	91 30 00 2f 	movh.a %a2,61443
8000189c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800018a0:	54 22       	ld.w %d2,[%a2]
800018a2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800018a6:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800018a8:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800018aa:	91 30 00 2f 	movh.a %a2,61443
800018ae:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800018b2:	54 22       	ld.w %d2,[%a2]
800018b4:	6f 02 fb ff 	jnz.t %d2,0,800018aa <IfxScuWdt_clearSafetyEndinit+0x40>
    IfxScuWdt_clearSafetyEndinitInline(password);
}
800018b8:	00 90       	ret 

800018ba <IfxScuWdt_disableCpuWatchdog>:


void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
800018ba:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800018bc:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800018c0:	8f 72 00 21 	and %d2,%d2,7
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800018c4:	7b 30 00 3f 	movh %d3,61443
800018c8:	1b c3 24 36 	addi %d3,%d3,25164
800018cc:	13 c2 20 23 	madd %d2,%d3,%d2,12
800018d0:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
800018d2:	54 22       	ld.w %d2,[%a2]
800018d4:	6f 12 0b 00 	jz.t %d2,1,800018ea <IfxScuWdt_disableCpuWatchdog+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018d8:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800018dc:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018e0:	54 22       	ld.w %d2,[%a2]
800018e2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018e6:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018e8:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018ea:	06 24       	sh %d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
800018ec:	8f 24 40 31 	or %d3,%d4,2
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800018f0:	54 22       	ld.w %d2,[%a2]
800018f2:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800018f6:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800018f8:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 1)
800018fa:	54 22       	ld.w %d2,[%a2]
800018fc:	6f 02 ff ff 	jnz.t %d2,0,800018fa <IfxScuWdt_disableCpuWatchdog+0x40>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
80001900:	d9 23 04 00 	lea %a3,[%a2]4
80001904:	19 22 04 00 	ld.w %d2,[%a2]4
80001908:	b7 12 81 21 	insert %d2,%d2,1,3,1
8000190c:	74 32       	st.w [%a3],%d2
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000190e:	54 22       	ld.w %d2,[%a2]
80001910:	6f 12 09 00 	jz.t %d2,1,80001922 <IfxScuWdt_disableCpuWatchdog+0x68>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001914:	8f 14 40 31 	or %d3,%d4,1
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001918:	54 22       	ld.w %d2,[%a2]
8000191a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000191e:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001920:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001922:	8f 34 40 41 	or %d4,%d4,3
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001926:	54 22       	ld.w %d2,[%a2]
80001928:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000192c:	a6 42       	or %d2,%d4
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000192e:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80001930:	54 22       	ld.w %d2,[%a2]
80001932:	6f 02 ff 7f 	jz.t %d2,0,80001930 <IfxScuWdt_disableCpuWatchdog+0x76>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
80001936:	00 90       	ret 

80001938 <IfxScuWdt_disableSafetyWatchdog>:


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
80001938:	40 ae       	mov.aa %a14,%sp
8000193a:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
8000193e:	91 30 00 2f 	movh.a %a2,61443
80001942:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001946:	54 22       	ld.w %d2,[%a2]
80001948:	6f 12 0b 00 	jz.t %d2,1,8000195e <IfxScuWdt_disableSafetyWatchdog+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000194c:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001950:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001954:	54 22       	ld.w %d2,[%a2]
80001956:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000195a:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000195c:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000195e:	06 24       	sh %d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001960:	8f 24 40 31 	or %d3,%d4,2
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001964:	91 30 00 2f 	movh.a %a2,61443
80001968:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000196c:	54 22       	ld.w %d2,[%a2]
8000196e:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001972:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001974:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80001976:	91 30 00 2f 	movh.a %a2,61443
8000197a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000197e:	54 22       	ld.w %d2,[%a2]
80001980:	6f 02 fb ff 	jnz.t %d2,0,80001976 <IfxScuWdt_disableSafetyWatchdog+0x3e>
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
80001984:	91 30 00 2f 	movh.a %a2,61443
80001988:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
8000198c:	54 22       	ld.w %d2,[%a2]
8000198e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80001992:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80001994:	91 30 00 2f 	movh.a %a2,61443
80001998:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
8000199c:	54 22       	ld.w %d2,[%a2]
8000199e:	6f 12 09 00 	jz.t %d2,1,800019b0 <IfxScuWdt_disableSafetyWatchdog+0x78>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800019a2:	8f 14 40 31 	or %d3,%d4,1
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800019a6:	54 22       	ld.w %d2,[%a2]
800019a8:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019ac:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800019ae:	74 22       	st.w [%a2],%d2
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
800019b0:	8f 34 40 41 	or %d4,%d4,3
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800019b4:	91 30 00 2f 	movh.a %a2,61443
800019b8:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800019bc:	54 22       	ld.w %d2,[%a2]
800019be:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800019c2:	a6 42       	or %d2,%d4
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800019c4:	74 22       	st.w [%a2],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
800019c6:	91 30 00 2f 	movh.a %a2,61443
800019ca:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
800019ce:	54 22       	ld.w %d2,[%a2]
800019d0:	6f 02 fb 7f 	jz.t %d2,0,800019c6 <IfxScuWdt_disableSafetyWatchdog+0x8e>
    IfxScuWdt_setSafetyEndinitInline(password);
}
800019d4:	00 90       	ret 

800019d6 <IfxScuWdt_getCpuWatchdogPassword>:
    IfxScuWdt_setSafetyEndinitInline(password);
}


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
800019d6:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
800019d8:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800019dc:	8f 72 00 21 	and %d2,%d2,7
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
800019e0:	7b 30 00 3f 	movh %d3,61443
800019e4:	1b c3 24 36 	addi %d3,%d3,25164
800019e8:	13 c2 20 23 	madd %d2,%d3,%d2,12
    password  = watchdog->CON0.B.PW;
800019ec:	60 22       	mov.a %a2,%d2
800019ee:	54 22       	ld.w %d2,[%a2]
800019f0:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
800019f4:	8f f2 83 21 	xor %d2,%d2,63
800019f8:	00 90       	ret 

800019fa <IfxScuWdt_getSafetyWatchdogPassword>:
    return password;
}


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
800019fa:	40 ae       	mov.aa %a14,%sp
    password  = watchdog->CON0.B.PW;
800019fc:	91 30 00 2f 	movh.a %a2,61443
80001a00:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a04:	54 22       	ld.w %d2,[%a2]
80001a06:	37 02 6e 21 	extr.u %d2,%d2,2,14
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
80001a0a:	8f f2 83 21 	xor %d2,%d2,63
80001a0e:	00 90       	ret 

80001a10 <IfxScuWdt_setCpuEndinit>:
    IfxScuWdt_setSafetyEndinit(password);
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
80001a10:	40 ae       	mov.aa %a14,%sp
    reg.U = __mfcr(CPU_CORE_ID);
80001a12:	4d c0 e1 2f 	mfcr %d2,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80001a16:	8f 72 00 21 	and %d2,%d2,7
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80001a1a:	7b 30 00 3f 	movh %d3,61443
80001a1e:	1b c3 24 36 	addi %d3,%d3,25164
80001a22:	13 c2 20 23 	madd %d2,%d3,%d2,12
80001a26:	60 22       	mov.a %a2,%d2
    if (watchdog->CON0.B.LCK)
80001a28:	54 22       	ld.w %d2,[%a2]
80001a2a:	6f 12 0b 00 	jz.t %d2,1,80001a40 <IfxScuWdt_setCpuEndinit+0x30>
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a2e:	8f 24 00 30 	sh %d3,%d4,2
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001a32:	8f 13 40 31 	or %d3,%d3,1
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a36:	54 22       	ld.w %d2,[%a2]
80001a38:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a3c:	a6 32       	or %d2,%d3
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a3e:	74 22       	st.w [%a2],%d2
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a40:	8f 24 00 30 	sh %d3,%d4,2
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
80001a44:	8f 33 40 31 	or %d3,%d3,3
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80001a48:	54 22       	ld.w %d2,[%a2]
80001a4a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80001a4e:	a6 32       	or %d2,%d3
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80001a50:	74 22       	st.w [%a2],%d2
    while (watchdog->CON0.B.ENDINIT == 0)
80001a52:	54 22       	ld.w %d2,[%a2]
80001a54:	6f 02 ff 7f 	jz.t %d2,0,80001a52 <IfxScuWdt_setCpuEndinit+0x42>
}
80001a58:	00 90       	ret 

80001a5a <IfxScuWdt_setSafetyEndinit>:
    {}
}


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
80001a5a:	40 ae       	mov.aa %a14,%sp
80001a5c:	37 04 70 40 	extr.u %d4,%d4,0,16
    if (SCU_WDTS_CON0.B.LCK)
80001a60:	91 30 00 2f 	movh.a %a2,61443
80001a64:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a68:	54 22       	ld.w %d2,[%a2]
80001a6a:	6f 12 0b 00 	jz.t %d2,1,80001a80 <IfxScuWdt_setSafetyEndinit+0x26>
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a6e:	8f 24 00 30 	sh %d3,%d4,2
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001a72:	8f 13 40 31 	or %d3,%d3,1
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001a76:	54 22       	ld.w %d2,[%a2]
80001a78:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a7c:	a6 32       	or %d2,%d3
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001a7e:	74 22       	st.w [%a2],%d2
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a80:	8f 24 00 30 	sh %d3,%d4,2
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
80001a84:	8f 33 40 31 	or %d3,%d3,3
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80001a88:	91 30 00 2f 	movh.a %a2,61443
80001a8c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001a90:	54 22       	ld.w %d2,[%a2]
80001a92:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80001a96:	a6 32       	or %d2,%d3
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80001a98:	74 22       	st.w [%a2],%d2
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
80001a9a:	91 30 00 2f 	movh.a %a2,61443
80001a9e:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80001aa2:	54 22       	ld.w %d2,[%a2]
80001aa4:	6f 02 fb 7f 	jz.t %d2,0,80001a9a <IfxScuWdt_setSafetyEndinit+0x40>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80001aa8:	00 90       	ret 

80001aaa <IfxPort_setPinMode>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80001aaa:	40 ae       	mov.aa %a14,%sp
80001aac:	80 48       	mov.d %d8,%a4
80001aae:	02 5b       	mov %d11,%d5
80001ab0:	8f f4 0f d1 	and %d13,%d4,255
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80001ab4:	1b 08 01 e0 	addi %d14,%d8,16
    uint8                 iocrIndex = (pinIndex / 4);
80001ab8:	37 04 66 a1 	extr.u %d10,%d4,2,6
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80001abc:	8f 34 00 41 	and %d4,%d4,3
80001ac0:	8f 34 00 90 	sh %d9,%d4,3

    if ((port == &MODULE_P40) || (port == &MODULE_P41))
80001ac4:	7b 40 00 4f 	movh %d4,61444
80001ac8:	1b 04 80 4c 	addi %d4,%d4,-14336
80001acc:	7b 40 00 3f 	movh %d3,61444
80001ad0:	1b 03 90 3c 	addi %d3,%d3,-14080
80001ad4:	0b 48 00 21 	eq %d2,%d8,%d4
80001ad8:	0b 38 70 22 	or.eq %d2,%d8,%d3
80001adc:	df 02 12 80 	jne %d2,0,80001b00 <IfxPort_setPinMode+0x56>
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
        IfxScuWdt_setCpuEndinit(passwd);
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80001ae0:	8f 2a 00 20 	sh %d2,%d10,2
80001ae4:	60 e2       	mov.a %a2,%d14
80001ae6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001aea:	3b f0 0f 40 	mov %d4,255
80001aee:	0f 94 00 40 	sh %d4,%d4,%d9
80001af2:	0f 9b 00 20 	sh %d2,%d11,%d9
                     ::"a"(address), "d"(mask), "d"((long long)value));
80001af6:	82 03       	mov %d3,0
    __asm__ volatile("mov %H2,%1 \n\
80001af8:	02 43       	mov %d3,%d4
80001afa:	49 22 40 08 	ldmst [%a2]0,%e2
}
80001afe:	00 90       	ret 
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001b00:	6d ff 6b ff 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
80001b04:	02 2c       	mov %d12,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80001b06:	02 24       	mov %d4,%d2
80001b08:	6d ff 8c fe 	call 80001820 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80001b0c:	60 82       	mov.a %a2,%d8
80001b0e:	19 22 20 10 	ld.w %d2,[%a2]96
80001b12:	d7 02 01 2d 	insert %d2,%d2,0,%d13,1
80001b16:	59 22 20 10 	st.w [%a2]96,%d2
        IfxScuWdt_setCpuEndinit(passwd);
80001b1a:	02 c4       	mov %d4,%d12
80001b1c:	6d ff 7a ff 	call 80001a10 <IfxScuWdt_setCpuEndinit>
80001b20:	1d ff e0 ff 	j 80001ae0 <IfxPort_setPinMode+0x36>

80001b24 <IfxPort_setPinPadDriver>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80001b24:	40 ae       	mov.aa %a14,%sp
80001b26:	80 4b       	mov.d %d11,%a4
80001b28:	02 5a       	mov %d10,%d5
80001b2a:	8f f4 0f 81 	and %d8,%d4,255
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80001b2e:	6d ff 54 ff 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
80001b32:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80001b34:	02 24       	mov %d4,%d2
80001b36:	6d ff 75 fe 	call 80001820 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80001b3a:	1b 0b 04 40 	addi %d4,%d11,64
        uint8            pdrIndex = (pinIndex / 8);
80001b3e:	8f d8 1f 20 	sh %d2,%d8,-3
        uint8            shift    = (pinIndex & 0x7U) * 4;
80001b42:	8f 78 00 31 	and %d3,%d8,7
80001b46:	06 23       	sh %d3,2
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80001b48:	06 22       	sh %d2,2
80001b4a:	60 42       	mov.a %a2,%d4
80001b4c:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
80001b50:	3b f0 00 20 	mov %d2,15
80001b54:	0f 32 00 20 	sh %d2,%d2,%d3
80001b58:	0f 3a 00 30 	sh %d3,%d10,%d3
                     ::"a"(address), "d"(mask), "d"((long long)value));
80001b5c:	53 13 40 60 	mul.u %e6,%d3,1
    __asm__ volatile("mov %H2,%1 \n\
80001b60:	02 27       	mov %d7,%d2
80001b62:	49 46 40 08 	ldmst [%a4]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80001b66:	02 94       	mov %d4,%d9
80001b68:	6d ff 54 ff 	call 80001a10 <IfxScuWdt_setCpuEndinit>
}
80001b6c:	00 90       	ret 

80001b6e <IfxCpu_Trap_memoryManagementError>:
{
80001b6e:	40 ae       	mov.aa %a14,%sp
80001b70:	20 08       	sub.a %sp,8
}

IFX_INLINE void* Ifx__getA11(void)
{
    uint32 *res;
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001b72:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001b74:	8f f4 0f 41 	and %d4,%d4,255
    reg.U = __mfcr(CPU_CORE_ID);
80001b78:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001b7c:	8f 72 00 21 	and %d2,%d2,7
80001b80:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001b84:	80 22       	mov.d %d2,%a2
80001b86:	0f 54 a0 30 	or %d3,%d4,%d5
80001b8a:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_MME_HOOK(trapWatch);
80001b8e:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001b92:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001b94:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001b98:	00 80       	rfe 
}
80001b9a:	00 90       	ret 

80001b9c <IfxCpu_Trap_internalProtectionError>:
{
80001b9c:	40 ae       	mov.aa %a14,%sp
80001b9e:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001ba0:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001ba2:	b7 14 18 44 	insert %d4,%d4,1,8,24
80001ba6:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001baa:	8f 72 00 21 	and %d2,%d2,7
80001bae:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001bb2:	80 22       	mov.d %d2,%a2
80001bb4:	0f 54 a0 30 	or %d3,%d4,%d5
80001bb8:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch);
80001bbc:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001bc0:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001bc2:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001bc6:	00 80       	rfe 
}
80001bc8:	00 90       	ret 

80001bca <IfxCpu_Trap_instructionError>:
{
80001bca:	40 ae       	mov.aa %a14,%sp
80001bcc:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001bce:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001bd0:	b7 24 18 44 	insert %d4,%d4,2,8,24
80001bd4:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001bd8:	8f 72 00 21 	and %d2,%d2,7
80001bdc:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001be0:	80 22       	mov.d %d2,%a2
80001be2:	0f 54 a0 30 	or %d3,%d4,%d5
80001be6:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch);
80001bea:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001bee:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001bf0:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001bf4:	00 80       	rfe 
}
80001bf6:	00 90       	ret 

80001bf8 <IfxCpu_Trap_contextManagementError>:
{
80001bf8:	40 ae       	mov.aa %a14,%sp
80001bfa:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001bfc:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001bfe:	b7 34 18 44 	insert %d4,%d4,3,8,24
80001c02:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c06:	8f 72 00 21 	and %d2,%d2,7
80001c0a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c0e:	80 22       	mov.d %d2,%a2
80001c10:	0f 54 a0 30 	or %d3,%d4,%d5
80001c14:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_CME_HOOK(trapWatch);
80001c18:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c1c:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c1e:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c22:	00 80       	rfe 
}
80001c24:	00 90       	ret 

80001c26 <IfxCpu_Trap_busError>:
{
80001c26:	40 ae       	mov.aa %a14,%sp
80001c28:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c2a:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c2c:	b7 44 18 44 	insert %d4,%d4,4,8,24
80001c30:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c34:	8f 72 00 21 	and %d2,%d2,7
80001c38:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c3c:	80 22       	mov.d %d2,%a2
80001c3e:	0f 54 a0 30 	or %d3,%d4,%d5
80001c42:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch);
80001c46:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c4a:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c4c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c50:	00 80       	rfe 
}
80001c52:	00 90       	ret 

80001c54 <IfxCpu_Trap_assertion>:
{
80001c54:	40 ae       	mov.aa %a14,%sp
80001c56:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c58:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c5a:	8f f4 0f 41 	and %d4,%d4,255
80001c5e:	3b 00 50 20 	mov %d2,1280
80001c62:	a6 24       	or %d4,%d2
80001c64:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c68:	8f 72 00 21 	and %d2,%d2,7
80001c6c:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c70:	80 22       	mov.d %d2,%a2
80001c72:	0f 54 a0 30 	or %d3,%d4,%d5
80001c76:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch);
80001c7a:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm__ volatile ("debug" : : : "memory");
80001c7e:	00 a0       	debug 
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001c80:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001c84:	00 80       	rfe 
}
80001c86:	00 90       	ret 

80001c88 <IfxCpu_Trap_systemCall_Cpu0>:
{
80001c88:	40 ae       	mov.aa %a14,%sp
80001c8a:	20 08       	sub.a %sp,8
    __asm__ volatile ("mov.aa %0, %%a11": "=a" (res) : :"a11");
80001c8c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001c8e:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001c92:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001c96:	8f 72 00 21 	and %d2,%d2,7
80001c9a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001c9e:	80 22       	mov.d %d2,%a2
80001ca0:	0f 54 a0 30 	or %d3,%d4,%d5
80001ca4:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU0_HOOK(trapWatch);
80001ca8:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001cac:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001cb0:	00 80       	rfe 
}
80001cb2:	00 90       	ret 

80001cb4 <IfxCpu_Trap_systemCall_Cpu1>:
{
80001cb4:	40 ae       	mov.aa %a14,%sp
80001cb6:	20 08       	sub.a %sp,8
80001cb8:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001cba:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001cbe:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001cc2:	8f 72 00 21 	and %d2,%d2,7
80001cc6:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001cca:	80 22       	mov.d %d2,%a2
80001ccc:	0f 54 a0 30 	or %d3,%d4,%d5
80001cd0:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU1_HOOK(trapWatch);
80001cd4:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001cd8:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001cdc:	00 80       	rfe 
}
80001cde:	00 90       	ret 

80001ce0 <IfxCpu_Trap_systemCall_Cpu2>:
{
80001ce0:	40 ae       	mov.aa %a14,%sp
80001ce2:	20 08       	sub.a %sp,8
80001ce4:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001ce6:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001cea:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001cee:	8f 72 00 21 	and %d2,%d2,7
80001cf2:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001cf6:	80 22       	mov.d %d2,%a2
80001cf8:	0f 54 a0 30 	or %d3,%d4,%d5
80001cfc:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU2_HOOK(trapWatch);
80001d00:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d04:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d08:	00 80       	rfe 
}
80001d0a:	00 90       	ret 

80001d0c <IfxCpu_Trap_systemCall_Cpu3>:
{
80001d0c:	40 ae       	mov.aa %a14,%sp
80001d0e:	20 08       	sub.a %sp,8
80001d10:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d12:	b7 64 18 44 	insert %d4,%d4,6,8,24
80001d16:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d1a:	8f 72 00 21 	and %d2,%d2,7
80001d1e:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d22:	80 22       	mov.d %d2,%a2
80001d24:	0f 54 a0 30 	or %d3,%d4,%d5
80001d28:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_SYSCALL_CPU3_HOOK(trapWatch);
80001d2c:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d30:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d34:	00 80       	rfe 
}
80001d36:	00 90       	ret 

80001d38 <IfxCpu_Trap_nonMaskableInterrupt>:
{
80001d38:	40 ae       	mov.aa %a14,%sp
80001d3a:	20 08       	sub.a %sp,8
80001d3c:	40 b2       	mov.aa %a2,%a11
    trapInfo.tId    = tin;
80001d3e:	b7 74 18 44 	insert %d4,%d4,7,8,24
80001d42:	4d c0 e1 2f 	mfcr %d2,$core_id
    trapInfo.tCpu   = IfxCpu_getCoreId();
80001d46:	8f 72 00 21 	and %d2,%d2,7
80001d4a:	8f 02 01 50 	sh %d5,%d2,16
    return trapInfo;
80001d4e:	80 22       	mov.d %d2,%a2
80001d50:	0f 54 a0 30 	or %d3,%d4,%d5
80001d54:	89 e2 78 f9 	st.d [%a14]-8,%e2
    IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch);    
80001d58:	09 e2 78 f9 	ld.d %e2,[%a14]-8
    __asm("rslcx"); /* Restore lower context before returning. lower context was stored in the trap vector */
80001d5c:	0d 00 40 02 	rslcx 
    __asm("rfe");
80001d60:	00 80       	rfe 
}
80001d62:	00 90       	ret 

80001d64 <IfxCpu_waitEvent>:
    return retVal;
}


boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec)
{
80001d64:	40 ae       	mov.aa %a14,%sp
80001d66:	40 4c       	mov.aa %a12,%a4
80001d68:	02 48       	mov %d8,%d4
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001d6a:	80 42       	mov.d %d2,%a4
80001d6c:	b7 02 1c 20 	insert %d2,%d2,0,0,28
80001d70:	7b 00 00 3d 	movh %d3,53248
80001d74:	5f 32 2b 00 	jeq %d2,%d3,80001dca <IfxCpu_waitEvent+0x66>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
80001d78:	82 04       	mov %d4,0
80001d7a:	6d ff a4 f8 	call 80000ec2 <IfxScuCcu_getSourceFrequency>
80001d7e:	91 30 00 2f 	movh.a %a2,61443
80001d82:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80001d86:	54 23       	ld.w %d3,[%a2]
80001d88:	8f f3 00 31 	and %d3,%d3,15
80001d8c:	4b 03 41 31 	itof %d3,%d3
80001d90:	4b 32 51 20 	div.f %d2,%d2,%d3

    boolean          errorcnt      = 0U;
    /* Divide with 1000, gives the count value equivalent to milliseconds */
    uint32           stmCount      = (uint32)((IfxScuCcu_getStmFrequency() / 1000) * timeoutMilliSec);
80001d94:	7b a0 47 34 	movh %d3,17530
80001d98:	4b 32 51 20 	div.f %d2,%d2,%d3
80001d9c:	4b 08 61 41 	utof %d4,%d8
80001da0:	4b 24 41 40 	mul.f %d4,%d4,%d2
80001da4:	4b 04 71 31 	ftouz %d3,%d4
    uint32           stmCountBegin = STM0_TIM0.U;
80001da8:	85 f4 10 01 	ld.w %d4,f0001010 <bmhd_3_copy+0x40bffa10>

    while ((*sync & IFXCPU_CFG_ALLCORE_DONE) != IFXCPU_CFG_ALLCORE_DONE)
80001dac:	54 c2       	ld.w %d2,[%a12]
80001dae:	8f f2 00 21 	and %d2,%d2,15
80001db2:	8b f2 20 22 	ne %d2,%d2,15
80001db6:	df 02 18 00 	jeq %d2,0,80001de6 <IfxCpu_waitEvent+0x82>
    __asm__ volatile ("nop" : : : "memory");
80001dba:	00 00       	nop 
    {
        __nop();

        if ((uint32)(STM0_TIM0.U - stmCountBegin) >= stmCount)
80001dbc:	85 f2 10 01 	ld.w %d2,f0001010 <bmhd_3_copy+0x40bffa10>
80001dc0:	a2 42       	sub %d2,%d4
80001dc2:	3f 32 f5 ff 	jlt.u %d2,%d3,80001dac <IfxCpu_waitEvent+0x48>
        {
            errorcnt = 1;
80001dc6:	82 12       	mov %d2,1
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }

    return errorcnt;
}
80001dc8:	00 90       	ret 
    volatile uint32 *sync          = (volatile uint32 *)IFXCPU_GLB_ADDR_DSPR(__mfcr(CPU_CORE_ID), event);
80001dca:	80 42       	mov.d %d2,%a4
80001dcc:	b7 02 0c 3a 	insert %d3,%d2,0,20,12
80001dd0:	b7 f3 03 3e 	insert %d3,%d3,15,28,3
80001dd4:	4d c0 e1 2f 	mfcr %d2,$core_id
80001dd8:	8f c2 01 20 	sh %d2,%d2,28
80001ddc:	0b 23 80 20 	sub %d2,%d3,%d2
80001de0:	60 2c       	mov.a %a12,%d2
80001de2:	1d ff cb ff 	j 80001d78 <IfxCpu_waitEvent+0x14>
80001de6:	00 90       	ret 

80001de8 <IfxCpu_emitEvent>:


void IfxCpu_emitEvent(IfxCpu_syncEvent *event)
{
80001de8:	40 ae       	mov.aa %a14,%sp
    Ifx__imaskldmst(event, 1, __mfcr(CPU_CORE_ID), 1);
80001dea:	4d c0 e1 2f 	mfcr %d2,$core_id
80001dee:	82 13       	mov %d3,1
80001df0:	57 30 21 22 	imask %e2,%d3,%d2,1
80001df4:	49 42 40 08 	ldmst [%a4]0,%e2
}
80001df8:	00 90       	ret 

80001dfa <IfxCan_Node_clearRxBufferNewDataFlag>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxCan_Node_clearRxBufferNewDataFlag(Ifx_CAN_N *node, IfxCan_RxBufferId rxBufferId)
{
80001dfa:	40 ae       	mov.aa %a14,%sp
    uint32 value;

    if (rxBufferId < IfxCan_RxBufferId_32)
80001dfc:	8b 04 a2 22 	ge.u %d2,%d4,32
80001e00:	df 02 08 80 	jne %d2,0,80001e10 <IfxCan_Node_clearRxBufferNewDataFlag+0x16>
    {
        value         = (1U << rxBufferId);
80001e04:	82 12       	mov %d2,1
80001e06:	0f 42 00 20 	sh %d2,%d2,%d4
        node->NDAT1.U = value;
80001e0a:	59 42 18 60 	st.w [%a4]408,%d2
80001e0e:	00 90       	ret 
    }
    else
    {
        value         = (1U << (rxBufferId - 32));
80001e10:	1b 04 fe 4f 	addi %d4,%d4,-32
80001e14:	82 13       	mov %d3,1
80001e16:	0f 43 00 30 	sh %d3,%d3,%d4
        node->NDAT2.U = value;
80001e1a:	59 43 1c 60 	st.w [%a4]412,%d3
    }
}
80001e1e:	00 90       	ret 

80001e20 <IfxCan_Node_getDataLength>:


uint32 IfxCan_Node_getDataLength(IfxCan_DataLengthCode dataLengthCode)
{
80001e20:	40 ae       	mov.aa %a14,%sp
    uint32 numBytes;

    if (dataLengthCode <= IfxCan_DataLengthCode_8)
80001e22:	bf 94 08 80 	jlt.u %d4,9,80001e32 <IfxCan_Node_getDataLength+0x12>
    {
        numBytes = (uint32)dataLengthCode;
    }
    else if (dataLengthCode <= IfxCan_DataLengthCode_24)
80001e26:	ff d4 0a 80 	jge.u %d4,13,80001e3a <IfxCan_Node_getDataLength+0x1a>
    {
        numBytes = ((uint32)dataLengthCode - 6) << 2;
80001e2a:	1b a4 ff 2f 	addi %d2,%d4,-6
80001e2e:	8f 22 00 40 	sh %d4,%d2,2
    else
    {
        numBytes = ((uint32)dataLengthCode - 11) << 4;
    }

    return (numBytes + 3) >> 2;
80001e32:	1b 34 00 20 	addi %d2,%d4,3
}
80001e36:	06 e2       	sh %d2,-2
80001e38:	00 90       	ret 
        numBytes = ((uint32)dataLengthCode - 11) << 4;
80001e3a:	1b 54 ff 4f 	addi %d4,%d4,-11
80001e3e:	06 44       	sh %d4,4
80001e40:	1d ff f9 ff 	j 80001e32 <IfxCan_Node_getDataLength+0x12>

80001e44 <IfxCan_Node_getFrameMode>:
    return (Ifx_CAN_EXTMSG *)extendedFilterElementAddress;
}


IfxCan_FrameMode IfxCan_Node_getFrameMode(Ifx_CAN_RXMSG *rxBufferElement)
{
80001e44:	40 ae       	mov.aa %a14,%sp
    IfxCan_FrameMode frameMode;

    /* if CAN FD long frame is been selected */
    if (rxBufferElement->R1.B.FDF)
80001e46:	d9 42 04 00 	lea %a2,[%a4]4
80001e4a:	19 42 04 00 	ld.w %d2,[%a4]4
80001e4e:	ef 52 09 00 	jz.t %d2,21,80001e60 <IfxCan_Node_getFrameMode+0x1c>
    {
        /* if bitrate switch is been set */
        if (rxBufferElement->R1.B.BRS)
80001e52:	54 22       	ld.w %d2,[%a2]
80001e54:	ef 42 04 80 	jnz.t %d2,20,80001e5c <IfxCan_Node_getFrameMode+0x18>
            frameMode = IfxCan_FrameMode_fdLongAndFast;
        }
        /* if bitrate switch is not been set */
        else
        {
            frameMode = IfxCan_FrameMode_fdLong;
80001e58:	82 12       	mov %d2,1
    {
        frameMode = IfxCan_FrameMode_standard;
    }

    return frameMode;
}
80001e5a:	00 90       	ret 
            frameMode = IfxCan_FrameMode_fdLongAndFast;
80001e5c:	82 22       	mov %d2,2
80001e5e:	00 90       	ret 
        frameMode = IfxCan_FrameMode_standard;
80001e60:	82 02       	mov %d2,0
80001e62:	00 90       	ret 

80001e64 <IfxCan_Node_getRxBufferDataFieldSize>:
    return frameMode;
}


uint8 IfxCan_Node_getRxBufferDataFieldSize(Ifx_CAN_N *node)
{
80001e64:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.RBDS;
80001e66:	19 42 3c 60 	ld.w %d2,[%a4]444
80001e6a:	37 02 63 24 	extr.u %d2,%d2,8,3

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001e6e:	ff 52 07 80 	jge.u %d2,5,80001e7c <IfxCan_Node_getRxBufferDataFieldSize+0x18>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001e72:	c2 22       	add %d2,2
80001e74:	06 22       	sh %d2,2
80001e76:	8f f2 0f 21 	and %d2,%d2,255
80001e7a:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001e7c:	c2 d2       	add %d2,-3
80001e7e:	06 42       	sh %d2,4
80001e80:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001e84:	00 90       	ret 

80001e86 <IfxCan_Node_getRxBufferElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxBuffersStartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001e86:	40 ae       	mov.aa %a14,%sp
80001e88:	02 49       	mov %d9,%d4
80001e8a:	02 6a       	mov %d10,%d6
80001e8c:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxBufferIndex, rxBufferSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes = IfxCan_Node_getRxBufferDataFieldSize(node);
80001e90:	6d ff ea ff 	call 80001e64 <IfxCan_Node_getRxBufferDataFieldSize>
80001e94:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxBufferSize   = numOfconfigBytes + numOfDataBytes;
80001e98:	1b 82 00 20 	addi %d2,%d2,8
80001e9c:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxBufferIndex  = rxBufferSize * ((uint16)rxBufferNumber);
80001ea0:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001ea4:	e2 a2       	mul %d2,%d10
80001ea6:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxBufferElementAddress = ramBaseAddress + rxBuffersStartAddress + rxBufferIndex;
80001eaa:	60 82       	mov.a %a2,%d8
80001eac:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxBufferElementAddress;
}
80001eb0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001eb4:	00 90       	ret 

80001eb6 <IfxCan_Node_getRxFifo0DataFieldSize>:


uint8 IfxCan_Node_getRxFifo0DataFieldSize(Ifx_CAN_N *node)
{
80001eb6:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F0DS;
80001eb8:	19 42 3c 60 	ld.w %d2,[%a4]444
80001ebc:	8f 72 00 21 	and %d2,%d2,7

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001ec0:	ff 52 05 80 	jge.u %d2,5,80001eca <IfxCan_Node_getRxFifo0DataFieldSize+0x14>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001ec4:	c2 22       	add %d2,2
80001ec6:	06 22       	sh %d2,2
80001ec8:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001eca:	c2 d2       	add %d2,-3
80001ecc:	06 42       	sh %d2,4
80001ece:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001ed2:	00 90       	ret 

80001ed4 <IfxCan_Node_getRxFifo0ElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo0ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo0StartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001ed4:	40 ae       	mov.aa %a14,%sp
80001ed6:	02 49       	mov %d9,%d4
80001ed8:	02 6a       	mov %d10,%d6
80001eda:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes     = IfxCan_Node_getRxFifo0DataFieldSize(node);
80001ede:	6d ff ec ff 	call 80001eb6 <IfxCan_Node_getRxFifo0DataFieldSize>
80001ee2:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
80001ee6:	1b 82 00 20 	addi %d2,%d2,8
80001eea:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
80001eee:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001ef2:	e2 a2       	mul %d2,%d10
80001ef4:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxFifoElementAddress = ramBaseAddress + rxFifo0StartAddress + rxFifoElementIndex;
80001ef8:	60 82       	mov.a %a2,%d8
80001efa:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
}
80001efe:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001f02:	00 90       	ret 

80001f04 <IfxCan_Node_getRxFifo1DataFieldSize>:


uint8 IfxCan_Node_getRxFifo1DataFieldSize(Ifx_CAN_N *node)
{
80001f04:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->RX.ESC.B.F1DS;
80001f06:	19 42 3c 60 	ld.w %d2,[%a4]444
80001f0a:	37 02 63 22 	extr.u %d2,%d2,4,3

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001f0e:	ff 52 07 80 	jge.u %d2,5,80001f1c <IfxCan_Node_getRxFifo1DataFieldSize+0x18>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001f12:	c2 22       	add %d2,2
80001f14:	06 22       	sh %d2,2
80001f16:	8f f2 0f 21 	and %d2,%d2,255
80001f1a:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001f1c:	c2 d2       	add %d2,-3
80001f1e:	06 42       	sh %d2,4
80001f20:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001f24:	00 90       	ret 

80001f26 <IfxCan_Node_getRxFifo1ElementAddress>:


Ifx_CAN_RXMSG *IfxCan_Node_getRxFifo1ElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 rxFifo1StartAddress, IfxCan_RxBufferId rxBufferNumber)
{
80001f26:	40 ae       	mov.aa %a14,%sp
80001f28:	02 49       	mov %d9,%d4
80001f2a:	02 6a       	mov %d10,%d6
80001f2c:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 rxFifoElementIndex, rxFifoElementSize, numOfDataBytes, numOfconfigBytes = 8;

    numOfDataBytes     = IfxCan_Node_getRxFifo1DataFieldSize(node);
80001f30:	6d ff ea ff 	call 80001f04 <IfxCan_Node_getRxFifo1DataFieldSize>
80001f34:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementSize  = numOfconfigBytes + numOfDataBytes;
80001f38:	1b 82 00 20 	addi %d2,%d2,8
80001f3c:	37 02 70 20 	extr.u %d2,%d2,0,16
    rxFifoElementIndex = rxFifoElementSize * ((uint16)rxBufferNumber);
80001f40:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001f44:	e2 a2       	mul %d2,%d10
80001f46:	37 02 70 20 	extr.u %d2,%d2,0,16
    uint32 rxFifoElementAddress = ramBaseAddress + rxFifo1StartAddress + rxFifoElementIndex;
80001f4a:	60 82       	mov.a %a2,%d8
80001f4c:	01 29 00 26 	addsc.a %a2,%a2,%d9,0

    return (Ifx_CAN_RXMSG *)rxFifoElementAddress;
}
80001f50:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001f54:	00 90       	ret 

80001f56 <IfxCan_Node_getStandardFilterElementAddress>:


Ifx_CAN_STDMSG *IfxCan_Node_getStandardFilterElementAddress(uint32 ramBaseAddress, uint16 standardFilterListStartAddress, uint8 filterNumber)
{
80001f56:	40 ae       	mov.aa %a14,%sp
    uint32 standardFilterElementAddress, filterIndex;

    filterIndex                  = filterNumber * 4;
80001f58:	06 26       	sh %d6,2
    standardFilterElementAddress = ramBaseAddress + standardFilterListStartAddress + filterIndex;
80001f5a:	60 52       	mov.a %a2,%d5
80001f5c:	01 24 00 26 	addsc.a %a2,%a2,%d4,0

    return (Ifx_CAN_STDMSG *)standardFilterElementAddress;
}
80001f60:	01 26 00 26 	addsc.a %a2,%a2,%d6,0
80001f64:	00 90       	ret 

80001f66 <IfxCan_Node_getTxBufferDataFieldSize>:


uint8 IfxCan_Node_getTxBufferDataFieldSize(Ifx_CAN_N *node)
{
80001f66:	40 ae       	mov.aa %a14,%sp
    IfxCan_DataFieldSize sizeCode = (IfxCan_DataFieldSize)node->TX.ESC.B.TBDS;
80001f68:	19 42 08 70 	ld.w %d2,[%a4]456
80001f6c:	8f 72 00 21 	and %d2,%d2,7

    uint8                size;

    if (sizeCode < IfxCan_DataFieldSize_32)
80001f70:	ff 52 05 80 	jge.u %d2,5,80001f7a <IfxCan_Node_getTxBufferDataFieldSize+0x14>
    {
        size = ((uint8)sizeCode + 2) * 4;
80001f74:	c2 22       	add %d2,2
80001f76:	06 22       	sh %d2,2
80001f78:	00 90       	ret 
    }
    else
    {
        size = ((uint8)sizeCode - 3) * 16;
80001f7a:	c2 d2       	add %d2,-3
80001f7c:	06 42       	sh %d2,4
80001f7e:	8f f2 0f 21 	and %d2,%d2,255
    }

    return size;
}
80001f82:	00 90       	ret 

80001f84 <IfxCan_Node_getTxBufferElementAddress>:


Ifx_CAN_TXMSG *IfxCan_Node_getTxBufferElementAddress(Ifx_CAN_N *node, uint32 ramBaseAddress, uint16 txBuffersStartAddress, IfxCan_TxBufferId txBufferNumber)
{
80001f84:	40 ae       	mov.aa %a14,%sp
80001f86:	02 49       	mov %d9,%d4
80001f88:	02 6a       	mov %d10,%d6
80001f8a:	37 05 70 80 	extr.u %d8,%d5,0,16
    uint16 txBufferIndex, txBufferSize, numOfDataBytes, numOfConfigBytes = 8;

    numOfDataBytes = IfxCan_Node_getTxBufferDataFieldSize(node);
80001f8e:	6d ff ec ff 	call 80001f66 <IfxCan_Node_getTxBufferDataFieldSize>
80001f92:	37 02 70 20 	extr.u %d2,%d2,0,16
    txBufferSize   = numOfConfigBytes + numOfDataBytes;
80001f96:	1b 82 00 20 	addi %d2,%d2,8
80001f9a:	37 02 70 20 	extr.u %d2,%d2,0,16
    txBufferIndex  = txBufferSize * ((uint16)txBufferNumber);
80001f9e:	37 0a 70 a0 	extr.u %d10,%d10,0,16
80001fa2:	e2 a2       	mul %d2,%d10
80001fa4:	37 02 70 20 	extr.u %d2,%d2,0,16

    uint32 txBufferElementAddress = ramBaseAddress + txBuffersStartAddress + txBufferIndex;
80001fa8:	60 82       	mov.a %a2,%d8
80001faa:	01 29 00 26 	addsc.a %a2,%a2,%d9,0
    return (Ifx_CAN_TXMSG *)txBufferElementAddress;
}
80001fae:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80001fb2:	00 90       	ret 

80001fb4 <IfxCan_Node_initRxPin>:
    return (Ifx_CAN_TXEVENT *)txEventFifoElementAddress;
}


boolean IfxCan_Node_initRxPin(Ifx_CAN_N *node, IfxCan_Rxd_In *rxd, IfxPort_InputMode mode, IfxPort_PadDriver padDriver)
{
80001fb4:	40 ae       	mov.aa %a14,%sp
80001fb6:	40 4d       	mov.aa %a13,%a4
80001fb8:	40 5c       	mov.aa %a12,%a5
80001fba:	02 58       	mov %d8,%d5
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80001fbc:	02 45       	mov %d5,%d4
80001fbe:	39 54 0c 00 	ld.bu %d4,[%a5]12
80001fc2:	99 54 08 00 	ld.a %a4,[%a5]8
80001fc6:	6d ff 72 fd 	call 80001aaa <IfxPort_setPinMode>
    IfxPort_setPinModeInput(rxd->pin.port, rxd->pin.pinIndex, mode);
    IfxPort_setPinPadDriver(rxd->pin.port, rxd->pin.pinIndex, padDriver);
80001fca:	02 85       	mov %d5,%d8
80001fcc:	39 c4 0c 00 	ld.bu %d4,[%a12]12
80001fd0:	99 c4 08 00 	ld.a %a4,[%a12]8
80001fd4:	6d ff a8 fd 	call 80001b24 <IfxPort_setPinPadDriver>
    node->NPCR.B.RXSEL = rxd->select;
80001fd8:	19 c3 10 00 	ld.w %d3,[%a12]16
80001fdc:	d9 d2 00 10 	lea %a2,[%a13]64
80001fe0:	19 d2 00 10 	ld.w %d2,[%a13]64
80001fe4:	37 32 03 20 	insert %d2,%d2,%d3,0,3
80001fe8:	74 22       	st.w [%a2],%d2

    return TRUE;
}
80001fea:	82 12       	mov %d2,1
80001fec:	00 90       	ret 

80001fee <IfxCan_Node_initTxPin>:


boolean IfxCan_Node_initTxPin(IfxCan_Txd_Out *txd, IfxPort_OutputMode mode, IfxPort_PadDriver padDriver)
{
80001fee:	40 ae       	mov.aa %a14,%sp
80001ff0:	40 4c       	mov.aa %a12,%a4
80001ff2:	02 58       	mov %d8,%d5
    IfxPort_setPinModeOutput(txd->pin.port, txd->pin.pinIndex, mode, txd->select);
80001ff4:	19 45 10 00 	ld.w %d5,[%a4]16
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
80001ff8:	a6 45       	or %d5,%d4
80001ffa:	39 44 0c 00 	ld.bu %d4,[%a4]12
80001ffe:	99 44 08 00 	ld.a %a4,[%a4]8
80002002:	6d ff 54 fd 	call 80001aaa <IfxPort_setPinMode>
    IfxPort_setPinPadDriver(txd->pin.port, txd->pin.pinIndex, padDriver);
80002006:	02 85       	mov %d5,%d8
80002008:	39 c4 0c 00 	ld.bu %d4,[%a12]12
8000200c:	99 c4 08 00 	ld.a %a4,[%a12]8
80002010:	6d ff 8a fd 	call 80001b24 <IfxPort_setPinPadDriver>

    return TRUE;
}
80002014:	82 12       	mov %d2,1
80002016:	00 90       	ret 

80002018 <IfxCan_Node_readData>:
    }
}


void IfxCan_Node_readData(Ifx_CAN_RXMSG *rxBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
{
80002018:	40 ae       	mov.aa %a14,%sp
8000201a:	80 49       	mov.d %d9,%a4
8000201c:	80 58       	mov.d %d8,%a5
    uint32  i;
    uint32 *destinationAddress = (uint32 *)rxBufferElement + 2;
    /* get number of data bytes from data length code (DLC) */
    uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
8000201e:	6d ff 01 ff 	call 80001e20 <IfxCan_Node_getDataLength>

    /* read data from the data section of Rx Buffer element  */
    for (i = 0; i < length; i++)
80002022:	82 03       	mov %d3,0
80002024:	1d 00 0e 00 	j 80002040 <IfxCan_Node_readData+0x28>
    {
        data[i] = destinationAddress[i];
80002028:	8f 23 00 40 	sh %d4,%d3,2
8000202c:	60 82       	mov.a %a2,%d8
8000202e:	01 24 00 36 	addsc.a %a3,%a2,%d4,0
80002032:	60 92       	mov.a %a2,%d9
80002034:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80002038:	19 24 08 00 	ld.w %d4,[%a2]8
8000203c:	74 34       	st.w [%a3],%d4
    for (i = 0; i < length; i++)
8000203e:	c2 13       	add %d3,1
80002040:	3f 23 f4 ff 	jlt.u %d3,%d2,80002028 <IfxCan_Node_readData+0x10>
    }
}
80002044:	00 90       	ret 

80002046 <IfxCan_Node_setBitTiming>:


void IfxCan_Node_setBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
{
80002046:	40 ae       	mov.aa %a14,%sp
     * TSeg1 >= Tsjw + Tprop
     * TSeg2 >= Tsjw
     */

    /* search for best baudrate */
    bestError = (float32)baudrate;
80002048:	4b 05 61 51 	utof %d5,%d5
8000204c:	02 59       	mov %d9,%d5
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
8000204e:	3b 80 00 80 	mov %d8,8
80002052:	82 1a       	mov %d10,1
    maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;

    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
80002054:	02 a0       	mov %d0,%d10
80002056:	1d 00 0a 00 	j 8000206a <IfxCan_Node_setBitTiming+0x24>
        {
            break; /* to avoid division by 0 */
        }

        float32 tempBaudrate = Fquanta / tempTBAUD;
        float32 error        = __absf(tempBaudrate - baudrate);
8000205a:	9b 03 00 38 	addih %d3,%d3,32768
8000205e:	1d 00 1f 00 	j 8000209c <IfxCan_Node_setBitTiming+0x56>

        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
        {
            bestBRP   = tempBRP;
            bestTBAUD = tempTBAUD;
            bestError = error;
80002062:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
80002064:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002066:	02 0a       	mov %d10,%d0
    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
80002068:	c2 10       	add %d0,1
8000206a:	3b 10 20 30 	mov %d3,513
8000206e:	7f 30 38 00 	jge %d0,%d3,800020de <IfxCan_Node_setBitTiming+0x98>
        float32 Fquanta = moduleFreq / tempBRP;
80002072:	4b 00 41 31 	itof %d3,%d0
80002076:	4b 34 51 30 	div.f %d3,%d4,%d3
        tempTBAUD = Fquanta / baudrate;
8000207a:	4b 53 51 20 	div.f %d2,%d3,%d5
8000207e:	4b 02 31 21 	ftoiz %d2,%d2
        if (tempTBAUD == 0)
80002082:	df 02 2e 00 	jeq %d2,0,800020de <IfxCan_Node_setBitTiming+0x98>
        float32 tempBaudrate = Fquanta / tempTBAUD;
80002086:	4b 02 41 11 	itof %d1,%d2
8000208a:	4b 13 51 30 	div.f %d3,%d3,%d1
        float32 error        = __absf(tempBaudrate - baudrate);
8000208e:	6b 05 31 33 	sub.f %d3,%d3,%d5
80002092:	82 01       	mov %d1,0
80002094:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002098:	6f 01 e1 ff 	jnz.t %d1,0,8000205a <IfxCan_Node_setBitTiming+0x14>
        if (tempTBAUD < minTBAUD)
8000209c:	8b 82 40 12 	lt %d1,%d2,8
800020a0:	df 01 1f 80 	jne %d1,0,800020de <IfxCan_Node_setBitTiming+0x98>
        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
800020a4:	3b 20 18 10 	mov %d1,386
800020a8:	7f 12 e0 7f 	jge %d2,%d1,80002068 <IfxCan_Node_setBitTiming+0x22>
800020ac:	4b 39 01 10 	cmp.f %d1,%d9,%d3
800020b0:	87 11 a2 10 	or.t %d1,%d1,2,%d1,1
800020b4:	df 01 da 7f 	jeq %d1,0,80002068 <IfxCan_Node_setBitTiming+0x22>

            if ((tempTBAUD <= 20) && (error < 0.1f))
800020b8:	8b 52 81 12 	ge %d1,%d2,21
800020bc:	df 01 d3 ff 	jne %d1,0,80002062 <IfxCan_Node_setBitTiming+0x1c>
800020c0:	7b d0 dc 13 	movh %d1,15821
800020c4:	1b d1 cc 1c 	addi %d1,%d1,-13107
800020c8:	4b 13 01 10 	cmp.f %d1,%d3,%d1
800020cc:	6f 01 07 80 	jnz.t %d1,0,800020da <IfxCan_Node_setBitTiming+0x94>
            bestError = error;
800020d0:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
800020d2:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
800020d4:	02 0a       	mov %d10,%d0
800020d6:	1d ff c9 ff 	j 80002068 <IfxCan_Node_setBitTiming+0x22>
            bestTBAUD = tempTBAUD;
800020da:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
800020dc:	02 0a       	mov %d10,%d0
                break;      /* optimal condition */
            }
        }
    }

    if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
800020de:	df 0a 06 80 	jne %d10,0,800020ea <IfxCan_Node_setBitTiming+0xa4>
800020e2:	3b 10 20 30 	mov %d3,513
800020e6:	5f 30 1b 00 	jeq %d0,%d3,8000211c <IfxCan_Node_setBitTiming+0xd6>
        bestTBAUD = maxTBAUD;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
800020ea:	8b 0a 00 32 	eq %d3,%d10,0
800020ee:	8b 82 40 22 	lt %d2,%d2,8
800020f2:	26 32       	and %d2,%d3
800020f4:	df 02 05 00 	jeq %d2,0,800020fe <IfxCan_Node_setBitTiming+0xb8>
    {
        bestBRP   = minBRP;
        bestTBAUD = minTBAUD;
800020f8:	3b 80 00 80 	mov %d8,8
        bestBRP   = minBRP;
800020fc:	82 1a       	mov %d10,1

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best sample point */
    bestError = samplePoint * 0.25f; /* 25% tolerance in sample point as max error */
800020fe:	02 61       	mov %d1,%d6
80002100:	4b 06 41 21 	itof %d2,%d6
80002104:	7b 00 e8 53 	movh %d5,16000
80002108:	4b 52 41 50 	mul.f %d5,%d2,%d5

    if (bestTBAUD < maxTSEG1)
8000210c:	3b 00 10 20 	mov %d2,256
80002110:	3f 28 0c 00 	jlt %d8,%d2,80002128 <IfxCan_Node_setBitTiming+0xe2>
    sint32  maxTSEG1 = IFX_CAN_N_NBTP_NTSEG1_MSK + 1;
80002114:	02 24       	mov %d4,%d2
    {
        maxTSEG1 = bestTBAUD;
    }

    bestTSEG1 = maxTSEG1;
80002116:	02 49       	mov %d9,%d4

    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
80002118:	1d 00 0e 00 	j 80002134 <IfxCan_Node_setBitTiming+0xee>
        bestTBAUD = maxTBAUD;
8000211c:	3b 10 18 80 	mov %d8,385
        bestBRP   = maxBRP;
80002120:	3b 00 20 a0 	mov %d10,512
80002124:	1d ff e3 ff 	j 800020ea <IfxCan_Node_setBitTiming+0xa4>
        maxTSEG1 = bestTBAUD;
80002128:	02 84       	mov %d4,%d8
8000212a:	1d ff f6 ff 	j 80002116 <IfxCan_Node_setBitTiming+0xd0>
        {
            bestTSEG1 = tempTSEG1;
            bestError = (float)error;
        }

        if (tempSamplePoint < samplePoint)
8000212e:	3f 10 18 00 	jlt %d0,%d1,8000215e <IfxCan_Node_setBitTiming+0x118>
    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
80002132:	c2 f4       	add %d4,-1
80002134:	bf 34 15 00 	jlt %d4,3,8000215e <IfxCan_Node_setBitTiming+0x118>
        sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
80002138:	3b 00 71 22 	mov %d2,10000
8000213c:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
80002140:	4b 82 01 22 	div %e2,%d2,%d8
80002144:	02 20       	mov %d0,%d2
        sint32 error           = __abs(tempSamplePoint - samplePoint);
80002146:	0b 62 e0 20 	absdif %d2,%d2,%d6
        if (bestError > error)
8000214a:	4b 02 41 21 	itof %d2,%d2
8000214e:	4b 52 01 30 	cmp.f %d3,%d2,%d5
80002152:	6f 03 ee 7f 	jz.t %d3,0,8000212e <IfxCan_Node_setBitTiming+0xe8>
            bestError = (float)error;
80002156:	02 25       	mov %d5,%d2
            bestTSEG1 = tempTSEG1;
80002158:	02 49       	mov %d9,%d4
8000215a:	1d ff ea ff 	j 8000212e <IfxCan_Node_setBitTiming+0xe8>
            /*least possible error */
            break;  /* least possible error has already occured */
        }
    }

    bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
8000215e:	0b 98 80 20 	sub %d2,%d8,%d9
80002162:	1b f2 ff 5f 	addi %d5,%d2,-1

    if (bestTSEG2 > maxTSEG2)
80002166:	8b 15 88 22 	ge %d2,%d5,129
8000216a:	df 02 07 80 	jne %d2,0,80002178 <IfxCan_Node_setBitTiming+0x132>
        bestTSEG2 = maxTSEG2;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if (bestTSEG2 < minTSEG2)
8000216e:	ff 25 07 00 	jge %d5,2,8000217c <IfxCan_Node_setBitTiming+0x136>
    {
        bestTSEG2 = minTSEG2;
80002172:	82 25       	mov %d5,2
80002174:	1d 00 04 00 	j 8000217c <IfxCan_Node_setBitTiming+0x136>
        bestTSEG2 = maxTSEG2;
80002178:	3b 00 08 50 	mov %d5,128

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best SJW */
    bestError = 10000;
8000217c:	7b c0 61 64 	movh %d6,17948
80002180:	1b 06 00 64 	addi %d6,%d6,16384
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
80002184:	82 10       	mov %d0,1

    for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
80002186:	02 04       	mov %d4,%d0
80002188:	1d 00 03 00 	j 8000218e <IfxCan_Node_setBitTiming+0x148>
8000218c:	c2 14       	add %d4,1
8000218e:	3f 45 13 00 	jlt %d5,%d4,800021b4 <IfxCan_Node_setBitTiming+0x16e>
    {
        sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
80002192:	3b 00 71 22 	mov %d2,10000
80002196:	e2 42       	mul %d2,%d4
80002198:	4b 82 01 22 	div %e2,%d2,%d8
        sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
8000219c:	0b 72 e0 20 	absdif %d2,%d2,%d7

        if (bestError > error)
800021a0:	4b 02 41 21 	itof %d2,%d2
800021a4:	4b 62 01 30 	cmp.f %d3,%d2,%d6
800021a8:	6f 03 f2 7f 	jz.t %d3,0,8000218c <IfxCan_Node_setBitTiming+0x146>
        {
            bestSJW   = tempSJW;
            bestError = (float)error;
800021ac:	02 26       	mov %d6,%d2
            bestSJW   = tempSJW;
800021ae:	02 40       	mov %d0,%d4
800021b0:	1d ff ee ff 	j 8000218c <IfxCan_Node_setBitTiming+0x146>
        }
    }

    {
        node->NBTP.B.NBRP   = bestBRP - 1;
800021b4:	c2 fa       	add %d10,-1
800021b6:	d9 42 1c 40 	lea %a2,[%a4]284
800021ba:	19 42 1c 40 	ld.w %d2,[%a4]284
800021be:	37 a2 09 28 	insert %d2,%d2,%d10,16,9
800021c2:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NSJW   = bestSJW - 1;
800021c4:	c2 f0       	add %d0,-1
800021c6:	54 22       	ld.w %d2,[%a2]
800021c8:	37 02 87 2c 	insert %d2,%d2,%d0,25,7
800021cc:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NTSEG1 = bestTSEG1 - 1;
800021ce:	c2 f9       	add %d9,-1
800021d0:	54 22       	ld.w %d2,[%a2]
800021d2:	37 92 08 24 	insert %d2,%d2,%d9,8,8
800021d6:	74 22       	st.w [%a2],%d2
        node->NBTP.B.NTSEG2 = bestTSEG2 - 1;
800021d8:	c2 f5       	add %d5,-1
800021da:	54 22       	ld.w %d2,[%a2]
800021dc:	37 52 07 20 	insert %d2,%d2,%d5,0,7
800021e0:	74 22       	st.w [%a2],%d2
    }
}
800021e2:	00 90       	ret 

800021e4 <IfxCan_Node_setBitTimingValues>:


void IfxCan_Node_setBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
{
800021e4:	40 ae       	mov.aa %a14,%sp
    Ifx_CAN_N_NBTP nbtp;
    nbtp.U        = node->NBTP.U;
800021e6:	d9 42 1c 40 	lea %a2,[%a4]284
800021ea:	19 42 1c 40 	ld.w %d2,[%a4]284
    nbtp.B.NSJW   = syncJumpWidth;
800021ee:	37 42 87 2c 	insert %d2,%d2,%d4,25,7
    nbtp.B.NTSEG1 = timeSegment1;
800021f2:	37 62 08 24 	insert %d2,%d2,%d6,8,8
    nbtp.B.NTSEG2 = timeSegment2;
800021f6:	37 52 07 20 	insert %d2,%d2,%d5,0,7
    nbtp.B.NBRP   = prescaler;
800021fa:	37 72 09 28 	insert %d2,%d2,%d7,16,9

    node->NBTP.U  = nbtp.U;
800021fe:	74 22       	st.w [%a2],%d2
}
80002200:	00 90       	ret 

80002202 <IfxCan_Node_setFastBitTiming>:


void IfxCan_Node_setFastBitTiming(Ifx_CAN_N *node, float32 moduleFreq, uint32 baudrate, uint16 samplePoint, uint16 syncJumpWidth)
{
80002202:	40 ae       	mov.aa %a14,%sp
     * TSeg1 >= Tsjw + Tprop
     * TSeg2 >= Tsjw
     */

    /* search for best baudrate */
    bestError = (float32)baudrate;
80002204:	4b 05 61 51 	utof %d5,%d5
80002208:	02 59       	mov %d9,%d5
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
8000220a:	3b 80 00 80 	mov %d8,8
8000220e:	82 1a       	mov %d10,1
    maxTBAUD  = maxTSEG1 + maxTSEG2 + 1;

    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
80002210:	02 a0       	mov %d0,%d10
80002212:	1d 00 0a 00 	j 80002226 <IfxCan_Node_setFastBitTiming+0x24>
        {
            break; /* to avoid division by 0 */
        }

        float32 tempBaudrate = Fquanta / tempTBAUD;
        float32 error        = __absf(tempBaudrate - baudrate);
80002216:	9b 03 00 38 	addih %d3,%d3,32768
8000221a:	1d 00 1f 00 	j 80002258 <IfxCan_Node_setFastBitTiming+0x56>

        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
        {
            bestBRP   = tempBRP;
            bestTBAUD = tempTBAUD;
            bestError = error;
8000221e:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
80002220:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002222:	02 0a       	mov %d10,%d0
    for (tempBRP = 1; tempBRP <= maxBRP; tempBRP++)
80002224:	c2 10       	add %d0,1
80002226:	8b 10 42 32 	lt %d3,%d0,33
8000222a:	df 03 38 00 	jeq %d3,0,8000229a <IfxCan_Node_setFastBitTiming+0x98>
        float32 Fquanta = moduleFreq / tempBRP;
8000222e:	4b 00 41 31 	itof %d3,%d0
80002232:	4b 34 51 30 	div.f %d3,%d4,%d3
        tempTBAUD = Fquanta / baudrate;
80002236:	4b 53 51 20 	div.f %d2,%d3,%d5
8000223a:	4b 02 31 21 	ftoiz %d2,%d2
        if (tempTBAUD == 0)
8000223e:	df 02 2e 00 	jeq %d2,0,8000229a <IfxCan_Node_setFastBitTiming+0x98>
        float32 tempBaudrate = Fquanta / tempTBAUD;
80002242:	4b 02 41 11 	itof %d1,%d2
80002246:	4b 13 51 30 	div.f %d3,%d3,%d1
        float32 error        = __absf(tempBaudrate - baudrate);
8000224a:	6b 05 31 33 	sub.f %d3,%d3,%d5
8000224e:	82 01       	mov %d1,0
80002250:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002254:	6f 01 e1 ff 	jnz.t %d1,0,80002216 <IfxCan_Node_setFastBitTiming+0x14>
        if (tempTBAUD < minTBAUD)
80002258:	8b 82 40 12 	lt %d1,%d2,8
8000225c:	df 01 1f 80 	jne %d1,0,8000229a <IfxCan_Node_setFastBitTiming+0x98>
        if ((tempTBAUD <= maxTBAUD) && (bestError >= error))
80002260:	8b 22 83 12 	ge %d1,%d2,50
80002264:	df 01 e0 ff 	jne %d1,0,80002224 <IfxCan_Node_setFastBitTiming+0x22>
80002268:	4b 39 01 10 	cmp.f %d1,%d9,%d3
8000226c:	87 11 a2 10 	or.t %d1,%d1,2,%d1,1
80002270:	df 01 da 7f 	jeq %d1,0,80002224 <IfxCan_Node_setFastBitTiming+0x22>

            if ((tempTBAUD <= 20) && (error < 0.1f))
80002274:	8b 52 81 12 	ge %d1,%d2,21
80002278:	df 01 d3 ff 	jne %d1,0,8000221e <IfxCan_Node_setFastBitTiming+0x1c>
8000227c:	7b d0 dc 13 	movh %d1,15821
80002280:	1b d1 cc 1c 	addi %d1,%d1,-13107
80002284:	4b 13 01 10 	cmp.f %d1,%d3,%d1
80002288:	6f 01 07 80 	jnz.t %d1,0,80002296 <IfxCan_Node_setFastBitTiming+0x94>
            bestError = error;
8000228c:	02 39       	mov %d9,%d3
            bestTBAUD = tempTBAUD;
8000228e:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002290:	02 0a       	mov %d10,%d0
80002292:	1d ff c9 ff 	j 80002224 <IfxCan_Node_setFastBitTiming+0x22>
            bestTBAUD = tempTBAUD;
80002296:	02 28       	mov %d8,%d2
            bestBRP   = tempBRP;
80002298:	02 0a       	mov %d10,%d0
                break;      /* optimal condition */
            }
        }
    }

    if ((bestBRP == 0) && (tempBRP == (maxBRP + 1)))
8000229a:	df 0a 06 80 	jne %d10,0,800022a6 <IfxCan_Node_setFastBitTiming+0xa4>
8000229e:	8b 10 02 02 	eq %d0,%d0,33
800022a2:	df 00 1c 80 	jne %d0,0,800022da <IfxCan_Node_setFastBitTiming+0xd8>
        bestTBAUD = maxTBAUD;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if ((bestBRP == 0) && (tempTBAUD < minTBAUD))
800022a6:	8b 0a 00 32 	eq %d3,%d10,0
800022aa:	8b 82 40 22 	lt %d2,%d2,8
800022ae:	26 32       	and %d2,%d3
800022b0:	df 02 05 00 	jeq %d2,0,800022ba <IfxCan_Node_setFastBitTiming+0xb8>
    {
        bestBRP   = minBRP;
        bestTBAUD = minTBAUD;
800022b4:	3b 80 00 80 	mov %d8,8
        bestBRP   = minBRP;
800022b8:	82 1a       	mov %d10,1

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best sample point */
    bestError = samplePoint * 0.25f; /* 25% tolerance in sample point as max error */
800022ba:	02 61       	mov %d1,%d6
800022bc:	4b 06 41 21 	itof %d2,%d6
800022c0:	7b 00 e8 53 	movh %d5,16000
800022c4:	4b 52 41 50 	mul.f %d5,%d2,%d5

    if (bestTBAUD < maxTSEG1)
800022c8:	8b 08 42 22 	lt %d2,%d8,32
800022cc:	df 02 0d 80 	jne %d2,0,800022e6 <IfxCan_Node_setFastBitTiming+0xe4>
    sint32  maxTSEG1 = IFX_CAN_N_DBTP_DTSEG1_MSK + 1;
800022d0:	3b 00 02 40 	mov %d4,32
    {
        maxTSEG1 = bestTBAUD;
    }

    bestTSEG1 = maxTSEG1;
800022d4:	02 49       	mov %d9,%d4

    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
800022d6:	1d 00 0e 00 	j 800022f2 <IfxCan_Node_setFastBitTiming+0xf0>
        bestTBAUD = maxTBAUD;
800022da:	3b 10 03 80 	mov %d8,49
        bestBRP   = maxBRP;
800022de:	3b 00 02 a0 	mov %d10,32
800022e2:	1d ff e2 ff 	j 800022a6 <IfxCan_Node_setFastBitTiming+0xa4>
        maxTSEG1 = bestTBAUD;
800022e6:	02 84       	mov %d4,%d8
800022e8:	1d ff f6 ff 	j 800022d4 <IfxCan_Node_setFastBitTiming+0xd2>
        {
            bestTSEG1 = tempTSEG1;
            bestError = (float)error;
        }

        if (tempSamplePoint < samplePoint)
800022ec:	3f 10 18 00 	jlt %d0,%d1,8000231c <IfxCan_Node_setFastBitTiming+0x11a>
    for (tempTSEG1 = maxTSEG1; tempTSEG1 >= minTSEG1; tempTSEG1--)
800022f0:	c2 f4       	add %d4,-1
800022f2:	bf 34 15 00 	jlt %d4,3,8000231c <IfxCan_Node_setFastBitTiming+0x11a>
        sint32 tempSamplePoint = ((tempTSEG1 + 1) * 10000) / bestTBAUD;
800022f6:	3b 00 71 22 	mov %d2,10000
800022fa:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
800022fe:	4b 82 01 22 	div %e2,%d2,%d8
80002302:	02 20       	mov %d0,%d2
        sint32 error           = __abs(tempSamplePoint - samplePoint);
80002304:	0b 62 e0 20 	absdif %d2,%d2,%d6
        if (bestError > error)
80002308:	4b 02 41 21 	itof %d2,%d2
8000230c:	4b 52 01 30 	cmp.f %d3,%d2,%d5
80002310:	6f 03 ee 7f 	jz.t %d3,0,800022ec <IfxCan_Node_setFastBitTiming+0xea>
            bestError = (float)error;
80002314:	02 25       	mov %d5,%d2
            bestTSEG1 = tempTSEG1;
80002316:	02 49       	mov %d9,%d4
80002318:	1d ff ea ff 	j 800022ec <IfxCan_Node_setFastBitTiming+0xea>
        {
            break;  /* least possible error has already occured */
        }
    }

    bestTSEG2 = bestTBAUD - bestTSEG1 - 1;
8000231c:	0b 98 80 20 	sub %d2,%d8,%d9
80002320:	1b f2 ff 5f 	addi %d5,%d2,-1

    if (bestTSEG2 > maxTSEG2)
80002324:	8b 15 81 22 	ge %d2,%d5,17
80002328:	df 02 07 80 	jne %d2,0,80002336 <IfxCan_Node_setFastBitTiming+0x134>
        bestTSEG2 = maxTSEG2;

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    if (bestTSEG2 < minTSEG2)
8000232c:	ff 25 07 00 	jge %d5,2,8000233a <IfxCan_Node_setFastBitTiming+0x138>
    {
        bestTSEG2 = minTSEG2;
80002330:	82 25       	mov %d5,2
80002332:	1d 00 04 00 	j 8000233a <IfxCan_Node_setFastBitTiming+0x138>
        bestTSEG2 = maxTSEG2;
80002336:	3b 00 01 50 	mov %d5,16

        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
    }

    /* search for best SJW */
    bestError = 10000;
8000233a:	7b c0 61 64 	movh %d6,17948
8000233e:	1b 06 00 64 	addi %d6,%d6,16384
    sint32  bestBRP   = 1, bestSJW = 1, bestTBAUD = 8, bestTSEG1 = 3, bestTSEG2 = 2;
80002342:	82 10       	mov %d0,1

    for (tempSJW = 1; tempSJW <= bestTSEG2; tempSJW++)
80002344:	02 04       	mov %d4,%d0
80002346:	1d 00 03 00 	j 8000234c <IfxCan_Node_setFastBitTiming+0x14a>
8000234a:	c2 14       	add %d4,1
8000234c:	3f 45 13 00 	jlt %d5,%d4,80002372 <IfxCan_Node_setFastBitTiming+0x170>
    {
        sint32 tempSyncJumpWidth = (tempSJW * 10000) / bestTBAUD;
80002350:	3b 00 71 22 	mov %d2,10000
80002354:	e2 42       	mul %d2,%d4
80002356:	4b 82 01 22 	div %e2,%d2,%d8
        sint32 error             = __abs(tempSyncJumpWidth - syncJumpWidth);
8000235a:	0b 72 e0 20 	absdif %d2,%d2,%d7

        if (bestError > error)
8000235e:	4b 02 41 21 	itof %d2,%d2
80002362:	4b 62 01 30 	cmp.f %d3,%d2,%d6
80002366:	6f 03 f2 7f 	jz.t %d3,0,8000234a <IfxCan_Node_setFastBitTiming+0x148>
        {
            bestSJW   = tempSJW;
            bestError = (float)error;
8000236a:	02 26       	mov %d6,%d2
            bestSJW   = tempSJW;
8000236c:	02 40       	mov %d0,%d4
8000236e:	1d ff ee ff 	j 8000234a <IfxCan_Node_setFastBitTiming+0x148>
        }
    }

    {
        node->DBTP.B.DBRP   = bestBRP - 1;
80002372:	c2 fa       	add %d10,-1
80002374:	d9 42 0c 40 	lea %a2,[%a4]268
80002378:	19 42 0c 40 	ld.w %d2,[%a4]268
8000237c:	37 a2 05 28 	insert %d2,%d2,%d10,16,5
80002380:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DSJW   = bestSJW - 1;
80002382:	c2 f0       	add %d0,-1
80002384:	54 22       	ld.w %d2,[%a2]
80002386:	37 02 04 20 	insert %d2,%d2,%d0,0,4
8000238a:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DTSEG1 = bestTSEG1 - 1;
8000238c:	c2 f9       	add %d9,-1
8000238e:	54 22       	ld.w %d2,[%a2]
80002390:	37 92 05 24 	insert %d2,%d2,%d9,8,5
80002394:	74 22       	st.w [%a2],%d2
        node->DBTP.B.DTSEG2 = bestTSEG2 - 1;
80002396:	c2 f5       	add %d5,-1
80002398:	54 22       	ld.w %d2,[%a2]
8000239a:	37 52 04 22 	insert %d2,%d2,%d5,4,4
8000239e:	74 22       	st.w [%a2],%d2
    }
}
800023a0:	00 90       	ret 

800023a2 <IfxCan_Node_setFastBitTimingValues>:


void IfxCan_Node_setFastBitTimingValues(Ifx_CAN_N *node, uint16 syncJumpWidth, uint8 timeSegment2, uint8 timeSegment1, uint16 prescaler)
{
800023a2:	40 ae       	mov.aa %a14,%sp
    Ifx_CAN_N_DBTP dbtp;
    dbtp.U        = node->DBTP.U;
800023a4:	d9 42 0c 40 	lea %a2,[%a4]268
800023a8:	19 42 0c 40 	ld.w %d2,[%a4]268
    dbtp.B.DSJW   = syncJumpWidth;
800023ac:	37 42 04 20 	insert %d2,%d2,%d4,0,4
    dbtp.B.DTSEG1 = timeSegment1;
800023b0:	37 62 05 24 	insert %d2,%d2,%d6,8,5
    dbtp.B.DTSEG2 = timeSegment2;
800023b4:	37 52 04 22 	insert %d2,%d2,%d5,4,4
    dbtp.B.DBRP   = prescaler;
800023b8:	37 72 05 28 	insert %d2,%d2,%d7,16,5

    node->DBTP.U  = dbtp.U;
800023bc:	74 22       	st.w [%a2],%d2
}
800023be:	00 90       	ret 

800023c0 <IfxCan_Node_setFrameMode>:


void IfxCan_Node_setFrameMode(Ifx_CAN_N *node, IfxCan_FrameMode frameMode)
{
800023c0:	40 ae       	mov.aa %a14,%sp
    switch (frameMode)
800023c2:	df 14 13 00 	jeq %d4,1,800023e8 <IfxCan_Node_setFrameMode+0x28>
800023c6:	df 24 1d 00 	jeq %d4,2,80002400 <IfxCan_Node_setFrameMode+0x40>
800023ca:	df 04 03 00 	jeq %d4,0,800023d0 <IfxCan_Node_setFrameMode+0x10>
    case IfxCan_FrameMode_fdLongAndFast:
        node->CCCR.B.FDOE = 1;
        node->CCCR.B.BRSE = 1;
        break;
    }
}
800023ce:	00 90       	ret 
        node->CCCR.B.FDOE = 0;
800023d0:	d9 42 18 40 	lea %a2,[%a4]280
800023d4:	19 42 18 40 	ld.w %d2,[%a4]280
800023d8:	8f 02 d0 21 	andn %d2,%d2,256
800023dc:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 0;
800023de:	54 22       	ld.w %d2,[%a2]
800023e0:	b7 02 81 24 	insert %d2,%d2,0,9,1
800023e4:	74 22       	st.w [%a2],%d2
        break;
800023e6:	00 90       	ret 
        node->CCCR.B.FDOE = 1;
800023e8:	d9 42 18 40 	lea %a2,[%a4]280
800023ec:	19 42 18 40 	ld.w %d2,[%a4]280
800023f0:	b7 12 01 24 	insert %d2,%d2,1,8,1
800023f4:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 0;
800023f6:	54 22       	ld.w %d2,[%a2]
800023f8:	b7 02 81 24 	insert %d2,%d2,0,9,1
800023fc:	74 22       	st.w [%a2],%d2
        break;
800023fe:	00 90       	ret 
        node->CCCR.B.FDOE = 1;
80002400:	d9 42 18 40 	lea %a2,[%a4]280
80002404:	19 42 18 40 	ld.w %d2,[%a4]280
80002408:	b7 12 01 24 	insert %d2,%d2,1,8,1
8000240c:	74 22       	st.w [%a2],%d2
        node->CCCR.B.BRSE = 1;
8000240e:	54 22       	ld.w %d2,[%a2]
80002410:	b7 12 81 24 	insert %d2,%d2,1,9,1
80002414:	74 22       	st.w [%a2],%d2
}
80002416:	1d ff dc ff 	j 800023ce <IfxCan_Node_setFrameMode+0xe>

8000241a <IfxCan_Node_setFrameModeReq>:


void IfxCan_Node_setFrameModeReq(Ifx_CAN_TXMSG *txBufferElement, IfxCan_FrameMode frameMode)
{
8000241a:	40 ae       	mov.aa %a14,%sp
    switch (frameMode)
8000241c:	df 14 13 00 	jeq %d4,1,80002442 <IfxCan_Node_setFrameModeReq+0x28>
80002420:	df 24 1d 00 	jeq %d4,2,8000245a <IfxCan_Node_setFrameModeReq+0x40>
80002424:	df 04 03 00 	jeq %d4,0,8000242a <IfxCan_Node_setFrameModeReq+0x10>
    case IfxCan_FrameMode_fdLongAndFast:
        txBufferElement->T1.B.FDF = 1;
        txBufferElement->T1.B.BRS = 1;
        break;
    }
}
80002428:	00 90       	ret 
        txBufferElement->T1.B.FDF = 0;
8000242a:	d9 42 04 00 	lea %a2,[%a4]4
8000242e:	19 42 04 00 	ld.w %d2,[%a4]4
80002432:	b7 02 81 2a 	insert %d2,%d2,0,21,1
80002436:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 0;
80002438:	54 22       	ld.w %d2,[%a2]
8000243a:	b7 02 01 2a 	insert %d2,%d2,0,20,1
8000243e:	74 22       	st.w [%a2],%d2
        break;
80002440:	00 90       	ret 
        txBufferElement->T1.B.FDF = 1;
80002442:	d9 42 04 00 	lea %a2,[%a4]4
80002446:	19 42 04 00 	ld.w %d2,[%a4]4
8000244a:	b7 12 81 2a 	insert %d2,%d2,1,21,1
8000244e:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 0;
80002450:	54 22       	ld.w %d2,[%a2]
80002452:	b7 02 01 2a 	insert %d2,%d2,0,20,1
80002456:	74 22       	st.w [%a2],%d2
        break;
80002458:	00 90       	ret 
        txBufferElement->T1.B.FDF = 1;
8000245a:	d9 42 04 00 	lea %a2,[%a4]4
8000245e:	19 42 04 00 	ld.w %d2,[%a4]4
80002462:	b7 12 81 2a 	insert %d2,%d2,1,21,1
80002466:	74 22       	st.w [%a2],%d2
        txBufferElement->T1.B.BRS = 1;
80002468:	54 22       	ld.w %d2,[%a2]
8000246a:	b7 12 01 2a 	insert %d2,%d2,1,20,1
8000246e:	74 22       	st.w [%a2],%d2
}
80002470:	1d ff dc ff 	j 80002428 <IfxCan_Node_setFrameModeReq+0xe>

80002474 <IfxCan_Node_setGroupInterruptLine>:
    }
}


void IfxCan_Node_setGroupInterruptLine(Ifx_CAN_N *node, IfxCan_InterruptGroup interruptGroup, IfxCan_InterruptLine interruptLine)
{
80002474:	40 ae       	mov.aa %a14,%sp
80002476:	02 52       	mov %d2,%d5
    if (interruptGroup <= IfxCan_InterruptGroup_loi)
80002478:	ff 84 0c 80 	jge.u %d4,8,80002490 <IfxCan_Node_setGroupInterruptLine+0x1c>
    {
        node->GRINT1.U |= (interruptLine) << (interruptGroup * 4);
8000247c:	d9 42 14 00 	lea %a2,[%a4]20
80002480:	19 45 14 00 	ld.w %d5,[%a4]20
80002484:	06 24       	sh %d4,2
80002486:	0f 42 00 20 	sh %d2,%d2,%d4
8000248a:	a6 52       	or %d2,%d5
8000248c:	74 22       	st.w [%a2],%d2
8000248e:	00 90       	ret 
    }
    else
    {
        node->GRINT2.U |= (interruptLine) << ((interruptGroup % 8) * 4);
80002490:	d9 42 18 00 	lea %a2,[%a4]24
80002494:	19 45 18 00 	ld.w %d5,[%a4]24
80002498:	8f 74 00 31 	and %d3,%d4,7
8000249c:	06 23       	sh %d3,2
8000249e:	0f 32 00 20 	sh %d2,%d2,%d3
800024a2:	a6 52       	or %d2,%d5
800024a4:	74 22       	st.w [%a2],%d2
    }
}
800024a6:	00 90       	ret 

800024a8 <IfxCan_Node_writeTxBufData>:
    }
}


void IfxCan_Node_writeTxBufData(Ifx_CAN_TXMSG *txBufferElement, IfxCan_DataLengthCode dataLengthCode, uint32 *data)
{
800024a8:	40 ae       	mov.aa %a14,%sp
800024aa:	80 49       	mov.d %d9,%a4
800024ac:	80 58       	mov.d %d8,%a5
    uint32  i;

    uint32 *destinationAddress = (uint32 *)txBufferElement + 2;
    /* get number of data bytes from data length code (DLC) */
    uint32  length             = IfxCan_Node_getDataLength(dataLengthCode);
800024ae:	6d ff b9 fc 	call 80001e20 <IfxCan_Node_getDataLength>

    /* write data into the data section of Tx Buffer element  */
    for (i = 0; i < length; i++)
800024b2:	82 03       	mov %d3,0
800024b4:	1d 00 0f 00 	j 800024d2 <IfxCan_Node_writeTxBufData+0x2a>
    {
        destinationAddress[i] = data[i];
800024b8:	8f 23 00 40 	sh %d4,%d3,2
800024bc:	1b 84 00 50 	addi %d5,%d4,8
800024c0:	60 92       	mov.a %a2,%d9
800024c2:	01 25 00 36 	addsc.a %a3,%a2,%d5,0
800024c6:	60 82       	mov.a %a2,%d8
800024c8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800024cc:	54 24       	ld.w %d4,[%a2]
800024ce:	74 34       	st.w [%a3],%d4
    for (i = 0; i < length; i++)
800024d0:	c2 13       	add %d3,1
800024d2:	3f 23 f3 ff 	jlt.u %d3,%d2,800024b8 <IfxCan_Node_writeTxBufData+0x10>
    }
}
800024d6:	00 90       	ret 

800024d8 <IfxCan_enableModule>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxCan_enableModule(Ifx_CAN *can)
{
800024d8:	40 ae       	mov.aa %a14,%sp
800024da:	80 48       	mov.d %d8,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800024dc:	6d ff 7d fa 	call 800019d6 <IfxScuWdt_getCpuWatchdogPassword>
800024e0:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800024e2:	02 24       	mov %d4,%d2
800024e4:	6d ff 9e f9 	call 80001820 <IfxScuWdt_clearCpuEndinit>

    /*Enable module, disregard Sleep Mode request */
    can->CLC.B.DISR = 0U;
800024e8:	bb 00 00 28 	mov.u %d2,32768
800024ec:	60 82       	mov.a %a2,%d8
800024ee:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800024f2:	54 23       	ld.w %d3,[%a2]
800024f4:	8f 13 c0 31 	andn %d3,%d3,1
800024f8:	74 23       	st.w [%a2],%d3
}


IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
{
    return can->CLC.B.DISS == 0;
800024fa:	bb 00 00 38 	mov.u %d3,32768
800024fe:	60 82       	mov.a %a2,%d8
80002500:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002504:	54 23       	ld.w %d3,[%a2]

    /*Wait until module is enabled*/
    while (IfxCan_isModuleEnabled(can) == FALSE)
80002506:	6f 13 fa ff 	jnz.t %d3,1,800024fa <IfxCan_enableModule+0x22>
    {}

    IfxScuWdt_setCpuEndinit(passwd);
8000250a:	02 94       	mov %d4,%d9
8000250c:	6d ff 82 fa 	call 80001a10 <IfxScuWdt_setCpuEndinit>
}
80002510:	00 90       	ret 

80002512 <IfxCan_getIndex>:
    return module;
}


IfxCan_Index IfxCan_getIndex(Ifx_CAN *can)
{
80002512:	40 ae       	mov.aa %a14,%sp
    uint32       index;
    IfxCan_Index result;

    result = IfxCan_Index_none;

    for (index = 0; index < IFXCAN_NUM_MODULES; index++)
80002514:	82 02       	mov %d2,0
80002516:	1d 00 03 00 	j 8000251c <IfxCan_getIndex+0xa>
8000251a:	c2 12       	add %d2,1
8000251c:	ff 32 18 80 	jge.u %d2,3,8000254c <IfxCan_getIndex+0x3a>
    {
        if (IfxCan_cfg_indexMap[index].module == can)
80002520:	8f 32 00 30 	sh %d3,%d2,3
80002524:	91 00 00 28 	movh.a %a2,32768
80002528:	d9 22 0c 90 	lea %a2,[%a2]588 <8000024c <IfxCan_cfg_indexMap>>
8000252c:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002530:	54 23       	ld.w %d3,[%a2]
80002532:	80 44       	mov.d %d4,%a4
80002534:	5f 43 f3 ff 	jne %d3,%d4,8000251a <IfxCan_getIndex+0x8>
        {
            result = (IfxCan_Index)IfxCan_cfg_indexMap[index].index;
80002538:	06 32       	sh %d2,3
8000253a:	91 00 00 28 	movh.a %a2,32768
8000253e:	d9 22 0c 90 	lea %a2,[%a2]588 <8000024c <IfxCan_cfg_indexMap>>
80002542:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002546:	19 22 04 00 	ld.w %d2,[%a2]4
            break;
8000254a:	00 90       	ret 
    result = IfxCan_Index_none;
8000254c:	82 f2       	mov %d2,-1
        }
    }

    return result;
}
8000254e:	00 90       	ret 

80002550 <IfxCan_getModuleFrequency>:


float32 IfxCan_getModuleFrequency(void)
{
80002550:	40 ae       	mov.aa %a14,%sp
    float32 moduleFreq = 0;

    moduleFreq = IfxScuCcu_getMcanFrequency();
80002552:	6d ff e7 f4 	call 80000f20 <IfxScuCcu_getMcanFrequency>

    return moduleFreq;
}
80002556:	00 90       	ret 

80002558 <IfxCan_getSrcPointer>:


volatile Ifx_SRC_SRCR *IfxCan_getSrcPointer(Ifx_CAN *can, IfxCan_InterruptLine interruptLine)
{
80002558:	40 ae       	mov.aa %a14,%sp
8000255a:	20 10       	sub.a %sp,16
8000255c:	02 4c       	mov %d12,%d4
    IfxCan_Index           canIndex                              = IfxCan_getIndex(can);
8000255e:	6d ff da ff 	call 80002512 <IfxCan_getIndex>
    Ifx_SRC_CAN_CAN *const srcCanBaseAddress[IFXCAN_NUM_MODULES] = {
80002562:	91 00 00 37 	movh.a %a3,28672
80002566:	d9 33 00 00 	lea %a3,[%a3]0 <70000000 <LCF_DSPR0_START>>
8000256a:	d9 e4 f4 ff 	lea %a4,[%a14]-12 <70000000 <LCF_DSPR0_START>>
8000256e:	09 38 48 01 	ld.d %e8,[%a3+]8 <70000008 <LCF_DSPR0_START+0x8>>
80002572:	89 48 48 01 	st.d [%a4+]8 <70000008 <LCF_DSPR0_START+0x8>>,%e8
80002576:	44 38       	ld.w %d8,[%a3+]
80002578:	64 48       	st.w [%a4+],%d8
        &MODULE_SRC.CAN.CAN[0],
        &MODULE_SRC.CAN.CAN[1],
        &MODULE_SRC.CAN.CAN[2],
    };
    return &(srcCanBaseAddress[canIndex]->INT[interruptLine]);
8000257a:	06 22       	sh %d2,2
8000257c:	01 e2 00 36 	addsc.a %a3,%a14,%d2,0
80002580:	99 32 f4 ff 	ld.a %a2,[%a3]-12
80002584:	06 2c       	sh %d12,2
}
80002586:	01 2c 00 26 	addsc.a %a2,%a2,%d12,0
8000258a:	00 90       	ret 

8000258c <IfxCan_setClockSource>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxCan_setClockSource(Ifx_CAN *can, IfxCan_ClockSelect clockSelect, IfxCan_ClockSource clockSource)
{
8000258c:	40 ae       	mov.aa %a14,%sp
8000258e:	80 43       	mov.d %d3,%a4
    Ifx_CAN_MCR mcr;

    /* enable CCCE and CI */
    mcr.U      = can->MCR.U;
80002590:	bb 00 03 28 	mov.u %d2,32816
80002594:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80002598:	54 22       	ld.w %d2,[%a2]
    mcr.B.CCCE = 1;
8000259a:	b7 12 81 2f 	insert %d2,%d2,1,31,1
    mcr.B.CI   = 1;
8000259e:	b7 12 01 2f 	insert %d2,%d2,1,30,1
    can->MCR.U = mcr.U;
800025a2:	74 22       	st.w [%a2],%d2

    /* select clock */
    switch (clockSelect)
800025a4:	ff 44 14 80 	jge.u %d4,4,800025cc <IfxCan_setClockSource+0x40>
800025a8:	91 00 00 28 	movh.a %a2,32768
800025ac:	d9 22 78 62 	lea %a2,[%a2]9656 <800025b8 <IfxCan_setClockSource+0x2c>>
800025b0:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
800025b4:	dc 02       	ji %a2
800025b6:	00 00       	nop 
800025b8:	1d 00 08 00 	j 800025c8 <IfxCan_setClockSource+0x3c>
800025bc:	1d 00 12 00 	j 800025e0 <IfxCan_setClockSource+0x54>
800025c0:	1d 00 14 00 	j 800025e8 <IfxCan_setClockSource+0x5c>
800025c4:	1d 00 16 00 	j 800025f0 <IfxCan_setClockSource+0x64>
    {
    case IfxCan_ClockSelect_0:
        mcr.B.CLKSEL0 = clockSource;
800025c8:	37 52 02 20 	insert %d2,%d2,%d5,0,2
    case IfxCan_ClockSelect_3:
        mcr.B.CLKSEL3 = clockSource;
        break;
    }

    can->MCR.U = mcr.U;
800025cc:	bb 00 03 48 	mov.u %d4,32816
800025d0:	60 32       	mov.a %a2,%d3
800025d2:	01 24 00 46 	addsc.a %a4,%a2,%d4,0
800025d6:	74 42       	st.w [%a4],%d2

    /* disable CCCE and CI */
    mcr.B.CCCE = 0;
    mcr.B.CI   = 0;
800025d8:	b7 02 02 2f 	insert %d2,%d2,0,30,2
    can->MCR.U = mcr.U;
800025dc:	74 42       	st.w [%a4],%d2
}
800025de:	00 90       	ret 
        mcr.B.CLKSEL1 = clockSource;
800025e0:	37 52 02 21 	insert %d2,%d2,%d5,2,2
        break;
800025e4:	1d ff f4 ff 	j 800025cc <IfxCan_setClockSource+0x40>
        mcr.B.CLKSEL2 = clockSource;
800025e8:	37 52 02 22 	insert %d2,%d2,%d5,4,2
        break;
800025ec:	1d ff f0 ff 	j 800025cc <IfxCan_setClockSource+0x40>
        mcr.B.CLKSEL3 = clockSource;
800025f0:	37 52 02 23 	insert %d2,%d2,%d5,6,2
        break;
800025f4:	1d ff ec ff 	j 800025cc <IfxCan_setClockSource+0x40>

800025f8 <IfxCan_Can_initMessage>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxCan_Can_initMessage(IfxCan_Message *message)
{
800025f8:	40 ae       	mov.aa %a14,%sp
800025fa:	20 20       	sub.a %sp,32
800025fc:	40 4d       	mov.aa %a13,%a4
    const IfxCan_Message defaultMessage = {
800025fe:	d9 ec e0 ff 	lea %a12,[%a14]-32
80002602:	3b 00 02 50 	mov %d5,32
80002606:	82 04       	mov %d4,0
80002608:	40 c4       	mov.aa %a4,%a12
8000260a:	6d 00 0e 0e 	call 80004226 <memset>
8000260e:	3b 80 00 20 	mov %d2,8
80002612:	59 e2 f4 ff 	st.w [%a14]-12,%d2
        .readFromRxFifo0       = FALSE,
        .readFromRxFifo1       = FALSE
    };

    /* Default Configuration */
    *message = defaultMessage;
80002616:	09 c4 48 01 	ld.d %e4,[%a12+]8
8000261a:	89 d4 48 01 	st.d [%a13+]8,%e4
8000261e:	09 c4 48 01 	ld.d %e4,[%a12+]8
80002622:	89 d4 48 01 	st.d [%a13+]8,%e4
80002626:	09 c4 48 01 	ld.d %e4,[%a12+]8
8000262a:	89 d4 48 01 	st.d [%a13+]8,%e4
8000262e:	09 c4 48 01 	ld.d %e4,[%a12+]8
80002632:	89 d4 48 01 	st.d [%a13+]8,%e4
}
80002636:	00 90       	ret 

80002638 <IfxCan_Can_initModule>:


void IfxCan_Can_initModule(IfxCan_Can *can, IfxCan_Can_Config *config)
{
80002638:	40 ae       	mov.aa %a14,%sp
    can->can = config->can;
8000263a:	54 52       	ld.w %d2,[%a5]
8000263c:	74 42       	st.w [%a4],%d2
}


IFX_INLINE boolean IfxCan_isModuleEnabled(Ifx_CAN *can)
{
    return can->CLC.B.DISS == 0;
8000263e:	bb 00 00 38 	mov.u %d3,32768
80002642:	60 22       	mov.a %a2,%d2
80002644:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002648:	54 23       	ld.w %d3,[%a2]

    // if module is not enebled
    if (IfxCan_isModuleEnabled(can->can) != TRUE)
8000264a:	6f 13 03 80 	jnz.t %d3,1,80002650 <IfxCan_Can_initModule+0x18>
    {
        // Enable module, disregard Sleep Mode request
        IfxCan_enableModule(can->can);
    }
}
8000264e:	00 90       	ret 
        IfxCan_enableModule(can->can);
80002650:	60 24       	mov.a %a4,%d2
80002652:	6d ff 43 ff 	call 800024d8 <IfxCan_enableModule>
}
80002656:	1d ff fc ff 	j 8000264e <IfxCan_Can_initModule+0x16>

8000265a <IfxCan_Can_initModuleConfig>:


void IfxCan_Can_initModuleConfig(IfxCan_Can_Config *config, Ifx_CAN *can)
{
8000265a:	40 ae       	mov.aa %a14,%sp
    const IfxCan_Can_Config defaultConfig = {
8000265c:	82 02       	mov %d2,0
        .can = NULL_PTR
    };

    /* Default Configuration */
    *config = defaultConfig;
8000265e:	74 42       	st.w [%a4],%d2

    /* take over module pointer */
    config->can = can;
80002660:	f4 45       	st.a [%a4],%a5
}
80002662:	00 90       	ret 

80002664 <IfxCan_Can_initNode>:


boolean IfxCan_Can_initNode(IfxCan_Can_Node *node, const IfxCan_Can_NodeConfig *config)
{
80002664:	40 ae       	mov.aa %a14,%sp
80002666:	40 5c       	mov.aa %a12,%a5
    Ifx_CAN   *canSfr  = config->can;
80002668:	54 59       	ld.w %d9,[%a5]
    node->can = canSfr;
8000266a:	74 49       	st.w [%a4],%d9
    boolean    status  = 0;

    Ifx_CAN_N *nodeSfr = IfxCan_getNodePointer(canSfr, config->nodeId);
8000266c:	19 58 04 00 	ld.w %d8,[%a5]4
    return &(can->N[nodeId]);
80002670:	8f a8 00 b0 	sh %d11,%d8,10
80002674:	bb 00 10 28 	mov.u %d2,33024
80002678:	42 b2       	add %d2,%d11
8000267a:	0b 29 00 a0 	add %d10,%d9,%d2
    node->node       = nodeSfr;
8000267e:	59 4a 04 00 	st.w [%a4]4,%d10

    node->messageRAM = config->messageRAM;
80002682:	d9 42 0c 00 	lea %a2,[%a4]12
80002686:	d9 53 2c 10 	lea %a3,[%a5]108
8000268a:	09 34 48 01 	ld.d %e4,[%a3+]8
8000268e:	89 24 48 01 	st.d [%a2+]8,%e4
80002692:	09 34 48 01 	ld.d %e4,[%a3+]8
80002696:	89 24 48 01 	st.d [%a2+]8,%e4
8000269a:	44 34       	ld.w %d4,[%a3+]
8000269c:	64 24       	st.w [%a2+],%d4

    /* initialise the clock for the selected node */
    IfxCan_ClockSelect clockSelect = (IfxCan_ClockSelect)config->nodeId;
    IfxCan_setClockSource(canSfr, clockSelect, config->clockSource);
8000269e:	19 55 08 00 	ld.w %d5,[%a5]8
800026a2:	19 54 04 00 	ld.w %d4,[%a5]4
800026a6:	60 94       	mov.a %a4,%d9
800026a8:	6d ff 72 ff 	call 8000258c <IfxCan_setClockSource>
    if (node->CCCR.B.INIT == 1)
800026ac:	0b b9 00 20 	add %d2,%d9,%d11
800026b0:	bb 80 21 38 	mov.u %d3,33304
800026b4:	60 22       	mov.a %a2,%d2
800026b6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800026ba:	54 22       	ld.w %d2,[%a2]
800026bc:	6f 02 9b 80 	jnz.t %d2,0,800027f2 <IfxCan_Can_initNode+0x18e>
    node->CCCR.B.INIT = 1;
800026c0:	8f a8 00 20 	sh %d2,%d8,10
800026c4:	42 92       	add %d2,%d9
800026c6:	bb 80 21 38 	mov.u %d3,33304
800026ca:	60 22       	mov.a %a2,%d2
800026cc:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800026d0:	54 22       	ld.w %d2,[%a2]
800026d2:	b7 12 01 20 	insert %d2,%d2,1,0,1
800026d6:	74 22       	st.w [%a2],%d2
    while (node->CCCR.B.INIT != 1)
800026d8:	8f a8 00 20 	sh %d2,%d8,10
800026dc:	42 92       	add %d2,%d9
800026de:	bb 80 21 38 	mov.u %d3,33304
800026e2:	60 22       	mov.a %a2,%d2
800026e4:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800026e8:	54 22       	ld.w %d2,[%a2]
800026ea:	6f 02 f7 7f 	jz.t %d2,0,800026d8 <IfxCan_Can_initNode+0x74>
        cccr.U       = node->CCCR.U;
800026ee:	8f a8 00 20 	sh %d2,%d8,10
800026f2:	42 92       	add %d2,%d9
800026f4:	60 22       	mov.a %a2,%d2
800026f6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800026fa:	54 22       	ld.w %d2,[%a2]
        cccr.B.INIT  = 1;
800026fc:	b7 12 01 20 	insert %d2,%d2,1,0,1
        cccr.B.CCE   = 1;
80002700:	b7 12 81 20 	insert %d2,%d2,1,1,1
        node->CCCR.U = cccr.U;
80002704:	74 22       	st.w [%a2],%d2

    /* enable configuration change CCCR.CCE = 1, CCCR.INIT = 1 */
    IfxCan_Node_enableConfigurationChange(nodeSfr);

    float32 moduleFreq = IfxCan_getModuleFrequency();
80002706:	6d ff 25 ff 	call 80002550 <IfxCan_getModuleFrequency>
8000270a:	02 2b       	mov %d11,%d2

    /* set baudrate */
    if (config->calculateBitTimingValues)
8000270c:	39 c3 21 50 	ld.bu %d3,[%a12]353
80002710:	df 03 9c 00 	jeq %d3,0,80002848 <IfxCan_Can_initNode+0x1e4>
    {
        IfxCan_Node_setBitTiming(nodeSfr, moduleFreq, config->baudRate.baudrate, config->baudRate.samplePoint, config->baudRate.syncJumpWidth);
80002714:	b9 c7 1a 00 	ld.hu %d7,[%a12]26
80002718:	b9 c6 18 00 	ld.hu %d6,[%a12]24
8000271c:	19 c5 14 00 	ld.w %d5,[%a12]20
80002720:	02 24       	mov %d4,%d2
80002722:	60 a4       	mov.a %a4,%d10
80002724:	6d ff 91 fc 	call 80002046 <IfxCan_Node_setBitTiming>
    {
        IfxCan_Node_setBitTimingValues(nodeSfr, config->baudRate.syncJumpWidth, config->baudRate.timeSegment2, config->baudRate.timeSegment1, config->baudRate.prescaler);
    }

    /* for CAN FD frames, set fast baudrate */
    if (config->frame.mode != IfxCan_FrameMode_standard)
80002728:	19 c2 10 00 	ld.w %d2,[%a12]16
8000272c:	df 02 29 00 	jeq %d2,0,8000277e <IfxCan_Can_initNode+0x11a>
    {
        if (config->calculateBitTimingValues)
80002730:	39 c2 21 50 	ld.bu %d2,[%a12]353
80002734:	df 02 97 00 	jeq %d2,0,80002862 <IfxCan_Can_initNode+0x1fe>
        {
            IfxCan_Node_setFastBitTiming(nodeSfr, moduleFreq, config->fastBaudRate.baudrate, config->fastBaudRate.samplePoint, config->fastBaudRate.syncJumpWidth);
80002738:	b9 c7 26 00 	ld.hu %d7,[%a12]38
8000273c:	b9 c6 24 00 	ld.hu %d6,[%a12]36
80002740:	19 c5 20 00 	ld.w %d5,[%a12]32
80002744:	02 b4       	mov %d4,%d11
80002746:	60 a4       	mov.a %a4,%d10
80002748:	6d ff 5d fd 	call 80002202 <IfxCan_Node_setFastBitTiming>
        {
            IfxCan_Node_setFastBitTimingValues(nodeSfr, config->fastBaudRate.syncJumpWidth, config->fastBaudRate.timeSegment2, config->fastBaudRate.timeSegment1, config->fastBaudRate.prescaler);
        }

        /* set transceiver delay compensation offset */
        if (config->fastBaudRate.tranceiverDelayOffset != 0)
8000274c:	39 c3 2c 00 	ld.bu %d3,[%a12]44
80002750:	df 03 17 00 	jeq %d3,0,8000277e <IfxCan_Can_initNode+0x11a>
    node->DBTP.B.TDC  = 1;
80002754:	8f a8 00 40 	sh %d4,%d8,10
80002758:	42 94       	add %d4,%d9
8000275a:	bb c0 20 28 	mov.u %d2,33292
8000275e:	60 42       	mov.a %a2,%d4
80002760:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002764:	54 22       	ld.w %d2,[%a2]
80002766:	b7 12 81 2b 	insert %d2,%d2,1,23,1
8000276a:	74 22       	st.w [%a2],%d2
    node->TDCR.B.TDCO = delay;
8000276c:	bb 80 24 28 	mov.u %d2,33352
80002770:	60 42       	mov.a %a2,%d4
80002772:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002776:	54 22       	ld.w %d2,[%a2]
80002778:	37 32 07 24 	insert %d2,%d2,%d3,8,7
8000277c:	74 22       	st.w [%a2],%d2

    /* transmit frame configuration */

    if ((config->frame.type == IfxCan_FrameType_transmit) ||
        (config->frame.type == IfxCan_FrameType_transmitAndReceive) ||
        (config->frame.type == IfxCan_FrameType_remoteRequest) ||
8000277e:	19 c2 0c 00 	ld.w %d2,[%a12]12
80002782:	c2 f2       	add %d2,-1
    if ((config->frame.type == IfxCan_FrameType_transmit) ||
80002784:	ff 42 e3 80 	jge.u %d2,4,8000294a <IfxCan_Can_initNode+0x2e6>
        (config->frame.type == IfxCan_FrameType_remoteAnswer))
    {
        uint32 id; /* used for enabling transmit interrupts for individual Tx buffers */

        /* set Tx element data field size */
        IfxCan_Node_setTxBufferDataFieldSize(nodeSfr, config->txConfig.txBufferDataFieldSize);
80002788:	19 c3 38 00 	ld.w %d3,[%a12]56
    node->TX.ESC.B.TBDS = size;
8000278c:	8f a8 00 40 	sh %d4,%d8,10
80002790:	42 94       	add %d4,%d9
80002792:	bb 80 2c 28 	mov.u %d2,33480
80002796:	60 42       	mov.a %a2,%d4
80002798:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000279c:	54 22       	ld.w %d2,[%a2]
8000279e:	37 32 03 20 	insert %d2,%d2,%d3,0,3
800027a2:	74 22       	st.w [%a2],%d2

        /* set Tx buffers start address in the Message RAM */
        IfxCan_Node_setTxBuffersStartAddress(nodeSfr, config->messageRAM.txBuffersStartAddress);
800027a4:	b9 c3 3c 10 	ld.hu %d3,[%a12]124
    node->TX.BC.B.TBSA = address >> 2;
800027a8:	06 e3       	sh %d3,-2
800027aa:	bb 00 2c 28 	mov.u %d2,33472
800027ae:	60 42       	mov.a %a2,%d4
800027b0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800027b4:	54 22       	ld.w %d2,[%a2]
800027b6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
800027ba:	74 22       	st.w [%a2],%d2

        if ((config->txConfig.txMode == IfxCan_TxMode_dedicatedBuffers) ||
800027bc:	19 c2 30 00 	ld.w %d2,[%a12]48
            (config->txConfig.txMode == IfxCan_TxMode_sharedFifo) ||
800027c0:	1b e2 ff 3f 	addi %d3,%d2,-2
        if ((config->txConfig.txMode == IfxCan_TxMode_dedicatedBuffers) ||
800027c4:	ff 33 19 86 	jge.u %d3,3,800033f6 <IfxCan_Can_initNode+0xd92>
            (config->txConfig.txMode == IfxCan_TxMode_sharedQueue))
        {
            /* dedicated TX buffers operation */
            /* select number of Tx buffers */
            IfxCan_Node_setDedicatedTxBuffersNumber(nodeSfr, config->txConfig.dedicatedTxBuffersNumber);
800027c8:	39 c3 34 00 	ld.bu %d3,[%a12]52
    node->TX.BC.B.NDTB = number;
800027cc:	02 42       	mov %d2,%d4
800027ce:	bb 00 2c 48 	mov.u %d4,33472
800027d2:	60 22       	mov.a %a2,%d2
800027d4:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800027d8:	54 22       	ld.w %d2,[%a2]
800027da:	37 32 06 28 	insert %d2,%d2,%d3,16,6
800027de:	74 22       	st.w [%a2],%d2

            /* shared operation */
            if ((config->txConfig.txMode == IfxCan_TxMode_sharedFifo) || (config->txConfig.txMode == IfxCan_TxMode_sharedQueue))
800027e0:	19 c3 30 00 	ld.w %d3,[%a12]48
800027e4:	1b d3 ff 2f 	addi %d2,%d3,-3
800027e8:	bf 22 4a 80 	jlt.u %d2,2,8000287c <IfxCan_Can_initNode+0x218>
{
800027ec:	82 02       	mov %d2,0
800027ee:	1d 00 84 00 	j 800028f6 <IfxCan_Can_initNode+0x292>
        node->CCCR.B.CCE = 0;
800027f2:	02 b2       	mov %d2,%d11
800027f4:	42 92       	add %d2,%d9
800027f6:	60 22       	mov.a %a2,%d2
800027f8:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800027fc:	54 22       	ld.w %d2,[%a2]
800027fe:	8f 22 c0 21 	andn %d2,%d2,2
80002802:	74 22       	st.w [%a2],%d2
        while (node->CCCR.B.CCE != 0)
80002804:	8f a8 00 20 	sh %d2,%d8,10
80002808:	42 92       	add %d2,%d9
8000280a:	bb 80 21 38 	mov.u %d3,33304
8000280e:	60 22       	mov.a %a2,%d2
80002810:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002814:	54 22       	ld.w %d2,[%a2]
80002816:	6f 12 f7 ff 	jnz.t %d2,1,80002804 <IfxCan_Can_initNode+0x1a0>
        node->CCCR.B.INIT = 0;
8000281a:	8f a8 00 20 	sh %d2,%d8,10
8000281e:	42 92       	add %d2,%d9
80002820:	60 22       	mov.a %a2,%d2
80002822:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002826:	54 22       	ld.w %d2,[%a2]
80002828:	8f 12 c0 21 	andn %d2,%d2,1
8000282c:	74 22       	st.w [%a2],%d2
        while (node->CCCR.B.INIT != 0)
8000282e:	8f a8 00 20 	sh %d2,%d8,10
80002832:	42 92       	add %d2,%d9
80002834:	bb 80 21 38 	mov.u %d3,33304
80002838:	60 22       	mov.a %a2,%d2
8000283a:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000283e:	54 22       	ld.w %d2,[%a2]
80002840:	6f 02 f7 ff 	jnz.t %d2,0,8000282e <IfxCan_Can_initNode+0x1ca>
80002844:	1d ff 3e ff 	j 800026c0 <IfxCan_Can_initNode+0x5c>
        IfxCan_Node_setBitTimingValues(nodeSfr, config->baudRate.syncJumpWidth, config->baudRate.timeSegment2, config->baudRate.timeSegment1, config->baudRate.prescaler);
80002848:	b9 c7 1c 00 	ld.hu %d7,[%a12]28
8000284c:	39 c6 1e 00 	ld.bu %d6,[%a12]30
80002850:	39 c5 1f 00 	ld.bu %d5,[%a12]31
80002854:	b9 c4 1a 00 	ld.hu %d4,[%a12]26
80002858:	60 a4       	mov.a %a4,%d10
8000285a:	6d ff c5 fc 	call 800021e4 <IfxCan_Node_setBitTimingValues>
8000285e:	1d ff 65 ff 	j 80002728 <IfxCan_Can_initNode+0xc4>
            IfxCan_Node_setFastBitTimingValues(nodeSfr, config->fastBaudRate.syncJumpWidth, config->fastBaudRate.timeSegment2, config->fastBaudRate.timeSegment1, config->fastBaudRate.prescaler);
80002862:	b9 c7 28 00 	ld.hu %d7,[%a12]40
80002866:	39 c6 2a 00 	ld.bu %d6,[%a12]42
8000286a:	39 c5 2b 00 	ld.bu %d5,[%a12]43
8000286e:	b9 c4 26 00 	ld.hu %d4,[%a12]38
80002872:	60 a4       	mov.a %a4,%d10
80002874:	6d ff 97 fd 	call 800023a2 <IfxCan_Node_setFastBitTimingValues>
80002878:	1d ff 6a ff 	j 8000274c <IfxCan_Can_initNode+0xe8>
            {
                if (config->txConfig.txMode == IfxCan_TxMode_sharedFifo)
8000287c:	df 33 16 00 	jeq %d3,3,800028a8 <IfxCan_Can_initNode+0x244>
                {
                    /* set Tx FIFO mode */
                    IfxCan_Node_setTransmitFifoQueueMode(nodeSfr, IfxCan_TxMode_fifo);
                }

                if (config->txConfig.txMode == IfxCan_TxMode_sharedQueue)
80002880:	19 c2 30 00 	ld.w %d2,[%a12]48
80002884:	df 42 1e 00 	jeq %d2,4,800028c0 <IfxCan_Can_initNode+0x25c>
                    /* set Tx Queue mode */
                    IfxCan_Node_setTransmitFifoQueueMode(nodeSfr, IfxCan_TxMode_queue);
                }

                /* select number of Tx buffers to be used as Tx FIFO/Queue */
                IfxCan_Node_setTransmitFifoQueueSize(nodeSfr, config->txConfig.txFifoQueueSize);
80002888:	39 c3 35 00 	ld.bu %d3,[%a12]53
    node->TX.BC.B.TFQS = number;
8000288c:	8f a8 00 20 	sh %d2,%d8,10
80002890:	42 92       	add %d2,%d9
80002892:	bb 00 2c 48 	mov.u %d4,33472
80002896:	60 22       	mov.a %a2,%d2
80002898:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000289c:	54 22       	ld.w %d2,[%a2]
8000289e:	37 32 06 2c 	insert %d2,%d2,%d3,24,6
800028a2:	74 22       	st.w [%a2],%d2
}
800028a4:	1d ff a4 ff 	j 800027ec <IfxCan_Can_initNode+0x188>
        node->TX.BC.B.TFQM = mode;
800028a8:	8f a8 00 20 	sh %d2,%d8,10
800028ac:	42 92       	add %d2,%d9
800028ae:	60 22       	mov.a %a2,%d2
800028b0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800028b4:	54 22       	ld.w %d2,[%a2]
800028b6:	b7 02 01 2f 	insert %d2,%d2,0,30,1
800028ba:	74 22       	st.w [%a2],%d2
}
800028bc:	1d ff e2 ff 	j 80002880 <IfxCan_Can_initNode+0x21c>
        node->TX.BC.B.TFQM = mode;
800028c0:	8f a8 00 20 	sh %d2,%d8,10
800028c4:	42 92       	add %d2,%d9
800028c6:	bb 00 2c 38 	mov.u %d3,33472
800028ca:	60 22       	mov.a %a2,%d2
800028cc:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800028d0:	54 22       	ld.w %d2,[%a2]
800028d2:	b7 12 01 2f 	insert %d2,%d2,1,30,1
800028d6:	74 22       	st.w [%a2],%d2
}
800028d8:	1d ff d8 ff 	j 80002888 <IfxCan_Can_initNode+0x224>
    node->TX.BTIE.U = node->TX.BTIE.U | (mask);
800028dc:	8f a8 00 30 	sh %d3,%d8,10
800028e0:	42 93       	add %d3,%d9
800028e2:	bb 00 2e 48 	mov.u %d4,33504
800028e6:	60 32       	mov.a %a2,%d3
800028e8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800028ec:	54 23       	ld.w %d3,[%a2]
800028ee:	d7 13 01 32 	insert %d3,%d3,1,%d2,1
800028f2:	74 23       	st.w [%a2],%d3
            }

            /* enable transmission interrupt on selected buffers */
            for (id = 0; id < (config->txConfig.dedicatedTxBuffersNumber + config->txConfig.txFifoQueueSize); ++id)
800028f4:	c2 12       	add %d2,1
800028f6:	39 c4 34 00 	ld.bu %d4,[%a12]52
800028fa:	39 c3 35 00 	ld.bu %d3,[%a12]53
800028fe:	42 43       	add %d3,%d4
80002900:	3f 32 ee ff 	jlt.u %d2,%d3,800028dc <IfxCan_Can_initNode+0x278>
        {
            IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, 0);
        }

        /* set the Tx event fifo size and start address if selected */
        if ((config->txConfig.txEventFifoSize > 0) && (config->txConfig.txEventFifoSize <= 32))
80002904:	39 c2 3c 00 	ld.bu %d2,[%a12]60
80002908:	c2 f2       	add %d2,-1
8000290a:	8f f2 0f 21 	and %d2,%d2,255
8000290e:	3b f0 01 30 	mov %d3,31
80002912:	3f 23 17 80 	jlt.u %d3,%d2,80002940 <IfxCan_Can_initNode+0x2dc>
        {
            IfxCan_Node_setTxEventFifoStartAddress(nodeSfr, config->messageRAM.txEventFifoStartAddress);
80002916:	b9 c3 3a 10 	ld.hu %d3,[%a12]122
    node->TX.EFC.B.EFSA = address >> 2;
8000291a:	06 e3       	sh %d3,-2
8000291c:	8f a8 00 20 	sh %d2,%d8,10
80002920:	42 92       	add %d2,%d9
80002922:	bb 00 2f 48 	mov.u %d4,33520
80002926:	60 22       	mov.a %a2,%d2
80002928:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000292c:	54 22       	ld.w %d2,[%a2]
8000292e:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002932:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setTxEventFifoSize(nodeSfr, config->txConfig.txEventFifoSize);
80002934:	39 c3 3c 00 	ld.bu %d3,[%a12]60
    node->TX.EFC.B.EFS = size;
80002938:	54 22       	ld.w %d2,[%a2]
8000293a:	37 32 06 28 	insert %d2,%d2,%d3,16,6
8000293e:	74 22       	st.w [%a2],%d2
        {
            IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, config->txConfig.txEventFifoSize <= 32);
        }

        /* enable CAN frame mode of transmission Standard or CAN FD Long or FD Long and Fast frames*/
        IfxCan_Node_setFrameMode(nodeSfr, config->frame.mode);
80002940:	19 c4 10 00 	ld.w %d4,[%a12]16
80002944:	60 a4       	mov.a %a4,%d10
80002946:	6d ff 3d fd 	call 800023c0 <IfxCan_Node_setFrameMode>
    }

    /* receive frame configuration */

    if ((config->frame.type == IfxCan_FrameType_receive) ||
8000294a:	19 c2 0c 00 	ld.w %d2,[%a12]12
8000294e:	8b 02 00 32 	eq %d3,%d2,0
80002952:	8b 22 e0 34 	or.eq %d3,%d2,2
80002956:	df 03 04 80 	jne %d3,0,8000295e <IfxCan_Can_initNode+0x2fa>
        (config->frame.type == IfxCan_FrameType_transmitAndReceive) ||
8000295a:	df 42 ca 80 	jne %d2,4,80002aee <IfxCan_Can_initNode+0x48a>
        (config->frame.type == IfxCan_FrameType_remoteAnswer))
    {
        if ((config->rxConfig.rxMode == IfxCan_RxMode_dedicatedBuffers) ||
8000295e:	19 c2 10 10 	ld.w %d2,[%a12]80
80002962:	8b 02 00 32 	eq %d3,%d2,0
80002966:	8b 32 e0 34 	or.eq %d3,%d2,3
8000296a:	df 03 06 80 	jne %d3,0,80002976 <IfxCan_Can_initNode+0x312>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo0) ||
8000296e:	df 42 04 00 	jeq %d2,4,80002976 <IfxCan_Can_initNode+0x312>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo1) ||
80002972:	df 52 1c 80 	jne %d2,5,800029aa <IfxCan_Can_initNode+0x346>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx buffer data length */
            IfxCan_Node_setRxBufferDataFieldSize(nodeSfr, config->rxConfig.rxBufferDataFieldSize);
80002976:	19 c3 14 10 	ld.w %d3,[%a12]84
    node->RX.ESC.B.RBDS = size;
8000297a:	8f a8 00 40 	sh %d4,%d8,10
8000297e:	42 94       	add %d4,%d9
80002980:	bb c0 2b 28 	mov.u %d2,33468
80002984:	60 42       	mov.a %a2,%d4
80002986:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
8000298a:	54 22       	ld.w %d2,[%a2]
8000298c:	37 32 03 24 	insert %d2,%d2,%d3,8,3
80002990:	74 22       	st.w [%a2],%d2

            /* set Rx buffers start address in the Message RAM */
            IfxCan_Node_setRxBuffersStartAddress(nodeSfr, config->messageRAM.rxBuffersStartAddress);
80002992:	b9 c3 38 10 	ld.hu %d3,[%a12]120
    node->RX.BC.B.RBSA = address >> 2;
80002996:	06 e3       	sh %d3,-2
80002998:	bb c0 2a 28 	mov.u %d2,33452
8000299c:	60 42       	mov.a %a2,%d4
8000299e:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800029a2:	54 22       	ld.w %d2,[%a2]
800029a4:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
800029a8:	74 22       	st.w [%a2],%d2
        }

        if ((config->rxConfig.rxMode == IfxCan_RxMode_fifo0) ||
800029aa:	19 c2 10 10 	ld.w %d2,[%a12]80
800029ae:	8b 12 00 32 	eq %d3,%d2,1
800029b2:	8b 32 e0 34 	or.eq %d3,%d2,3
800029b6:	df 03 04 80 	jne %d3,0,800029be <IfxCan_Can_initNode+0x35a>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo0) ||
800029ba:	df 52 2e 80 	jne %d2,5,80002a16 <IfxCan_Can_initNode+0x3b2>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx FIFO 0 data length */
            IfxCan_Node_setRxFifo0DataFieldSize(nodeSfr, config->rxConfig.rxFifo0DataFieldSize);
800029be:	19 c3 18 10 	ld.w %d3,[%a12]88
    node->RX.ESC.B.F0DS = size;
800029c2:	8f a8 00 40 	sh %d4,%d8,10
800029c6:	42 94       	add %d4,%d9
800029c8:	bb c0 2b 28 	mov.u %d2,33468
800029cc:	60 42       	mov.a %a2,%d4
800029ce:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800029d2:	54 22       	ld.w %d2,[%a2]
800029d4:	37 32 03 20 	insert %d2,%d2,%d3,0,3
800029d8:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 start address in the Message RAM */
            IfxCan_Node_setRxFifo0StartAddress(nodeSfr, config->messageRAM.rxFifo0StartAddress);
800029da:	b9 c3 34 10 	ld.hu %d3,[%a12]116
    node->RX.F0C.B.F0SA = address >> 2;
800029de:	06 e3       	sh %d3,-2
800029e0:	bb 00 2a 28 	mov.u %d2,33440
800029e4:	60 42       	mov.a %a2,%d4
800029e6:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
800029ea:	54 22       	ld.w %d2,[%a2]
800029ec:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
800029f0:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 size */
            IfxCan_Node_setRxFifo0Size(nodeSfr, config->rxConfig.rxFifo0Size);
800029f2:	39 c3 2a 10 	ld.bu %d3,[%a12]106
    node->RX.F0C.B.F0S = size;
800029f6:	54 22       	ld.w %d2,[%a2]
800029f8:	37 32 07 28 	insert %d2,%d2,%d3,16,7
800029fc:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 operating mode */
            IfxCan_Node_setRxFifo0OperatingMode(nodeSfr, config->rxConfig.rxFifo0OperatingMode);
800029fe:	19 c3 20 10 	ld.w %d3,[%a12]96
    node->RX.F0C.B.F0OM = mode;
80002a02:	54 22       	ld.w %d2,[%a2]
80002a04:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
80002a08:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 0 watermark level */
            IfxCan_Node_setRxFifo0WatermarkLevel(nodeSfr, config->rxConfig.rxFifo0WatermarkLevel);
80002a0a:	39 c3 28 10 	ld.bu %d3,[%a12]104
    node->RX.F0C.B.F0WM = level;
80002a0e:	54 22       	ld.w %d2,[%a2]
80002a10:	37 32 07 2c 	insert %d2,%d2,%d3,24,7
80002a14:	74 22       	st.w [%a2],%d2
        }

        if ((config->rxConfig.rxMode == IfxCan_RxMode_fifo1) ||
80002a16:	19 c2 10 10 	ld.w %d2,[%a12]80
80002a1a:	8b 22 00 32 	eq %d3,%d2,2
80002a1e:	8b 42 e0 34 	or.eq %d3,%d2,4
80002a22:	df 03 04 80 	jne %d3,0,80002a2a <IfxCan_Can_initNode+0x3c6>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedFifo1) ||
80002a26:	df 52 2e 80 	jne %d2,5,80002a82 <IfxCan_Can_initNode+0x41e>
            (config->rxConfig.rxMode == IfxCan_RxMode_sharedAll))
        {
            /* set Rx FIFO 1 data length */
            IfxCan_Node_setRxFifo1DataFieldSize(nodeSfr, config->rxConfig.rxFifo1DataFieldSize);
80002a2a:	19 c3 1c 10 	ld.w %d3,[%a12]92
    node->RX.ESC.B.F1DS = size;
80002a2e:	8f a8 00 40 	sh %d4,%d8,10
80002a32:	42 94       	add %d4,%d9
80002a34:	bb c0 2b 28 	mov.u %d2,33468
80002a38:	60 42       	mov.a %a2,%d4
80002a3a:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a3e:	54 22       	ld.w %d2,[%a2]
80002a40:	37 32 03 22 	insert %d2,%d2,%d3,4,3
80002a44:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 start address in the Message RAM */
            IfxCan_Node_setRxFifo1StartAddress(nodeSfr, config->messageRAM.rxFifo1StartAddress);
80002a46:	b9 c3 36 10 	ld.hu %d3,[%a12]118
    node->RX.F1C.B.F1SA = address >> 2;
80002a4a:	06 e3       	sh %d3,-2
80002a4c:	bb 00 2b 28 	mov.u %d2,33456
80002a50:	60 42       	mov.a %a2,%d4
80002a52:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002a56:	54 22       	ld.w %d2,[%a2]
80002a58:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002a5c:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 size */
            IfxCan_Node_setRxFifo1Size(nodeSfr, config->rxConfig.rxFifo1Size);
80002a5e:	39 c3 2b 10 	ld.bu %d3,[%a12]107
    node->RX.F1C.B.F1S = size;
80002a62:	54 22       	ld.w %d2,[%a2]
80002a64:	37 32 07 28 	insert %d2,%d2,%d3,16,7
80002a68:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 operating mode */
            IfxCan_Node_setRxFifo1OperatingMode(nodeSfr, config->rxConfig.rxFifo1OperatingMode);
80002a6a:	19 c3 24 10 	ld.w %d3,[%a12]100
    node->RX.F1C.B.F1OM = mode;
80002a6e:	54 22       	ld.w %d2,[%a2]
80002a70:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
80002a74:	74 22       	st.w [%a2],%d2

            /* set Rx FIFO 1 watermark level */
            IfxCan_Node_setRxFifo1WatermarkLevel(nodeSfr, config->rxConfig.rxFifo1WatermarkLevel);
80002a76:	39 c3 29 10 	ld.bu %d3,[%a12]105
    node->RX.F1C.B.F1WM = level;
80002a7a:	54 22       	ld.w %d2,[%a2]
80002a7c:	37 32 07 2c 	insert %d2,%d2,%d3,24,7
80002a80:	74 22       	st.w [%a2],%d2
        }

        /* enable CAN frame mode of transmission */
        IfxCan_Node_setFrameMode(nodeSfr, config->frame.mode);
80002a82:	19 c4 10 00 	ld.w %d4,[%a12]16
80002a86:	60 a4       	mov.a %a4,%d10
80002a88:	6d ff 9c fc 	call 800023c0 <IfxCan_Node_setFrameMode>

        /* filter configuration */

        if ((config->filterConfig.messageIdLength == IfxCan_MessageIdLength_standard) ||
80002a8c:	19 c3 00 10 	ld.w %d3,[%a12]64
80002a90:	8b 03 00 22 	eq %d2,%d3,0
80002a94:	8b 23 e0 24 	or.eq %d2,%d3,2
80002a98:	df 02 26 00 	jeq %d2,0,80002ae4 <IfxCan_Can_initNode+0x480>
            (config->filterConfig.messageIdLength == IfxCan_MessageIdLength_both))
        {
            IfxCan_Node_setStandardFilterListStartAddress(nodeSfr, config->messageRAM.standardFilterListStartAddress);
80002a9c:	b9 c3 30 10 	ld.hu %d3,[%a12]112
    node->SIDFC.B.FLSSA = address >> 2;
80002aa0:	06 e3       	sh %d3,-2
80002aa2:	8f a8 00 40 	sh %d4,%d8,10
80002aa6:	42 94       	add %d4,%d9
80002aa8:	bb 40 28 28 	mov.u %d2,33412
80002aac:	60 42       	mov.a %a2,%d4
80002aae:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ab2:	54 22       	ld.w %d2,[%a2]
80002ab4:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
80002ab8:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setStandardFilterListSize(nodeSfr, config->filterConfig.standardListSize);
80002aba:	39 c3 04 10 	ld.bu %d3,[%a12]68
    node->SIDFC.B.LSS = size;
80002abe:	54 22       	ld.w %d2,[%a2]
80002ac0:	37 32 08 28 	insert %d2,%d2,%d3,16,8
80002ac4:	74 22       	st.w [%a2],%d2
            IfxCan_Node_configureStandardFilterForNonMatchingFrames(nodeSfr, config->filterConfig.standardFilterForNonMatchingFrames);
80002ac6:	19 c3 08 10 	ld.w %d3,[%a12]72
    node->GFC.B.ANFS = filter;
80002aca:	bb 00 28 28 	mov.u %d2,33408
80002ace:	60 42       	mov.a %a2,%d4
80002ad0:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80002ad4:	54 22       	ld.w %d2,[%a2]
80002ad6:	37 32 02 22 	insert %d2,%d2,%d3,4,2
80002ada:	74 22       	st.w [%a2],%d2

            if (config->filterConfig.rejectRemoteFramesWithStandardId == 1U)
80002adc:	39 c2 06 10 	ld.bu %d2,[%a12]70
80002ae0:	df 12 b5 04 	jeq %d2,1,8000344a <IfxCan_Can_initNode+0xde6>
            {
                IfxCan_Node_rejectRemoteFramesWithStandardId(nodeSfr);
            }
        }

        if ((config->filterConfig.messageIdLength == IfxCan_MessageIdLength_extended) ||
80002ae4:	19 c2 00 10 	ld.w %d2,[%a12]64
80002ae8:	c2 f2       	add %d2,-1
80002aea:	bf 22 bb 84 	jlt.u %d2,2,80003460 <IfxCan_Can_initNode+0xdfc>
        }
    }

    /* pins initialisation */

    if (config->pins != NULL_PTR)
80002aee:	99 c2 1c 50 	ld.a %a2,[%a12]348
80002af2:	bd 02 e9 04 	jz.a %a2,800034c4 <IfxCan_Can_initNode+0xe60>
    {
        if (config->pins->txPin != NULL_PTR)
80002af6:	d4 24       	ld.a %a4,[%a2]
80002af8:	bd 04 e3 04 	jz.a %a4,800034be <IfxCan_Can_initNode+0xe5a>
        {
            status |= (IfxCan_Node_initTxPin(config->pins->txPin, config->pins->txPinMode, config->pins->padDriver));
80002afc:	19 25 10 00 	ld.w %d5,[%a2]16
80002b00:	19 24 04 00 	ld.w %d4,[%a2]4
80002b04:	6d ff 75 fa 	call 80001fee <IfxCan_Node_initTxPin>
80002b08:	02 2b       	mov %d11,%d2
        }

        if (config->pins->rxPin != NULL_PTR)
80002b0a:	99 c2 1c 50 	ld.a %a2,[%a12]348
80002b0e:	99 25 08 00 	ld.a %a5,[%a2]8
80002b12:	bd 05 0c 00 	jz.a %a5,80002b2a <IfxCan_Can_initNode+0x4c6>
        {
            status |= (IfxCan_Node_initRxPin(nodeSfr, config->pins->rxPin, config->pins->rxPinMode, config->pins->padDriver));
80002b16:	19 25 10 00 	ld.w %d5,[%a2]16
80002b1a:	19 24 0c 00 	ld.w %d4,[%a2]12
80002b1e:	60 a4       	mov.a %a4,%d10
80002b20:	6d ff 4a fa 	call 80001fb4 <IfxCan_Node_initRxPin>
80002b24:	a6 2b       	or %d11,%d2
80002b26:	8f fb 0f b1 	and %d11,%d11,255
        }
    }

    /* enable internal virtual CAN bus loopback mode if selected */
    if (config->busLoopbackEnabled)
80002b2a:	39 c2 20 50 	ld.bu %d2,[%a12]352
80002b2e:	df 02 0e 00 	jeq %d2,0,80002b4a <IfxCan_Can_initNode+0x4e6>
    node->NPCR.B.LBM = 1;
80002b32:	8f a8 00 20 	sh %d2,%d8,10
80002b36:	42 92       	add %d2,%d9
80002b38:	bb 00 14 38 	mov.u %d3,33088
80002b3c:	60 22       	mov.a %a2,%d2
80002b3e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80002b42:	54 22       	ld.w %d2,[%a2]
80002b44:	b7 12 01 24 	insert %d2,%d2,1,8,1
80002b48:	74 22       	st.w [%a2],%d2
    }

    // interrupt groups configuration
    volatile Ifx_SRC_SRCR *srcPointer;

    if ((config->interruptConfig.tefifo.priority > 0) || (config->interruptConfig.tefifo.typeOfService == IfxSrc_Tos_dma))
80002b4a:	b9 c2 20 20 	ld.hu %d2,[%a12]160
80002b4e:	df 02 06 80 	jne %d2,0,80002b5a <IfxCan_Can_initNode+0x4f6>
80002b52:	19 c2 24 20 	ld.w %d2,[%a12]164
80002b56:	df 12 21 80 	jne %d2,1,80002b98 <IfxCan_Can_initNode+0x534>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_tefifo, config->interruptConfig.tefifo.interruptLine);
80002b5a:	19 c5 1c 20 	ld.w %d5,[%a12]156
80002b5e:	82 04       	mov %d4,0
80002b60:	60 a4       	mov.a %a4,%d10
80002b62:	6d ff 89 fc 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.tefifo.interruptLine);
80002b66:	19 c4 1c 20 	ld.w %d4,[%a12]156
80002b6a:	d4 c4       	ld.a %a4,[%a12]
80002b6c:	6d ff f6 fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.tefifo.typeOfService, config->interruptConfig.tefifo.priority);
80002b70:	19 c4 24 20 	ld.w %d4,[%a12]164
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80002b74:	39 c2 20 20 	ld.bu %d2,[%a12]160
80002b78:	54 23       	ld.w %d3,[%a2]
80002b7a:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002b7e:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002b80:	54 23       	ld.w %d3,[%a2]
80002b82:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002b86:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002b88:	54 23       	ld.w %d3,[%a2]
80002b8a:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002b8e:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002b90:	54 23       	ld.w %d3,[%a2]
80002b92:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002b96:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.hpe.priority > 0) || (config->interruptConfig.hpe.typeOfService == IfxSrc_Tos_dma))
80002b98:	b9 c2 2c 20 	ld.hu %d2,[%a12]172
80002b9c:	df 02 06 80 	jne %d2,0,80002ba8 <IfxCan_Can_initNode+0x544>
80002ba0:	19 c2 30 20 	ld.w %d2,[%a12]176
80002ba4:	df 12 21 80 	jne %d2,1,80002be6 <IfxCan_Can_initNode+0x582>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_hpe, config->interruptConfig.hpe.interruptLine);
80002ba8:	19 c5 28 20 	ld.w %d5,[%a12]168
80002bac:	82 14       	mov %d4,1
80002bae:	60 a4       	mov.a %a4,%d10
80002bb0:	6d ff 62 fc 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.hpe.interruptLine);
80002bb4:	19 c4 28 20 	ld.w %d4,[%a12]168
80002bb8:	d4 c4       	ld.a %a4,[%a12]
80002bba:	6d ff cf fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.hpe.typeOfService, config->interruptConfig.hpe.priority);
80002bbe:	19 c4 30 20 	ld.w %d4,[%a12]176
    src->B.SRPN = priority;
80002bc2:	39 c2 2c 20 	ld.bu %d2,[%a12]172
80002bc6:	54 23       	ld.w %d3,[%a2]
80002bc8:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002bcc:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002bce:	54 23       	ld.w %d3,[%a2]
80002bd0:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002bd4:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002bd6:	54 23       	ld.w %d3,[%a2]
80002bd8:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002bdc:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002bde:	54 23       	ld.w %d3,[%a2]
80002be0:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002be4:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.wati.priority > 0) || (config->interruptConfig.wati.typeOfService == IfxSrc_Tos_dma))
80002be6:	b9 c2 38 20 	ld.hu %d2,[%a12]184
80002bea:	df 02 06 80 	jne %d2,0,80002bf6 <IfxCan_Can_initNode+0x592>
80002bee:	19 c2 3c 20 	ld.w %d2,[%a12]188
80002bf2:	df 12 21 80 	jne %d2,1,80002c34 <IfxCan_Can_initNode+0x5d0>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_wati, config->interruptConfig.wati.interruptLine);
80002bf6:	19 c5 34 20 	ld.w %d5,[%a12]180
80002bfa:	82 24       	mov %d4,2
80002bfc:	60 a4       	mov.a %a4,%d10
80002bfe:	6d ff 3b fc 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.wati.interruptLine);
80002c02:	19 c4 34 20 	ld.w %d4,[%a12]180
80002c06:	d4 c4       	ld.a %a4,[%a12]
80002c08:	6d ff a8 fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.wati.typeOfService, config->interruptConfig.wati.priority);
80002c0c:	19 c4 3c 20 	ld.w %d4,[%a12]188
    src->B.SRPN = priority;
80002c10:	39 c2 38 20 	ld.bu %d2,[%a12]184
80002c14:	54 23       	ld.w %d3,[%a2]
80002c16:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002c1a:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002c1c:	54 23       	ld.w %d3,[%a2]
80002c1e:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002c22:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002c24:	54 23       	ld.w %d3,[%a2]
80002c26:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002c2a:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002c2c:	54 23       	ld.w %d3,[%a2]
80002c2e:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002c32:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.alrt.priority > 0) || (config->interruptConfig.alrt.typeOfService == IfxSrc_Tos_dma))
80002c34:	b9 c2 04 30 	ld.hu %d2,[%a12]196
80002c38:	df 02 06 80 	jne %d2,0,80002c44 <IfxCan_Can_initNode+0x5e0>
80002c3c:	19 c2 08 30 	ld.w %d2,[%a12]200
80002c40:	df 12 21 80 	jne %d2,1,80002c82 <IfxCan_Can_initNode+0x61e>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_alrt, config->interruptConfig.alrt.interruptLine);
80002c44:	19 c5 00 30 	ld.w %d5,[%a12]192
80002c48:	82 34       	mov %d4,3
80002c4a:	60 a4       	mov.a %a4,%d10
80002c4c:	6d ff 14 fc 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.alrt.interruptLine);
80002c50:	19 c4 00 30 	ld.w %d4,[%a12]192
80002c54:	d4 c4       	ld.a %a4,[%a12]
80002c56:	6d ff 81 fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.alrt.typeOfService, config->interruptConfig.alrt.priority);
80002c5a:	19 c4 08 30 	ld.w %d4,[%a12]200
    src->B.SRPN = priority;
80002c5e:	39 c2 04 30 	ld.bu %d2,[%a12]196
80002c62:	54 23       	ld.w %d3,[%a2]
80002c64:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002c68:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002c6a:	54 23       	ld.w %d3,[%a2]
80002c6c:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002c70:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002c72:	54 23       	ld.w %d3,[%a2]
80002c74:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002c78:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002c7a:	54 23       	ld.w %d3,[%a2]
80002c7c:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002c80:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.moer.priority > 0) || (config->interruptConfig.moer.typeOfService == IfxSrc_Tos_dma))
80002c82:	b9 c2 10 30 	ld.hu %d2,[%a12]208
80002c86:	df 02 06 80 	jne %d2,0,80002c92 <IfxCan_Can_initNode+0x62e>
80002c8a:	19 c2 14 30 	ld.w %d2,[%a12]212
80002c8e:	df 12 21 80 	jne %d2,1,80002cd0 <IfxCan_Can_initNode+0x66c>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_moer, config->interruptConfig.moer.interruptLine);
80002c92:	19 c5 0c 30 	ld.w %d5,[%a12]204
80002c96:	82 44       	mov %d4,4
80002c98:	60 a4       	mov.a %a4,%d10
80002c9a:	6d ff ed fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.moer.interruptLine);
80002c9e:	19 c4 0c 30 	ld.w %d4,[%a12]204
80002ca2:	d4 c4       	ld.a %a4,[%a12]
80002ca4:	6d ff 5a fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.moer.typeOfService, config->interruptConfig.moer.priority);
80002ca8:	19 c4 14 30 	ld.w %d4,[%a12]212
    src->B.SRPN = priority;
80002cac:	39 c2 10 30 	ld.bu %d2,[%a12]208
80002cb0:	54 23       	ld.w %d3,[%a2]
80002cb2:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002cb6:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002cb8:	54 23       	ld.w %d3,[%a2]
80002cba:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002cbe:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002cc0:	54 23       	ld.w %d3,[%a2]
80002cc2:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002cc6:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002cc8:	54 23       	ld.w %d3,[%a2]
80002cca:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002cce:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.safe.priority > 0) || (config->interruptConfig.safe.typeOfService == IfxSrc_Tos_dma))
80002cd0:	b9 c2 1c 30 	ld.hu %d2,[%a12]220
80002cd4:	df 02 06 80 	jne %d2,0,80002ce0 <IfxCan_Can_initNode+0x67c>
80002cd8:	19 c2 20 30 	ld.w %d2,[%a12]224
80002cdc:	df 12 21 80 	jne %d2,1,80002d1e <IfxCan_Can_initNode+0x6ba>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_safe, config->interruptConfig.safe.interruptLine);
80002ce0:	19 c5 18 30 	ld.w %d5,[%a12]216
80002ce4:	82 54       	mov %d4,5
80002ce6:	60 a4       	mov.a %a4,%d10
80002ce8:	6d ff c6 fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.safe.interruptLine);
80002cec:	19 c4 18 30 	ld.w %d4,[%a12]216
80002cf0:	d4 c4       	ld.a %a4,[%a12]
80002cf2:	6d ff 33 fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.safe.typeOfService, config->interruptConfig.safe.priority);
80002cf6:	19 c4 20 30 	ld.w %d4,[%a12]224
    src->B.SRPN = priority;
80002cfa:	39 c2 1c 30 	ld.bu %d2,[%a12]220
80002cfe:	54 23       	ld.w %d3,[%a2]
80002d00:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002d04:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002d06:	54 23       	ld.w %d3,[%a2]
80002d08:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002d0c:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002d0e:	54 23       	ld.w %d3,[%a2]
80002d10:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002d14:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002d16:	54 23       	ld.w %d3,[%a2]
80002d18:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002d1c:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.boff.priority > 0) || (config->interruptConfig.boff.typeOfService == IfxSrc_Tos_dma))
80002d1e:	b9 c2 28 30 	ld.hu %d2,[%a12]232
80002d22:	df 02 06 80 	jne %d2,0,80002d2e <IfxCan_Can_initNode+0x6ca>
80002d26:	19 c2 2c 30 	ld.w %d2,[%a12]236
80002d2a:	df 12 21 80 	jne %d2,1,80002d6c <IfxCan_Can_initNode+0x708>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_boff, config->interruptConfig.boff.interruptLine);
80002d2e:	19 c5 24 30 	ld.w %d5,[%a12]228
80002d32:	82 64       	mov %d4,6
80002d34:	60 a4       	mov.a %a4,%d10
80002d36:	6d ff 9f fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.boff.interruptLine);
80002d3a:	19 c4 24 30 	ld.w %d4,[%a12]228
80002d3e:	d4 c4       	ld.a %a4,[%a12]
80002d40:	6d ff 0c fc 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.boff.typeOfService, config->interruptConfig.boff.priority);
80002d44:	19 c4 2c 30 	ld.w %d4,[%a12]236
    src->B.SRPN = priority;
80002d48:	39 c2 28 30 	ld.bu %d2,[%a12]232
80002d4c:	54 23       	ld.w %d3,[%a2]
80002d4e:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002d52:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002d54:	54 23       	ld.w %d3,[%a2]
80002d56:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002d5a:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002d5c:	54 23       	ld.w %d3,[%a2]
80002d5e:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002d62:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002d64:	54 23       	ld.w %d3,[%a2]
80002d66:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002d6a:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.loi.priority > 0) || (config->interruptConfig.loi.typeOfService == IfxSrc_Tos_dma))
80002d6c:	b9 c2 34 30 	ld.hu %d2,[%a12]244
80002d70:	df 02 06 80 	jne %d2,0,80002d7c <IfxCan_Can_initNode+0x718>
80002d74:	19 c2 38 30 	ld.w %d2,[%a12]248
80002d78:	df 12 21 80 	jne %d2,1,80002dba <IfxCan_Can_initNode+0x756>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_loi, config->interruptConfig.loi.interruptLine);
80002d7c:	19 c5 30 30 	ld.w %d5,[%a12]240
80002d80:	82 74       	mov %d4,7
80002d82:	60 a4       	mov.a %a4,%d10
80002d84:	6d ff 78 fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.loi.interruptLine);
80002d88:	19 c4 30 30 	ld.w %d4,[%a12]240
80002d8c:	d4 c4       	ld.a %a4,[%a12]
80002d8e:	6d ff e5 fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.loi.typeOfService, config->interruptConfig.loi.priority);
80002d92:	19 c4 38 30 	ld.w %d4,[%a12]248
    src->B.SRPN = priority;
80002d96:	39 c2 34 30 	ld.bu %d2,[%a12]244
80002d9a:	54 23       	ld.w %d3,[%a2]
80002d9c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002da0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002da2:	54 23       	ld.w %d3,[%a2]
80002da4:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002da8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002daa:	54 23       	ld.w %d3,[%a2]
80002dac:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002db0:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002db2:	54 23       	ld.w %d3,[%a2]
80002db4:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002db8:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.reint.priority > 0) || (config->interruptConfig.reint.typeOfService == IfxSrc_Tos_dma))
80002dba:	b9 c2 00 40 	ld.hu %d2,[%a12]256
80002dbe:	df 02 06 80 	jne %d2,0,80002dca <IfxCan_Can_initNode+0x766>
80002dc2:	19 c2 04 40 	ld.w %d2,[%a12]260
80002dc6:	df 12 22 80 	jne %d2,1,80002e0a <IfxCan_Can_initNode+0x7a6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_reint, config->interruptConfig.reint.interruptLine);
80002dca:	19 c5 3c 30 	ld.w %d5,[%a12]252
80002dce:	3b 80 00 40 	mov %d4,8
80002dd2:	60 a4       	mov.a %a4,%d10
80002dd4:	6d ff 50 fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.reint.interruptLine);
80002dd8:	19 c4 3c 30 	ld.w %d4,[%a12]252
80002ddc:	d4 c4       	ld.a %a4,[%a12]
80002dde:	6d ff bd fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.reint.typeOfService, config->interruptConfig.reint.priority);
80002de2:	19 c4 04 40 	ld.w %d4,[%a12]260
    src->B.SRPN = priority;
80002de6:	39 c2 00 40 	ld.bu %d2,[%a12]256
80002dea:	54 23       	ld.w %d3,[%a2]
80002dec:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002df0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002df2:	54 23       	ld.w %d3,[%a2]
80002df4:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002df8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002dfa:	54 23       	ld.w %d3,[%a2]
80002dfc:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002e00:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002e02:	54 23       	ld.w %d3,[%a2]
80002e04:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002e08:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf1f.priority > 0) || (config->interruptConfig.rxf1f.typeOfService == IfxSrc_Tos_dma))
80002e0a:	b9 c2 0c 40 	ld.hu %d2,[%a12]268
80002e0e:	df 02 06 80 	jne %d2,0,80002e1a <IfxCan_Can_initNode+0x7b6>
80002e12:	19 c2 10 40 	ld.w %d2,[%a12]272
80002e16:	df 12 22 80 	jne %d2,1,80002e5a <IfxCan_Can_initNode+0x7f6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf1f, config->interruptConfig.rxf1f.interruptLine);
80002e1a:	19 c5 08 40 	ld.w %d5,[%a12]264
80002e1e:	3b 90 00 40 	mov %d4,9
80002e22:	60 a4       	mov.a %a4,%d10
80002e24:	6d ff 28 fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf1f.interruptLine);
80002e28:	19 c4 08 40 	ld.w %d4,[%a12]264
80002e2c:	d4 c4       	ld.a %a4,[%a12]
80002e2e:	6d ff 95 fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf1f.typeOfService, config->interruptConfig.rxf1f.priority);
80002e32:	19 c4 10 40 	ld.w %d4,[%a12]272
    src->B.SRPN = priority;
80002e36:	39 c2 0c 40 	ld.bu %d2,[%a12]268
80002e3a:	54 23       	ld.w %d3,[%a2]
80002e3c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002e40:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002e42:	54 23       	ld.w %d3,[%a2]
80002e44:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002e48:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002e4a:	54 23       	ld.w %d3,[%a2]
80002e4c:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002e50:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002e52:	54 23       	ld.w %d3,[%a2]
80002e54:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002e58:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf0f.priority > 0) || (config->interruptConfig.rxf0f.typeOfService == IfxSrc_Tos_dma))
80002e5a:	b9 c2 18 40 	ld.hu %d2,[%a12]280
80002e5e:	df 02 06 80 	jne %d2,0,80002e6a <IfxCan_Can_initNode+0x806>
80002e62:	19 c2 1c 40 	ld.w %d2,[%a12]284
80002e66:	df 12 22 80 	jne %d2,1,80002eaa <IfxCan_Can_initNode+0x846>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf0f, config->interruptConfig.rxf0f.interruptLine);
80002e6a:	19 c5 14 40 	ld.w %d5,[%a12]276
80002e6e:	3b a0 00 40 	mov %d4,10
80002e72:	60 a4       	mov.a %a4,%d10
80002e74:	6d ff 00 fb 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf0f.interruptLine);
80002e78:	19 c4 14 40 	ld.w %d4,[%a12]276
80002e7c:	d4 c4       	ld.a %a4,[%a12]
80002e7e:	6d ff 6d fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf0f.typeOfService, config->interruptConfig.rxf0f.priority);
80002e82:	19 c4 1c 40 	ld.w %d4,[%a12]284
    src->B.SRPN = priority;
80002e86:	39 c2 18 40 	ld.bu %d2,[%a12]280
80002e8a:	54 23       	ld.w %d3,[%a2]
80002e8c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002e90:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002e92:	54 23       	ld.w %d3,[%a2]
80002e94:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002e98:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002e9a:	54 23       	ld.w %d3,[%a2]
80002e9c:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002ea0:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002ea2:	54 23       	ld.w %d3,[%a2]
80002ea4:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002ea8:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf1n.priority > 0) || (config->interruptConfig.rxf1f.typeOfService == IfxSrc_Tos_dma))
80002eaa:	b9 c2 24 40 	ld.hu %d2,[%a12]292
80002eae:	df 02 06 80 	jne %d2,0,80002eba <IfxCan_Can_initNode+0x856>
80002eb2:	19 c2 10 40 	ld.w %d2,[%a12]272
80002eb6:	df 12 22 80 	jne %d2,1,80002efa <IfxCan_Can_initNode+0x896>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf1n, config->interruptConfig.rxf1n.interruptLine);
80002eba:	19 c5 20 40 	ld.w %d5,[%a12]288
80002ebe:	3b b0 00 40 	mov %d4,11
80002ec2:	60 a4       	mov.a %a4,%d10
80002ec4:	6d ff d8 fa 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf1n.interruptLine);
80002ec8:	19 c4 20 40 	ld.w %d4,[%a12]288
80002ecc:	d4 c4       	ld.a %a4,[%a12]
80002ece:	6d ff 45 fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf1n.typeOfService, config->interruptConfig.rxf1n.priority);
80002ed2:	19 c4 28 40 	ld.w %d4,[%a12]296
    src->B.SRPN = priority;
80002ed6:	39 c2 24 40 	ld.bu %d2,[%a12]292
80002eda:	54 23       	ld.w %d3,[%a2]
80002edc:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002ee0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002ee2:	54 23       	ld.w %d3,[%a2]
80002ee4:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002ee8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002eea:	54 23       	ld.w %d3,[%a2]
80002eec:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002ef0:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002ef2:	54 23       	ld.w %d3,[%a2]
80002ef4:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002ef8:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.rxf0n.priority > 0) || (config->interruptConfig.rxf0n.typeOfService == IfxSrc_Tos_dma))
80002efa:	b9 c2 30 40 	ld.hu %d2,[%a12]304
80002efe:	df 02 06 80 	jne %d2,0,80002f0a <IfxCan_Can_initNode+0x8a6>
80002f02:	19 c2 34 40 	ld.w %d2,[%a12]308
80002f06:	df 12 22 80 	jne %d2,1,80002f4a <IfxCan_Can_initNode+0x8e6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_rxf0n, config->interruptConfig.rxf0n.interruptLine);
80002f0a:	19 c5 2c 40 	ld.w %d5,[%a12]300
80002f0e:	3b c0 00 40 	mov %d4,12
80002f12:	60 a4       	mov.a %a4,%d10
80002f14:	6d ff b0 fa 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.rxf0n.interruptLine);
80002f18:	19 c4 2c 40 	ld.w %d4,[%a12]300
80002f1c:	d4 c4       	ld.a %a4,[%a12]
80002f1e:	6d ff 1d fb 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.rxf0n.typeOfService, config->interruptConfig.rxf0n.priority);
80002f22:	19 c4 34 40 	ld.w %d4,[%a12]308
    src->B.SRPN = priority;
80002f26:	39 c2 30 40 	ld.bu %d2,[%a12]304
80002f2a:	54 23       	ld.w %d3,[%a2]
80002f2c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002f30:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002f32:	54 23       	ld.w %d3,[%a2]
80002f34:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002f38:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002f3a:	54 23       	ld.w %d3,[%a2]
80002f3c:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002f40:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002f42:	54 23       	ld.w %d3,[%a2]
80002f44:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002f48:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.reti.priority > 0) || (config->interruptConfig.reti.typeOfService == IfxSrc_Tos_dma))
80002f4a:	b9 c2 3c 40 	ld.hu %d2,[%a12]316
80002f4e:	df 02 06 80 	jne %d2,0,80002f5a <IfxCan_Can_initNode+0x8f6>
80002f52:	19 c2 00 50 	ld.w %d2,[%a12]320
80002f56:	df 12 22 80 	jne %d2,1,80002f9a <IfxCan_Can_initNode+0x936>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_reti, config->interruptConfig.reti.interruptLine);
80002f5a:	19 c5 38 40 	ld.w %d5,[%a12]312
80002f5e:	3b d0 00 40 	mov %d4,13
80002f62:	60 a4       	mov.a %a4,%d10
80002f64:	6d ff 88 fa 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.reti.interruptLine);
80002f68:	19 c4 38 40 	ld.w %d4,[%a12]312
80002f6c:	d4 c4       	ld.a %a4,[%a12]
80002f6e:	6d ff f5 fa 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.reti.typeOfService, config->interruptConfig.reti.priority);
80002f72:	19 c4 00 50 	ld.w %d4,[%a12]320
    src->B.SRPN = priority;
80002f76:	39 c2 3c 40 	ld.bu %d2,[%a12]316
80002f7a:	54 23       	ld.w %d3,[%a2]
80002f7c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002f80:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002f82:	54 23       	ld.w %d3,[%a2]
80002f84:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002f88:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002f8a:	54 23       	ld.w %d3,[%a2]
80002f8c:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002f90:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002f92:	54 23       	ld.w %d3,[%a2]
80002f94:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002f98:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.traq.priority > 0) || (config->interruptConfig.traq.typeOfService == IfxSrc_Tos_dma))
80002f9a:	b9 c2 08 50 	ld.hu %d2,[%a12]328
80002f9e:	df 02 06 80 	jne %d2,0,80002faa <IfxCan_Can_initNode+0x946>
80002fa2:	19 c2 0c 50 	ld.w %d2,[%a12]332
80002fa6:	df 12 22 80 	jne %d2,1,80002fea <IfxCan_Can_initNode+0x986>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_traq, config->interruptConfig.traq.interruptLine);
80002faa:	19 c5 04 50 	ld.w %d5,[%a12]324
80002fae:	3b e0 00 40 	mov %d4,14
80002fb2:	60 a4       	mov.a %a4,%d10
80002fb4:	6d ff 60 fa 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.traq.interruptLine);
80002fb8:	19 c4 04 50 	ld.w %d4,[%a12]324
80002fbc:	d4 c4       	ld.a %a4,[%a12]
80002fbe:	6d ff cd fa 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.traq.typeOfService, config->interruptConfig.traq.priority);
80002fc2:	19 c4 0c 50 	ld.w %d4,[%a12]332
    src->B.SRPN = priority;
80002fc6:	39 c2 08 50 	ld.bu %d2,[%a12]328
80002fca:	54 23       	ld.w %d3,[%a2]
80002fcc:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80002fd0:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80002fd2:	54 23       	ld.w %d3,[%a2]
80002fd4:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80002fd8:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
80002fda:	54 23       	ld.w %d3,[%a2]
80002fdc:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80002fe0:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80002fe2:	54 23       	ld.w %d3,[%a2]
80002fe4:	b7 13 01 35 	insert %d3,%d3,1,10,1
80002fe8:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    if ((config->interruptConfig.traco.priority > 0) || (config->interruptConfig.traco.typeOfService == IfxSrc_Tos_dma))
80002fea:	b9 c2 14 50 	ld.hu %d2,[%a12]340
80002fee:	df 02 06 80 	jne %d2,0,80002ffa <IfxCan_Can_initNode+0x996>
80002ff2:	19 c2 18 50 	ld.w %d2,[%a12]344
80002ff6:	df 12 22 80 	jne %d2,1,8000303a <IfxCan_Can_initNode+0x9d6>
    {
        IfxCan_Node_setGroupInterruptLine(nodeSfr, IfxCan_InterruptGroup_traco, config->interruptConfig.traco.interruptLine);
80002ffa:	19 c5 10 50 	ld.w %d5,[%a12]336
80002ffe:	3b f0 00 40 	mov %d4,15
80003002:	60 a4       	mov.a %a4,%d10
80003004:	6d ff 38 fa 	call 80002474 <IfxCan_Node_setGroupInterruptLine>
        srcPointer = IfxCan_getSrcPointer(config->can, config->interruptConfig.traco.interruptLine);
80003008:	19 c4 10 50 	ld.w %d4,[%a12]336
8000300c:	d4 c4       	ld.a %a4,[%a12]
8000300e:	6d ff a5 fa 	call 80002558 <IfxCan_getSrcPointer>
        IfxSrc_init(srcPointer, config->interruptConfig.traco.typeOfService, config->interruptConfig.traco.priority);
80003012:	19 c4 18 50 	ld.w %d4,[%a12]344
    src->B.SRPN = priority;
80003016:	39 c2 14 50 	ld.bu %d2,[%a12]340
8000301a:	54 23       	ld.w %d3,[%a2]
8000301c:	37 23 08 30 	insert %d3,%d3,%d2,0,8
80003020:	74 23       	st.w [%a2],%d3
    src->B.TOS  = typOfService;
80003022:	54 23       	ld.w %d3,[%a2]
80003024:	37 43 83 35 	insert %d3,%d3,%d4,11,3
80003028:	74 23       	st.w [%a2],%d3
    src->B.CLRR = 1;
8000302a:	54 23       	ld.w %d3,[%a2]
8000302c:	b7 13 81 3c 	insert %d3,%d3,1,25,1
80003030:	74 23       	st.w [%a2],%d3
    src->B.SRE = 1;
80003032:	54 23       	ld.w %d3,[%a2]
80003034:	b7 13 01 35 	insert %d3,%d3,1,10,1
80003038:	74 23       	st.w [%a2],%d3
        IfxSrc_enable(srcPointer);
    }

    /* enable the selected interrupts */
    if (config->interruptConfig.rxFifo0NewMessageEnabled)
8000303a:	39 c2 00 20 	ld.bu %d2,[%a12]128
8000303e:	df 02 0e 00 	jeq %d2,0,8000305a <IfxCan_Can_initNode+0x9f6>
    node->IE.U = node->IE.U | (mask);
80003042:	8f a8 00 20 	sh %d2,%d8,10
80003046:	42 92       	add %d2,%d9
80003048:	bb 40 25 38 	mov.u %d3,33364
8000304c:	60 22       	mov.a %a2,%d2
8000304e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003052:	54 22       	ld.w %d2,[%a2]
80003054:	8f 12 40 21 	or %d2,%d2,1
80003058:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0NewMessage);
    }

    if (config->interruptConfig.rxFifo0WatermarkEnabled)
8000305a:	39 c2 01 20 	ld.bu %d2,[%a12]129
8000305e:	df 02 0e 00 	jeq %d2,0,8000307a <IfxCan_Can_initNode+0xa16>
80003062:	8f a8 00 20 	sh %d2,%d8,10
80003066:	42 92       	add %d2,%d9
80003068:	bb 40 25 38 	mov.u %d3,33364
8000306c:	60 22       	mov.a %a2,%d2
8000306e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003072:	54 22       	ld.w %d2,[%a2]
80003074:	8f 22 40 21 	or %d2,%d2,2
80003078:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0WatermarkReached);
    }

    if (config->interruptConfig.rxFifo0FullEnabled)
8000307a:	39 c2 02 20 	ld.bu %d2,[%a12]130
8000307e:	df 02 0e 00 	jeq %d2,0,8000309a <IfxCan_Can_initNode+0xa36>
80003082:	8f a8 00 20 	sh %d2,%d8,10
80003086:	42 92       	add %d2,%d9
80003088:	bb 40 25 38 	mov.u %d3,33364
8000308c:	60 22       	mov.a %a2,%d2
8000308e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003092:	54 22       	ld.w %d2,[%a2]
80003094:	8f 42 40 21 	or %d2,%d2,4
80003098:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0Full);
    }

    if (config->interruptConfig.rxFifo0MessageLostEnabled)
8000309a:	39 c2 03 20 	ld.bu %d2,[%a12]131
8000309e:	df 02 0e 00 	jeq %d2,0,800030ba <IfxCan_Can_initNode+0xa56>
800030a2:	8f a8 00 20 	sh %d2,%d8,10
800030a6:	42 92       	add %d2,%d9
800030a8:	bb 40 25 38 	mov.u %d3,33364
800030ac:	60 22       	mov.a %a2,%d2
800030ae:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800030b2:	54 22       	ld.w %d2,[%a2]
800030b4:	8f 82 40 21 	or %d2,%d2,8
800030b8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo0MessageLost);
    }

    if (config->interruptConfig.rxFifo1NewMessageEnabled)
800030ba:	39 c2 04 20 	ld.bu %d2,[%a12]132
800030be:	df 02 0e 00 	jeq %d2,0,800030da <IfxCan_Can_initNode+0xa76>
800030c2:	8f a8 00 20 	sh %d2,%d8,10
800030c6:	42 92       	add %d2,%d9
800030c8:	bb 40 25 38 	mov.u %d3,33364
800030cc:	60 22       	mov.a %a2,%d2
800030ce:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800030d2:	54 22       	ld.w %d2,[%a2]
800030d4:	8f 02 41 21 	or %d2,%d2,16
800030d8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1NewMessage);
    }

    if (config->interruptConfig.rxFifo1WatermarkEnabled)
800030da:	39 c2 05 20 	ld.bu %d2,[%a12]133
800030de:	df 02 0e 00 	jeq %d2,0,800030fa <IfxCan_Can_initNode+0xa96>
800030e2:	8f a8 00 20 	sh %d2,%d8,10
800030e6:	42 92       	add %d2,%d9
800030e8:	bb 40 25 38 	mov.u %d3,33364
800030ec:	60 22       	mov.a %a2,%d2
800030ee:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800030f2:	54 22       	ld.w %d2,[%a2]
800030f4:	8f 02 42 21 	or %d2,%d2,32
800030f8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1WatermarkReached);
    }

    if (config->interruptConfig.rxFifo1FullEnabled)
800030fa:	39 c2 06 20 	ld.bu %d2,[%a12]134
800030fe:	df 02 0e 00 	jeq %d2,0,8000311a <IfxCan_Can_initNode+0xab6>
80003102:	8f a8 00 20 	sh %d2,%d8,10
80003106:	42 92       	add %d2,%d9
80003108:	bb 40 25 38 	mov.u %d3,33364
8000310c:	60 22       	mov.a %a2,%d2
8000310e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003112:	54 22       	ld.w %d2,[%a2]
80003114:	8f 02 44 21 	or %d2,%d2,64
80003118:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1Full);
    }

    if (config->interruptConfig.rxFifo1MessageLostEnabled)
8000311a:	39 c2 07 20 	ld.bu %d2,[%a12]135
8000311e:	df 02 0e 00 	jeq %d2,0,8000313a <IfxCan_Can_initNode+0xad6>
80003122:	8f a8 00 20 	sh %d2,%d8,10
80003126:	42 92       	add %d2,%d9
80003128:	bb 40 25 38 	mov.u %d3,33364
8000312c:	60 22       	mov.a %a2,%d2
8000312e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003132:	54 22       	ld.w %d2,[%a2]
80003134:	8f 02 48 21 	or %d2,%d2,128
80003138:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_rxFifo1MessageLost);
    }

    if (config->interruptConfig.highPriorityMessageEnabled)
8000313a:	39 c2 08 20 	ld.bu %d2,[%a12]136
8000313e:	df 02 0e 00 	jeq %d2,0,8000315a <IfxCan_Can_initNode+0xaf6>
80003142:	8f a8 00 20 	sh %d2,%d8,10
80003146:	42 92       	add %d2,%d9
80003148:	bb 40 25 38 	mov.u %d3,33364
8000314c:	60 22       	mov.a %a2,%d2
8000314e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003152:	54 22       	ld.w %d2,[%a2]
80003154:	8f 02 50 21 	or %d2,%d2,256
80003158:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_highPriorityMessage);
    }

    if (config->interruptConfig.transmissionCompletedEnabled)
8000315a:	39 c2 09 20 	ld.bu %d2,[%a12]137
8000315e:	df 02 0e 00 	jeq %d2,0,8000317a <IfxCan_Can_initNode+0xb16>
80003162:	8f a8 00 20 	sh %d2,%d8,10
80003166:	42 92       	add %d2,%d9
80003168:	bb 40 25 38 	mov.u %d3,33364
8000316c:	60 22       	mov.a %a2,%d2
8000316e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003172:	54 22       	ld.w %d2,[%a2]
80003174:	b7 f2 81 24 	insert %d2,%d2,15,9,1
80003178:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_transmissionCompleted);
    }

    if (config->interruptConfig.transmissionCancellationFinishedEnabled)
8000317a:	39 c2 0a 20 	ld.bu %d2,[%a12]138
8000317e:	df 02 0e 00 	jeq %d2,0,8000319a <IfxCan_Can_initNode+0xb36>
80003182:	8f a8 00 20 	sh %d2,%d8,10
80003186:	42 92       	add %d2,%d9
80003188:	bb 40 25 38 	mov.u %d3,33364
8000318c:	60 22       	mov.a %a2,%d2
8000318e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003192:	54 22       	ld.w %d2,[%a2]
80003194:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80003198:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_transmissionCancellationFinished);
    }

    if (config->interruptConfig.txFifoEmptyEnabled)
8000319a:	39 c2 0b 20 	ld.bu %d2,[%a12]139
8000319e:	df 02 0e 00 	jeq %d2,0,800031ba <IfxCan_Can_initNode+0xb56>
800031a2:	8f a8 00 20 	sh %d2,%d8,10
800031a6:	42 92       	add %d2,%d9
800031a8:	bb 40 25 38 	mov.u %d3,33364
800031ac:	60 22       	mov.a %a2,%d2
800031ae:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031b2:	54 22       	ld.w %d2,[%a2]
800031b4:	b7 f2 81 25 	insert %d2,%d2,15,11,1
800031b8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txFifoEmpty);
    }

    if (config->interruptConfig.txEventFifoNewEntryEnabled)
800031ba:	39 c2 0c 20 	ld.bu %d2,[%a12]140
800031be:	df 02 0e 00 	jeq %d2,0,800031da <IfxCan_Can_initNode+0xb76>
800031c2:	8f a8 00 20 	sh %d2,%d8,10
800031c6:	42 92       	add %d2,%d9
800031c8:	bb 40 25 38 	mov.u %d3,33364
800031cc:	60 22       	mov.a %a2,%d2
800031ce:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031d2:	54 22       	ld.w %d2,[%a2]
800031d4:	b7 f2 01 26 	insert %d2,%d2,15,12,1
800031d8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoNewEntry);
    }

    if (config->interruptConfig.txEventFifoWatermarkEnabled)
800031da:	39 c2 0d 20 	ld.bu %d2,[%a12]141
800031de:	df 02 0e 00 	jeq %d2,0,800031fa <IfxCan_Can_initNode+0xb96>
800031e2:	8f a8 00 20 	sh %d2,%d8,10
800031e6:	42 92       	add %d2,%d9
800031e8:	bb 40 25 38 	mov.u %d3,33364
800031ec:	60 22       	mov.a %a2,%d2
800031ee:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800031f2:	54 22       	ld.w %d2,[%a2]
800031f4:	b7 f2 81 26 	insert %d2,%d2,15,13,1
800031f8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoWatermarkReached);
    }

    if (config->interruptConfig.txEventFifoFullEnabled)
800031fa:	39 c2 0e 20 	ld.bu %d2,[%a12]142
800031fe:	df 02 0e 00 	jeq %d2,0,8000321a <IfxCan_Can_initNode+0xbb6>
80003202:	8f a8 00 20 	sh %d2,%d8,10
80003206:	42 92       	add %d2,%d9
80003208:	bb 40 25 38 	mov.u %d3,33364
8000320c:	60 22       	mov.a %a2,%d2
8000320e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003212:	54 22       	ld.w %d2,[%a2]
80003214:	b7 f2 01 27 	insert %d2,%d2,15,14,1
80003218:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoFull);
    }

    if (config->interruptConfig.txEventFifoEventLostEnabled)
8000321a:	39 c2 0f 20 	ld.bu %d2,[%a12]143
8000321e:	df 02 0e 00 	jeq %d2,0,8000323a <IfxCan_Can_initNode+0xbd6>
80003222:	8f a8 00 20 	sh %d2,%d8,10
80003226:	42 92       	add %d2,%d9
80003228:	bb 40 25 38 	mov.u %d3,33364
8000322c:	60 22       	mov.a %a2,%d2
8000322e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003232:	54 22       	ld.w %d2,[%a2]
80003234:	b7 f2 81 27 	insert %d2,%d2,15,15,1
80003238:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_txEventFifoEventLost);
    }

    if (config->interruptConfig.timestampWraparoundEnabled)
8000323a:	39 c2 10 20 	ld.bu %d2,[%a12]144
8000323e:	df 02 0e 00 	jeq %d2,0,8000325a <IfxCan_Can_initNode+0xbf6>
80003242:	8f a8 00 20 	sh %d2,%d8,10
80003246:	42 92       	add %d2,%d9
80003248:	bb 40 25 38 	mov.u %d3,33364
8000324c:	60 22       	mov.a %a2,%d2
8000324e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003252:	54 22       	ld.w %d2,[%a2]
80003254:	b7 f2 01 28 	insert %d2,%d2,15,16,1
80003258:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_timestampWraparound);
    }

    if (config->interruptConfig.messageRAMAccessFailureEnabled)
8000325a:	39 c2 11 20 	ld.bu %d2,[%a12]145
8000325e:	df 02 0e 00 	jeq %d2,0,8000327a <IfxCan_Can_initNode+0xc16>
80003262:	8f a8 00 20 	sh %d2,%d8,10
80003266:	42 92       	add %d2,%d9
80003268:	bb 40 25 38 	mov.u %d3,33364
8000326c:	60 22       	mov.a %a2,%d2
8000326e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003272:	54 22       	ld.w %d2,[%a2]
80003274:	b7 f2 81 28 	insert %d2,%d2,15,17,1
80003278:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_messageRAMAccessFailure);
    }

    if (config->interruptConfig.timeoutOccurredEnabled)
8000327a:	39 c2 12 20 	ld.bu %d2,[%a12]146
8000327e:	df 02 0e 00 	jeq %d2,0,8000329a <IfxCan_Can_initNode+0xc36>
80003282:	8f a8 00 20 	sh %d2,%d8,10
80003286:	42 92       	add %d2,%d9
80003288:	bb 40 25 38 	mov.u %d3,33364
8000328c:	60 22       	mov.a %a2,%d2
8000328e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003292:	54 22       	ld.w %d2,[%a2]
80003294:	b7 f2 01 29 	insert %d2,%d2,15,18,1
80003298:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_timeoutOccurred);
    }

    if (config->interruptConfig.messageStoredToDedicatedRxBufferEnabled)
8000329a:	39 c2 13 20 	ld.bu %d2,[%a12]147
8000329e:	df 02 0e 00 	jeq %d2,0,800032ba <IfxCan_Can_initNode+0xc56>
800032a2:	8f a8 00 20 	sh %d2,%d8,10
800032a6:	42 92       	add %d2,%d9
800032a8:	bb 40 25 38 	mov.u %d3,33364
800032ac:	60 22       	mov.a %a2,%d2
800032ae:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032b2:	54 22       	ld.w %d2,[%a2]
800032b4:	b7 f2 81 29 	insert %d2,%d2,15,19,1
800032b8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_messageStoredToDedicatedRxBuffer);
    }

    if (config->interruptConfig.errorLoggingOverflowEnabled)
800032ba:	39 c2 14 20 	ld.bu %d2,[%a12]148
800032be:	df 02 0e 00 	jeq %d2,0,800032da <IfxCan_Can_initNode+0xc76>
800032c2:	8f a8 00 20 	sh %d2,%d8,10
800032c6:	42 92       	add %d2,%d9
800032c8:	bb 40 25 38 	mov.u %d3,33364
800032cc:	60 22       	mov.a %a2,%d2
800032ce:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032d2:	54 22       	ld.w %d2,[%a2]
800032d4:	b7 f2 01 2b 	insert %d2,%d2,15,22,1
800032d8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_errorLoggingOverflow);
    }

    if (config->interruptConfig.errorPassiveEnabled)
800032da:	39 c2 15 20 	ld.bu %d2,[%a12]149
800032de:	df 02 0e 00 	jeq %d2,0,800032fa <IfxCan_Can_initNode+0xc96>
800032e2:	8f a8 00 20 	sh %d2,%d8,10
800032e6:	42 92       	add %d2,%d9
800032e8:	bb 40 25 38 	mov.u %d3,33364
800032ec:	60 22       	mov.a %a2,%d2
800032ee:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800032f2:	54 22       	ld.w %d2,[%a2]
800032f4:	b7 f2 81 2b 	insert %d2,%d2,15,23,1
800032f8:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_errorPassive);
    }

    if (config->interruptConfig.warningStatusEnabled)
800032fa:	39 c2 16 20 	ld.bu %d2,[%a12]150
800032fe:	df 02 0e 00 	jeq %d2,0,8000331a <IfxCan_Can_initNode+0xcb6>
80003302:	8f a8 00 20 	sh %d2,%d8,10
80003306:	42 92       	add %d2,%d9
80003308:	bb 40 25 38 	mov.u %d3,33364
8000330c:	60 22       	mov.a %a2,%d2
8000330e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003312:	54 22       	ld.w %d2,[%a2]
80003314:	b7 f2 01 2c 	insert %d2,%d2,15,24,1
80003318:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_warningStatus);
    }

    if (config->interruptConfig.busOffStatusEnabled)
8000331a:	39 c2 17 20 	ld.bu %d2,[%a12]151
8000331e:	df 02 0e 00 	jeq %d2,0,8000333a <IfxCan_Can_initNode+0xcd6>
80003322:	8f a8 00 20 	sh %d2,%d8,10
80003326:	42 92       	add %d2,%d9
80003328:	bb 40 25 38 	mov.u %d3,33364
8000332c:	60 22       	mov.a %a2,%d2
8000332e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003332:	54 22       	ld.w %d2,[%a2]
80003334:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
80003338:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_busOffStatus);
    }

    if (config->interruptConfig.watchdogEnabled)
8000333a:	39 c2 18 20 	ld.bu %d2,[%a12]152
8000333e:	df 02 0e 00 	jeq %d2,0,8000335a <IfxCan_Can_initNode+0xcf6>
80003342:	8f a8 00 20 	sh %d2,%d8,10
80003346:	42 92       	add %d2,%d9
80003348:	bb 40 25 38 	mov.u %d3,33364
8000334c:	60 22       	mov.a %a2,%d2
8000334e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003352:	54 22       	ld.w %d2,[%a2]
80003354:	b7 f2 01 2d 	insert %d2,%d2,15,26,1
80003358:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_watchdog);
    }

    if (config->interruptConfig.protocolErrorArbitrationEnabled)
8000335a:	39 c2 19 20 	ld.bu %d2,[%a12]153
8000335e:	df 02 0e 00 	jeq %d2,0,8000337a <IfxCan_Can_initNode+0xd16>
80003362:	8f a8 00 20 	sh %d2,%d8,10
80003366:	42 92       	add %d2,%d9
80003368:	bb 40 25 38 	mov.u %d3,33364
8000336c:	60 22       	mov.a %a2,%d2
8000336e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003372:	54 22       	ld.w %d2,[%a2]
80003374:	b7 f2 81 2d 	insert %d2,%d2,15,27,1
80003378:	74 22       	st.w [%a2],%d2
    {
        IfxCan_Node_enableInterrupt(nodeSfr, IfxCan_Interrupt_protocolErrorArbitration);
    }

    if (config->interruptConfig.protocolErrorDataEnabled)
8000337a:	39 c2 1a 20 	ld.bu %d2,[%a12]154
8000337e:	df 02 0e 00 	jeq %d2,0,8000339a <IfxCan_Can_initNode+0xd36>
80003382:	8f a8 00 20 	sh %d2,%d8,10
80003386:	42 92       	add %d2,%d9
80003388:	bb 40 25 38 	mov.u %d3,33364
8000338c:	60 22       	mov.a %a2,%d2
8000338e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003392:	54 22       	ld.w %d2,[%a2]
80003394:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80003398:	74 22       	st.w [%a2],%d2
    node->CCCR.B.CCE = 0;
8000339a:	8f a8 00 20 	sh %d2,%d8,10
8000339e:	42 92       	add %d2,%d9
800033a0:	bb 80 21 38 	mov.u %d3,33304
800033a4:	60 22       	mov.a %a2,%d2
800033a6:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800033aa:	54 23       	ld.w %d3,[%a2]
800033ac:	8f 23 c0 31 	andn %d3,%d3,2
800033b0:	74 23       	st.w [%a2],%d3
    while (node->CCCR.B.CCE != 0)
800033b2:	8f a8 00 30 	sh %d3,%d8,10
800033b6:	42 93       	add %d3,%d9
800033b8:	bb 80 21 48 	mov.u %d4,33304
800033bc:	60 32       	mov.a %a2,%d3
800033be:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800033c2:	54 23       	ld.w %d3,[%a2]
800033c4:	6f 13 f7 ff 	jnz.t %d3,1,800033b2 <IfxCan_Can_initNode+0xd4e>
    node->CCCR.B.INIT = 0;
800033c8:	8f a8 00 20 	sh %d2,%d8,10
800033cc:	42 92       	add %d2,%d9
800033ce:	60 22       	mov.a %a2,%d2
800033d0:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800033d4:	54 23       	ld.w %d3,[%a2]
800033d6:	8f 13 c0 31 	andn %d3,%d3,1
800033da:	74 23       	st.w [%a2],%d3
    while (node->CCCR.B.INIT != 0)
800033dc:	8f a8 00 30 	sh %d3,%d8,10
800033e0:	42 93       	add %d3,%d9
800033e2:	bb 80 21 48 	mov.u %d4,33304
800033e6:	60 32       	mov.a %a2,%d3
800033e8:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
800033ec:	54 23       	ld.w %d3,[%a2]
800033ee:	6f 03 f7 ff 	jnz.t %d3,0,800033dc <IfxCan_Can_initNode+0xd78>

    /* disable configuration change CCCR.CCE = 0 */
    IfxCan_Node_disableConfigurationChange(nodeSfr);

    return status;
}
800033f2:	02 b2       	mov %d2,%d11
800033f4:	00 90       	ret 
        else if ((config->txConfig.txMode == IfxCan_TxMode_fifo) || (config->txConfig.txMode == IfxCan_TxMode_queue))
800033f6:	ff 22 87 fa 	jge.u %d2,2,80002904 <IfxCan_Can_initNode+0x2a0>
        node->TX.BC.B.TFQM = mode;
800033fa:	8f a8 00 30 	sh %d3,%d8,10
800033fe:	42 93       	add %d3,%d9
80003400:	bb 00 2c 48 	mov.u %d4,33472
80003404:	60 32       	mov.a %a2,%d3
80003406:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
8000340a:	54 23       	ld.w %d3,[%a2]
8000340c:	67 23 1e 30 	ins.t %d3,%d3,30,%d2,0
80003410:	74 23       	st.w [%a2],%d3
            IfxCan_Node_setTransmitFifoQueueSize(nodeSfr, config->txConfig.txFifoQueueSize);
80003412:	39 c3 35 00 	ld.bu %d3,[%a12]53
    node->TX.BC.B.TFQS = number;
80003416:	54 22       	ld.w %d2,[%a2]
80003418:	37 32 06 2c 	insert %d2,%d2,%d3,24,6
8000341c:	74 22       	st.w [%a2],%d2
            for (id = 0; id < config->txConfig.txFifoQueueSize; ++id)
8000341e:	82 02       	mov %d2,0
80003420:	1d 00 0f 00 	j 8000343e <IfxCan_Can_initNode+0xdda>
    node->TX.BTIE.U = node->TX.BTIE.U | (mask);
80003424:	8f a8 00 30 	sh %d3,%d8,10
80003428:	42 93       	add %d3,%d9
8000342a:	bb 00 2e 48 	mov.u %d4,33504
8000342e:	60 32       	mov.a %a2,%d3
80003430:	01 24 00 26 	addsc.a %a2,%a2,%d4,0
80003434:	54 23       	ld.w %d3,[%a2]
80003436:	d7 13 01 32 	insert %d3,%d3,1,%d2,1
8000343a:	74 23       	st.w [%a2],%d3
8000343c:	c2 12       	add %d2,1
8000343e:	39 c3 35 00 	ld.bu %d3,[%a12]53
80003442:	3f 32 f1 ff 	jlt.u %d2,%d3,80003424 <IfxCan_Can_initNode+0xdc0>
80003446:	1d ff 5f fa 	j 80002904 <IfxCan_Can_initNode+0x2a0>
    node->GFC.B.RRFS = 1U;
8000344a:	bb 00 28 38 	mov.u %d3,33408
8000344e:	60 42       	mov.a %a2,%d4
80003450:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
80003454:	54 22       	ld.w %d2,[%a2]
80003456:	b7 12 81 20 	insert %d2,%d2,1,1,1
8000345a:	74 22       	st.w [%a2],%d2
}
8000345c:	1d ff 44 fb 	j 80002ae4 <IfxCan_Can_initNode+0x480>
            IfxCan_Node_setExtendedFilterListStartAddress(nodeSfr, config->messageRAM.extendedFilterListStartAddress);
80003460:	b9 c3 32 10 	ld.hu %d3,[%a12]114
    node->XIDFC.B.FLESA = address >> 2;
80003464:	06 e3       	sh %d3,-2
80003466:	8f a8 00 40 	sh %d4,%d8,10
8000346a:	42 94       	add %d4,%d9
8000346c:	bb 80 28 28 	mov.u %d2,33416
80003470:	60 42       	mov.a %a2,%d4
80003472:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003476:	54 22       	ld.w %d2,[%a2]
80003478:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
8000347c:	74 22       	st.w [%a2],%d2
            IfxCan_Node_setExtendedFilterListSize(nodeSfr, config->filterConfig.extendedListSize);
8000347e:	39 c3 05 10 	ld.bu %d3,[%a12]69
    node->XIDFC.B.LSE = size;
80003482:	54 22       	ld.w %d2,[%a2]
80003484:	37 32 07 28 	insert %d2,%d2,%d3,16,7
80003488:	74 22       	st.w [%a2],%d2
            IfxCan_Node_configureExtendedFilterForNonMatchingFrames(nodeSfr, config->filterConfig.extendedFilterForNonMatchingFrames);
8000348a:	19 c3 0c 10 	ld.w %d3,[%a12]76
    node->GFC.B.ANFE = filter;
8000348e:	bb 00 28 28 	mov.u %d2,33408
80003492:	60 42       	mov.a %a2,%d4
80003494:	01 22 00 26 	addsc.a %a2,%a2,%d2,0
80003498:	54 22       	ld.w %d2,[%a2]
8000349a:	37 32 02 21 	insert %d2,%d2,%d3,2,2
8000349e:	74 22       	st.w [%a2],%d2
            if (config->filterConfig.rejectRemoteFramesWithExtendedId == 1U)
800034a0:	39 c2 07 10 	ld.bu %d2,[%a12]71
800034a4:	df 12 25 fb 	jne %d2,1,80002aee <IfxCan_Can_initNode+0x48a>
    node->GFC.B.RRFE = 1U;
800034a8:	bb 00 28 38 	mov.u %d3,33408
800034ac:	60 42       	mov.a %a2,%d4
800034ae:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
800034b2:	54 22       	ld.w %d2,[%a2]
800034b4:	b7 12 01 20 	insert %d2,%d2,1,0,1
800034b8:	74 22       	st.w [%a2],%d2
}
800034ba:	1d ff 1a fb 	j 80002aee <IfxCan_Can_initNode+0x48a>
    boolean    status  = 0;
800034be:	82 0b       	mov %d11,0
800034c0:	1d ff 25 fb 	j 80002b0a <IfxCan_Can_initNode+0x4a6>
800034c4:	82 0b       	mov %d11,0
800034c6:	1d ff 32 fb 	j 80002b2a <IfxCan_Can_initNode+0x4c6>

800034ca <IfxCan_Can_initNodeConfig>:


void IfxCan_Can_initNodeConfig(IfxCan_Can_NodeConfig *config, IfxCan_Can *can)
{
800034ca:	40 ae       	mov.aa %a14,%sp
800034cc:	d9 aa d8 af 	lea %sp,[%sp]-360
800034d0:	40 4f       	mov.aa %a15,%a4
800034d2:	40 5c       	mov.aa %a12,%a5
    const IfxCan_Can_NodeConfig defaultConfig = {
800034d4:	d9 ed dc af 	lea %a13,[%a14]-356
800034d8:	3b 40 16 50 	mov %d5,356
800034dc:	82 04       	mov %d4,0
800034de:	40 d4       	mov.aa %a4,%a13
800034e0:	6d 00 a3 06 	call 80004226 <memset>
800034e4:	82 32       	mov %d2,3
800034e6:	59 e2 e4 af 	st.w [%a14]-348,%d2
800034ea:	7b 80 00 30 	movh %d3,8
800034ee:	1b 03 12 3a 	addi %d3,%d3,-24288
800034f2:	59 e3 f0 af 	st.w [%a14]-336,%d3
800034f6:	3b 00 f4 31 	mov %d3,8000
800034fa:	f9 e3 f4 af 	st.h [%a14]-332,%d3
800034fe:	f9 e2 f6 af 	st.h [%a14]-330,%d2
80003502:	e9 e2 fa af 	st.b [%a14]-326,%d2
80003506:	3b a0 00 40 	mov %d4,10
8000350a:	e9 e4 fb af 	st.b [%a14]-325,%d4
8000350e:	7b f0 00 50 	movh %d5,15
80003512:	1b 05 24 54 	addi %d5,%d5,16960
80003516:	59 e5 fc af 	st.w [%a14]-324,%d5
8000351a:	f9 e3 c0 bf 	st.h [%a14]-320,%d3
8000351e:	f9 e2 c2 bf 	st.h [%a14]-318,%d2
80003522:	82 13       	mov %d3,1
80003524:	f9 e3 c4 bf 	st.h [%a14]-316,%d3
80003528:	e9 e2 c6 bf 	st.b [%a14]-314,%d2
8000352c:	e9 e4 c7 bf 	st.b [%a14]-313,%d4
80003530:	82 22       	mov %d2,2
80003532:	59 e2 cc bf 	st.w [%a14]-308,%d2
80003536:	e9 e2 d0 bf 	st.b [%a14]-304,%d2
8000353a:	e9 e2 e0 bf 	st.b [%a14]-288,%d2
8000353e:	54 c2       	ld.w %d2,[%a12]
80003540:	59 e2 c8 cf 	st.w [%a14]-248,%d2
80003544:	3b 00 08 20 	mov %d2,128
80003548:	f9 e2 ce cf 	st.h [%a14]-242,%d2
8000354c:	3b 00 10 20 	mov %d2,256
80003550:	f9 e2 d0 cf 	st.h [%a14]-240,%d2
80003554:	3b 00 20 20 	mov %d2,512
80003558:	f9 e2 d2 cf 	st.h [%a14]-238,%d2
8000355c:	3b 00 30 20 	mov %d2,768
80003560:	f9 e2 d4 cf 	st.h [%a14]-236,%d2
80003564:	3b 00 40 20 	mov %d2,1024
80003568:	f9 e2 d6 cf 	st.h [%a14]-234,%d2
8000356c:	3b 00 44 20 	mov %d2,1088
80003570:	f9 e2 d8 cf 	st.h [%a14]-232,%d2
80003574:	e9 e3 fd ff 	st.b [%a14]-3,%d3
        .busLoopbackEnabled       = FALSE,
        .calculateBitTimingValues = TRUE
    };

    /* Default Configuration */
    *config = defaultConfig;
80003578:	40 f2       	mov.aa %a2,%a15
8000357a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000357e:	89 24 48 01 	st.d [%a2+]8,%e4
80003582:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003586:	89 24 48 01 	st.d [%a2+]8,%e4
8000358a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000358e:	89 24 48 01 	st.d [%a2+]8,%e4
80003592:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003596:	89 24 48 01 	st.d [%a2+]8,%e4
8000359a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000359e:	89 24 48 01 	st.d [%a2+]8,%e4
800035a2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035a6:	89 24 48 01 	st.d [%a2+]8,%e4
800035aa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035ae:	89 24 48 01 	st.d [%a2+]8,%e4
800035b2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035b6:	89 24 48 01 	st.d [%a2+]8,%e4
800035ba:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035be:	89 24 48 01 	st.d [%a2+]8,%e4
800035c2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035c6:	89 24 48 01 	st.d [%a2+]8,%e4
800035ca:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035ce:	89 24 48 01 	st.d [%a2+]8,%e4
800035d2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035d6:	89 24 48 01 	st.d [%a2+]8,%e4
800035da:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035de:	89 24 48 01 	st.d [%a2+]8,%e4
800035e2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035e6:	89 24 48 01 	st.d [%a2+]8,%e4
800035ea:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035ee:	89 24 48 01 	st.d [%a2+]8,%e4
800035f2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035f6:	89 24 48 01 	st.d [%a2+]8,%e4
800035fa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800035fe:	89 24 48 01 	st.d [%a2+]8,%e4
80003602:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003606:	89 24 48 01 	st.d [%a2+]8,%e4
8000360a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000360e:	89 24 48 01 	st.d [%a2+]8,%e4
80003612:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003616:	89 24 48 01 	st.d [%a2+]8,%e4
8000361a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000361e:	89 24 48 01 	st.d [%a2+]8,%e4
80003622:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003626:	89 24 48 01 	st.d [%a2+]8,%e4
8000362a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000362e:	89 24 48 01 	st.d [%a2+]8,%e4
80003632:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003636:	89 24 48 01 	st.d [%a2+]8,%e4
8000363a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000363e:	89 24 48 01 	st.d [%a2+]8,%e4
80003642:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003646:	89 24 48 01 	st.d [%a2+]8,%e4
8000364a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000364e:	89 24 48 01 	st.d [%a2+]8,%e4
80003652:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003656:	89 24 48 01 	st.d [%a2+]8,%e4
8000365a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000365e:	89 24 48 01 	st.d [%a2+]8,%e4
80003662:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003666:	89 24 48 01 	st.d [%a2+]8,%e4
8000366a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000366e:	89 24 48 01 	st.d [%a2+]8,%e4
80003672:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003676:	89 24 48 01 	st.d [%a2+]8,%e4
8000367a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000367e:	89 24 48 01 	st.d [%a2+]8,%e4
80003682:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003686:	89 24 48 01 	st.d [%a2+]8,%e4
8000368a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000368e:	89 24 48 01 	st.d [%a2+]8,%e4
80003692:	09 d4 48 01 	ld.d %e4,[%a13+]8
80003696:	89 24 48 01 	st.d [%a2+]8,%e4
8000369a:	09 d4 48 01 	ld.d %e4,[%a13+]8
8000369e:	89 24 48 01 	st.d [%a2+]8,%e4
800036a2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036a6:	89 24 48 01 	st.d [%a2+]8,%e4
800036aa:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036ae:	89 24 48 01 	st.d [%a2+]8,%e4
800036b2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036b6:	89 24 48 01 	st.d [%a2+]8,%e4
800036ba:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036be:	89 24 48 01 	st.d [%a2+]8,%e4
800036c2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036c6:	89 24 48 01 	st.d [%a2+]8,%e4
800036ca:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036ce:	89 24 48 01 	st.d [%a2+]8,%e4
800036d2:	09 d4 48 01 	ld.d %e4,[%a13+]8
800036d6:	89 24 48 01 	st.d [%a2+]8,%e4
800036da:	44 d4       	ld.w %d4,[%a13+]
800036dc:	64 24       	st.w [%a2+],%d4

    /* take over module pointer */
    config->can = can->can;
800036de:	54 c2       	ld.w %d2,[%a12]
800036e0:	68 02       	st.w [%a15]0,%d2
}
800036e2:	00 90       	ret 

800036e4 <IfxCan_Can_readMessage>:


void IfxCan_Can_readMessage(IfxCan_Can_Node *node, IfxCan_Message *message, uint32 *data)
{
800036e4:	40 ae       	mov.aa %a14,%sp
800036e6:	40 4d       	mov.aa %a13,%a4
800036e8:	40 5c       	mov.aa %a12,%a5
800036ea:	80 69       	mov.d %d9,%a6
    IfxCan_RxBufferId bufferId = IfxCan_RxBufferId_0;

    Ifx_CAN_RXMSG    *rxBufferElement;

    if ((message->readFromRxFifo0) || (message->readFromRxFifo1))
800036ec:	19 52 1c 00 	ld.w %d2,[%a5]28
800036f0:	b7 02 10 20 	insert %d2,%d2,0,0,16
800036f4:	df 02 5a 00 	jeq %d2,0,800037a8 <IfxCan_Can_readMessage+0xc4>
    {
        if (message->readFromRxFifo0)
800036f8:	39 52 1e 00 	ld.bu %d2,[%a5]30
800036fc:	df 02 46 00 	jeq %d2,0,80003788 <IfxCan_Can_readMessage+0xa4>
        {
            /* get the Tx FIFO 0 ELement address */
            bufferId        = IfxCan_Node_getRxFifo0GetIndex(node->node);
80003700:	99 44 04 00 	ld.a %a4,[%a4]4
    return (IfxCan_RxBufferId)node->RX.F0S.B.F0GI;
80003704:	19 48 24 60 	ld.w %d8,[%a4]420
80003708:	37 08 66 84 	extr.u %d8,%d8,8,6
            rxBufferElement = IfxCan_Node_getRxFifo0ElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxFifo0StartAddress, bufferId);
8000370c:	02 86       	mov %d6,%d8
8000370e:	b9 d5 14 00 	ld.hu %d5,[%a13]20
80003712:	19 d4 0c 00 	ld.w %d4,[%a13]12
80003716:	6d ff df f3 	call 80001ed4 <IfxCan_Node_getRxFifo0ElementAddress>
8000371a:	40 2f       	mov.aa %a15,%a2
    IfxCan_MessageIdLength messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
8000371c:	48 03       	ld.w %d3,[%a15]0
    return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
8000371e:	48 02       	ld.w %d2,[%a15]0
80003720:	37 02 7d 20 	extr.u %d2,%d2,0,29
80003724:	ef e3 4f 00 	jz.t %d3,30,800037c2 <IfxCan_Can_readMessage+0xde>
80003728:	82 04       	mov %d4,0
8000372a:	8b 04 00 31 	rsub %d3,%d4,0
8000372e:	0f 32 20 30 	shas %d3,%d2,%d3
        bufferId        = (IfxCan_RxBufferId)message->bufferNumber;
        rxBufferElement = IfxCan_Node_getRxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxBuffersStartAddress, bufferId);
    }

    /*get message ID */
    message->messageId = IfxCan_Node_getMesssageId(rxBufferElement);
80003732:	59 c3 04 00 	st.w [%a12]4,%d3

    /* get message ID length */
    message->messageIdLength = (IfxCan_MessageIdLength)rxBufferElement->R0.B.XTD;
80003736:	48 02       	ld.w %d2,[%a15]0
80003738:	37 02 61 2f 	extr.u %d2,%d2,30,1
8000373c:	59 c2 0c 00 	st.w [%a12]12,%d2
    return (IfxCan_DataLengthCode)rxBufferElement->R1.B.DLC;
80003740:	48 12       	ld.w %d2,[%a15]4
80003742:	37 02 64 28 	extr.u %d2,%d2,16,4

    /* get data length code*/
    message->dataLengthCode = (IfxCan_DataLengthCode)IfxCan_Node_getDataLengthCode(rxBufferElement);
80003746:	59 c2 14 00 	st.w [%a12]20,%d2

    /* get CAN frame mode of operation */
    message->frameMode = IfxCan_Node_getFrameMode(rxBufferElement);
8000374a:	40 f4       	mov.aa %a4,%a15
8000374c:	6d ff 7c f3 	call 80001e44 <IfxCan_Node_getFrameMode>
80003750:	59 c2 18 00 	st.w [%a12]24,%d2

    /*get message bufferNumber*/
    message->bufferNumber = bufferId;
80003754:	34 c8       	st.b [%a12],%d8

    /* read data */
    IfxCan_Node_readData(rxBufferElement, message->dataLengthCode, data);
80003756:	60 95       	mov.a %a5,%d9
80003758:	19 c4 14 00 	ld.w %d4,[%a12]20
8000375c:	40 f4       	mov.aa %a4,%a15
8000375e:	6d ff 5d f4 	call 80002018 <IfxCan_Node_readData>

    /* write acknowledgement index incase of FIFO */
    if (message->readFromRxFifo0)
80003762:	39 c2 1e 00 	ld.bu %d2,[%a12]30
80003766:	df 02 32 00 	jeq %d2,0,800037ca <IfxCan_Can_readMessage+0xe6>
    {
        IfxCan_Node_setRxFifo0AcknowledgeIndex(node->node, bufferId);
8000376a:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->RX.F0A.B.F0AI = RxBufferNumber;
8000376e:	d9 23 28 60 	lea %a3,[%a2]424
80003772:	19 22 28 60 	ld.w %d2,[%a2]424
80003776:	37 82 06 20 	insert %d2,%d2,%d8,0,6
8000377a:	74 32       	st.w [%a3],%d2
    {
        IfxCan_Node_setRxFifo1AcknowledgeIndex(node->node, bufferId);
    }

    /* clear newdata flag after reading */
    IfxCan_Node_clearRxBufferNewDataFlag(node->node, bufferId);
8000377c:	02 84       	mov %d4,%d8
8000377e:	99 d4 04 00 	ld.a %a4,[%a13]4
80003782:	6d ff 3c f3 	call 80001dfa <IfxCan_Node_clearRxBufferNewDataFlag>

}
80003786:	00 90       	ret 
            bufferId        = IfxCan_Node_getRxFifo1GetIndex(node->node);
80003788:	99 44 04 00 	ld.a %a4,[%a4]4
    return (IfxCan_RxBufferId)node->RX.F1S.B.F1GI;
8000378c:	19 48 34 60 	ld.w %d8,[%a4]436
80003790:	37 08 66 84 	extr.u %d8,%d8,8,6
            rxBufferElement = IfxCan_Node_getRxFifo1ElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxFifo1StartAddress, bufferId);
80003794:	02 86       	mov %d6,%d8
80003796:	b9 d5 16 00 	ld.hu %d5,[%a13]22
8000379a:	19 d4 0c 00 	ld.w %d4,[%a13]12
8000379e:	6d ff c4 f3 	call 80001f26 <IfxCan_Node_getRxFifo1ElementAddress>
800037a2:	40 2f       	mov.aa %a15,%a2
800037a4:	1d ff bc ff 	j 8000371c <IfxCan_Can_readMessage+0x38>
        bufferId        = (IfxCan_RxBufferId)message->bufferNumber;
800037a8:	14 58       	ld.bu %d8,[%a5]
        rxBufferElement = IfxCan_Node_getRxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.rxBuffersStartAddress, bufferId);
800037aa:	02 86       	mov %d6,%d8
800037ac:	b9 45 18 00 	ld.hu %d5,[%a4]24
800037b0:	19 44 0c 00 	ld.w %d4,[%a4]12
800037b4:	99 44 04 00 	ld.a %a4,[%a4]4
800037b8:	6d ff 67 f3 	call 80001e86 <IfxCan_Node_getRxBufferElementAddress>
800037bc:	40 2f       	mov.aa %a15,%a2
800037be:	1d ff af ff 	j 8000371c <IfxCan_Can_readMessage+0x38>
    return rxBufferElement->R0.B.ID >> ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
800037c2:	3b 20 01 40 	mov %d4,18
800037c6:	1d ff b2 ff 	j 8000372a <IfxCan_Can_readMessage+0x46>
    else if (message->readFromRxFifo1)
800037ca:	39 c2 1f 00 	ld.bu %d2,[%a12]31
800037ce:	df 02 d7 7f 	jeq %d2,0,8000377c <IfxCan_Can_readMessage+0x98>
        IfxCan_Node_setRxFifo1AcknowledgeIndex(node->node, bufferId);
800037d2:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->RX.F1A.B.F1AI = RxBufferNumber;
800037d6:	d9 23 38 60 	lea %a3,[%a2]440
800037da:	19 22 38 60 	ld.w %d2,[%a2]440
800037de:	37 82 06 20 	insert %d2,%d2,%d8,0,6
800037e2:	74 32       	st.w [%a3],%d2
}
800037e4:	1d ff cc ff 	j 8000377c <IfxCan_Can_readMessage+0x98>

800037e8 <IfxCan_Can_sendMessage>:


IfxCan_Status IfxCan_Can_sendMessage(IfxCan_Can_Node *node, IfxCan_Message *message, uint32 *data)
{
800037e8:	40 ae       	mov.aa %a14,%sp
800037ea:	40 4f       	mov.aa %a15,%a4
800037ec:	40 5d       	mov.aa %a13,%a5
800037ee:	80 6b       	mov.d %d11,%a6
    IfxCan_Status     status   = IfxCan_Status_ok;

    IfxCan_TxBufferId bufferId = IfxCan_TxBufferId_0;

    if (!message->storeInTxFifoQueue)
800037f0:	39 52 1d 00 	ld.bu %d2,[%a5]29
800037f4:	df 02 54 80 	jne %d2,0,8000389c <IfxCan_Can_sendMessage+0xb4>
    {
        bufferId = (IfxCan_TxBufferId)message->bufferNumber;
800037f8:	14 59       	ld.bu %d9,[%a5]
}


IFX_INLINE boolean IfxCan_Can_isTxBufferRequestPending(IfxCan_Can_Node *node, IfxCan_TxBufferId txBufferId)
{
    return IfxCan_Node_isTxBufferRequestPending(node->node, txBufferId);
800037fa:	c8 14       	ld.a %a4,[%a15]4
    uint32  mask    = (1U << txBufferId);
800037fc:	82 1a       	mov %d10,1
800037fe:	0f 9a 00 a0 	sh %d10,%d10,%d9
    boolean tempVar = (boolean)((node->TX.BRP.U & mask) != 0 ? 1 : 0);
80003802:	19 48 0c 70 	ld.w %d8,[%a4]460
80003806:	26 a8       	and %d8,%d10
80003808:	df 08 6f 80 	jne %d8,0,800038e6 <IfxCan_Can_sendMessage+0xfe>
        status = IfxCan_Status_notSentBusy;
    }
    else
    {
        /* get the Tx Bufer ELement address */
        Ifx_CAN_TXMSG *txBufferElement = IfxCan_Node_getTxBufferElementAddress(node->node, node->messageRAM.baseAddress, node->messageRAM.txBuffersStartAddress, bufferId);
8000380c:	02 96       	mov %d6,%d9
8000380e:	b9 f5 1c 00 	ld.hu %d5,[%a15]28
80003812:	48 34       	ld.w %d4,[%a15]12
80003814:	6d ff b8 f3 	call 80001f84 <IfxCan_Node_getTxBufferElementAddress>
80003818:	40 2c       	mov.aa %a12,%a2

        /*set message Id (ID and XTD) */
        IfxCan_Node_setMsgId(txBufferElement, message->messageId, message->messageIdLength);
8000381a:	19 d4 04 00 	ld.w %d4,[%a13]4
8000381e:	19 d3 0c 00 	ld.w %d3,[%a13]12
    txBufferElement->T0.B.XTD = (messageIdLength != IfxCan_MessageIdLength_extended) ? 0 : 1;
80003822:	8b 13 00 52 	eq %d5,%d3,1
80003826:	54 22       	ld.w %d2,[%a2]
80003828:	67 52 1e 20 	ins.t %d2,%d2,30,%d5,0
8000382c:	74 22       	st.w [%a2],%d2
    txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
8000382e:	df 03 3f 00 	jeq %d3,0,800038ac <IfxCan_Can_sendMessage+0xc4>
80003832:	82 02       	mov %d2,0
80003834:	0f 24 00 40 	sh %d4,%d4,%d2
80003838:	54 c2       	ld.w %d2,[%a12]
8000383a:	37 42 1d 20 	insert %d2,%d2,%d4,0,29
8000383e:	74 c2       	st.w [%a12],%d2

        /* set TX FIFO Event control (EFC) and Message Marker (MM) if Tx Event Fifo is chosen */
        if (message->txEventFifoControl == TRUE)
80003840:	39 d3 1c 00 	ld.bu %d3,[%a13]28
80003844:	df 13 38 00 	jeq %d3,1,800038b4 <IfxCan_Can_sendMessage+0xcc>
            IfxCan_Node_setTxEventFifoCtrl(txBufferElement, message->txEventFifoControl);
            IfxCan_Node_setMessageMarker(txBufferElement, bufferId);
        }

        /* set Remote Transmit request if selected (RTR)*/
        IfxCan_Node_setRemoteTransmitReq(txBufferElement, message->remoteTransmitRequest);
80003848:	39 d3 08 00 	ld.bu %d3,[%a13]8
    txBufferElement->T0.B.RTR = enable ? 1 : 0;
8000384c:	8b 03 20 32 	ne %d3,%d3,0
80003850:	54 c2       	ld.w %d2,[%a12]
80003852:	67 32 1d 20 	ins.t %d2,%d2,29,%d3,0
80003856:	74 c2       	st.w [%a12],%d2

        /* set Error State Indicator if selected (ESI)*/
        if ((message->frameMode == IfxCan_FrameMode_fdLong) || (message->frameMode == IfxCan_FrameMode_fdLongAndFast))
80003858:	19 d2 18 00 	ld.w %d2,[%a13]24
8000385c:	c2 f2       	add %d2,-1
8000385e:	bf 22 3a 80 	jlt.u %d2,2,800038d2 <IfxCan_Can_sendMessage+0xea>
        {
            IfxCan_Node_setErrStateIndicator(txBufferElement, message->errorStateIndicator);
        }

        /* set data length code (DLC) */
        IfxCan_Node_setDataLength(txBufferElement, message->dataLengthCode);
80003862:	19 d3 14 00 	ld.w %d3,[%a13]20
    txBufferElement->T1.B.DLC = dataLengthCode;
80003866:	d9 c2 04 00 	lea %a2,[%a12]4
8000386a:	19 c2 04 00 	ld.w %d2,[%a12]4
8000386e:	37 32 04 28 	insert %d2,%d2,%d3,16,4
80003872:	74 22       	st.w [%a2],%d2

        /* write data (DBx) */
        IfxCan_Node_writeTxBufData(txBufferElement, message->dataLengthCode, data);
80003874:	60 b5       	mov.a %a5,%d11
80003876:	19 d4 14 00 	ld.w %d4,[%a13]20
8000387a:	40 c4       	mov.aa %a4,%a12
8000387c:	6d ff 16 f6 	call 800024a8 <IfxCan_Node_writeTxBufData>

        /* set CAN frame mode request (FDF and BRS) */
        IfxCan_Node_setFrameModeReq(txBufferElement, message->frameMode);
80003880:	19 d4 18 00 	ld.w %d4,[%a13]24
80003884:	40 c4       	mov.aa %a4,%a12
80003886:	6d ff ca f5 	call 8000241a <IfxCan_Node_setFrameModeReq>

        /*set transmit request */
        IfxCan_Node_setTxBufferAddRequest(node->node, bufferId);
8000388a:	c8 12       	ld.a %a2,[%a15]4
    node->TX.BAR.U = node->TX.BAR.U | (mask);
8000388c:	d9 23 10 70 	lea %a3,[%a2]464
80003890:	19 22 10 70 	ld.w %d2,[%a2]464
80003894:	a6 a2       	or %d2,%d10
80003896:	74 32       	st.w [%a3],%d2
    }

    return status;
}
80003898:	02 82       	mov %d2,%d8
8000389a:	00 90       	ret 
        bufferId = IfxCan_Node_getTxFifoQueuePutIndex(node->node);
8000389c:	99 42 04 00 	ld.a %a2,[%a4]4
    return (IfxCan_TxBufferId)node->TX.FQS.B.TFQPI;
800038a0:	19 29 04 70 	ld.w %d9,[%a2]452
800038a4:	37 09 65 98 	extr.u %d9,%d9,16,5
800038a8:	1d ff a9 ff 	j 800037fa <IfxCan_Can_sendMessage+0x12>
    txBufferElement->T0.B.ID  = messageId << ((messageIdLength != IfxCan_MessageIdLength_standard) ? 0 : 18);
800038ac:	3b 20 01 20 	mov %d2,18
800038b0:	1d ff c2 ff 	j 80003834 <IfxCan_Can_sendMessage+0x4c>
    txBufferElement->T1.B.EFC = enable ? 1 : 0;
800038b4:	8b 03 20 32 	ne %d3,%d3,0
800038b8:	d9 c2 04 00 	lea %a2,[%a12]4
800038bc:	19 c2 04 00 	ld.w %d2,[%a12]4
800038c0:	67 32 17 20 	ins.t %d2,%d2,23,%d3,0
800038c4:	74 22       	st.w [%a2],%d2
    txBufferElement->T1.B.MM = bufferId;
800038c6:	54 22       	ld.w %d2,[%a2]
800038c8:	37 92 08 2c 	insert %d2,%d2,%d9,24,8
800038cc:	74 22       	st.w [%a2],%d2
}
800038ce:	1d ff bd ff 	j 80003848 <IfxCan_Can_sendMessage+0x60>
            IfxCan_Node_setErrStateIndicator(txBufferElement, message->errorStateIndicator);
800038d2:	39 d3 10 00 	ld.bu %d3,[%a13]16
    txBufferElement->T0.B.ESI = enable ? 1 : 0;
800038d6:	8b 03 20 32 	ne %d3,%d3,0
800038da:	54 c2       	ld.w %d2,[%a12]
800038dc:	67 32 1f 20 	ins.t %d2,%d2,31,%d3,0
800038e0:	74 c2       	st.w [%a12],%d2
}
800038e2:	1d ff c0 ff 	j 80003862 <IfxCan_Can_sendMessage+0x7a>
        status = IfxCan_Status_notSentBusy;
800038e6:	3b 00 02 80 	mov %d8,32
    return status;
800038ea:	1d ff d7 ff 	j 80003898 <IfxCan_Can_sendMessage+0xb0>

800038ee <IfxCan_Can_setStandardFilter>:
    IfxCan_Node_disableConfigurationChange(node->node);
}


void IfxCan_Can_setStandardFilter(IfxCan_Can_Node *node, IfxCan_Filter *filter)
{
800038ee:	40 ae       	mov.aa %a14,%sp
800038f0:	40 4d       	mov.aa %a13,%a4
800038f2:	40 5c       	mov.aa %a12,%a5
    /* get the standard filter element address */
    Ifx_CAN_STDMSG *standardFilterElement = IfxCan_Node_getStandardFilterElementAddress(node->messageRAM.baseAddress, node->messageRAM.standardFilterListStartAddress, filter->number);
800038f4:	14 56       	ld.bu %d6,[%a5]
800038f6:	b9 45 10 00 	ld.hu %d5,[%a4]16
800038fa:	19 44 0c 00 	ld.w %d4,[%a4]12
800038fe:	6d ff 2c f3 	call 80001f56 <IfxCan_Node_getStandardFilterElementAddress>

    /* enable configuration change CCCR.CCE = 1, CCCR.INIT = 1 */
    IfxCan_Node_enableConfigurationChange(node->node);
80003902:	99 d3 04 00 	ld.a %a3,[%a13]4
    if (node->CCCR.B.INIT == 1)
80003906:	d9 34 18 40 	lea %a4,[%a3]280
8000390a:	19 32 18 40 	ld.w %d2,[%a3]280
8000390e:	6f 02 49 80 	jnz.t %d2,0,800039a0 <IfxCan_Can_setStandardFilter+0xb2>
    node->CCCR.B.INIT = 1;
80003912:	d9 34 18 40 	lea %a4,[%a3]280
80003916:	19 32 18 40 	ld.w %d2,[%a3]280
8000391a:	b7 12 01 20 	insert %d2,%d2,1,0,1
8000391e:	74 42       	st.w [%a4],%d2
    while (node->CCCR.B.INIT != 1)
80003920:	d9 34 18 40 	lea %a4,[%a3]280
80003924:	19 32 18 40 	ld.w %d2,[%a3]280
80003928:	6f 02 fc 7f 	jz.t %d2,0,80003920 <IfxCan_Can_setStandardFilter+0x32>
        cccr.U       = node->CCCR.U;
8000392c:	54 42       	ld.w %d2,[%a4]
        cccr.B.INIT  = 1;
8000392e:	b7 12 01 20 	insert %d2,%d2,1,0,1
        cccr.B.CCE   = 1;
80003932:	b7 12 81 20 	insert %d2,%d2,1,1,1
        node->CCCR.U = cccr.U;
80003936:	74 42       	st.w [%a4],%d2

    if (filter->elementConfiguration != IfxCan_FilterElementConfiguration_storeInRxBuffer)
80003938:	19 c2 04 00 	ld.w %d2,[%a12]4
8000393c:	df 72 46 00 	jeq %d2,7,800039c8 <IfxCan_Can_setStandardFilter+0xda>
    {
        IfxCan_Node_setStandardFilterId2(standardFilterElement, filter->id2);
80003940:	19 c3 10 00 	ld.w %d3,[%a12]16
    standardFilterElement->S0.B.SFID2 = id;
80003944:	54 22       	ld.w %d2,[%a2]
80003946:	37 32 0b 20 	insert %d2,%d2,%d3,0,11
8000394a:	74 22       	st.w [%a2],%d2
    else
    {
        IfxCan_Node_setStandardFilterRxBufferOffset(standardFilterElement, filter->rxBufferOffset);
    }

    IfxCan_Node_setStandardFilterId1(standardFilterElement, filter->id1);
8000394c:	19 c3 0c 00 	ld.w %d3,[%a12]12
    standardFilterElement->S0.B.SFID1 = id;
80003950:	54 22       	ld.w %d2,[%a2]
80003952:	37 32 0b 28 	insert %d2,%d2,%d3,16,11
80003956:	74 22       	st.w [%a2],%d2
    //IfxCan_Node_setStandardFilterId2(standardFilterElement, filter->id2);
    IfxCan_Node_setStandardFilterConfiguration(standardFilterElement, filter->elementConfiguration);
80003958:	19 c3 04 00 	ld.w %d3,[%a12]4
    standardFilterElement->S0.B.SFEC = filterElementConfiguration;
8000395c:	54 22       	ld.w %d2,[%a2]
8000395e:	37 32 83 2d 	insert %d2,%d2,%d3,27,3
80003962:	74 22       	st.w [%a2],%d2
    IfxCan_Node_setStandardFilterType(standardFilterElement, filter->type);
80003964:	19 c3 08 00 	ld.w %d3,[%a12]8
    standardFilterElement->S0.B.SFT = filterType;
80003968:	54 22       	ld.w %d2,[%a2]
8000396a:	37 32 02 2f 	insert %d2,%d2,%d3,30,2
8000396e:	74 22       	st.w [%a2],%d2

    /* disable configuration change CCCR.CCE = 0, CCCR.INIT = 0 */
    IfxCan_Node_disableConfigurationChange(node->node);
80003970:	99 d2 04 00 	ld.a %a2,[%a13]4
    node->CCCR.B.CCE = 0;
80003974:	d9 23 18 40 	lea %a3,[%a2]280
80003978:	19 22 18 40 	ld.w %d2,[%a2]280
8000397c:	8f 22 c0 21 	andn %d2,%d2,2
80003980:	74 32       	st.w [%a3],%d2
    while (node->CCCR.B.CCE != 0)
80003982:	d9 23 18 40 	lea %a3,[%a2]280
80003986:	19 22 18 40 	ld.w %d2,[%a2]280
8000398a:	6f 12 fc ff 	jnz.t %d2,1,80003982 <IfxCan_Can_setStandardFilter+0x94>
    node->CCCR.B.INIT = 0;
8000398e:	54 32       	ld.w %d2,[%a3]
80003990:	8f 12 c0 21 	andn %d2,%d2,1
80003994:	74 32       	st.w [%a3],%d2
    while (node->CCCR.B.INIT != 0)
80003996:	19 22 18 40 	ld.w %d2,[%a2]280
8000399a:	6f 02 fe ff 	jnz.t %d2,0,80003996 <IfxCan_Can_setStandardFilter+0xa8>
}
8000399e:	00 90       	ret 
        node->CCCR.B.CCE = 0;
800039a0:	54 42       	ld.w %d2,[%a4]
800039a2:	8f 22 c0 21 	andn %d2,%d2,2
800039a6:	74 42       	st.w [%a4],%d2
        while (node->CCCR.B.CCE != 0)
800039a8:	d9 34 18 40 	lea %a4,[%a3]280
800039ac:	19 32 18 40 	ld.w %d2,[%a3]280
800039b0:	6f 12 fc ff 	jnz.t %d2,1,800039a8 <IfxCan_Can_setStandardFilter+0xba>
        node->CCCR.B.INIT = 0;
800039b4:	54 42       	ld.w %d2,[%a4]
800039b6:	8f 12 c0 21 	andn %d2,%d2,1
800039ba:	74 42       	st.w [%a4],%d2
        while (node->CCCR.B.INIT != 0)
800039bc:	19 32 18 40 	ld.w %d2,[%a3]280
800039c0:	6f 02 fe ff 	jnz.t %d2,0,800039bc <IfxCan_Can_setStandardFilter+0xce>
800039c4:	1d ff a7 ff 	j 80003912 <IfxCan_Can_setStandardFilter+0x24>
    standardFilterElement->S0.B.SFID2 = (uint8)rxBufferNumber;
800039c8:	39 c3 14 00 	ld.bu %d3,[%a12]20
800039cc:	54 22       	ld.w %d2,[%a2]
800039ce:	37 32 0b 20 	insert %d2,%d2,%d3,0,11
800039d2:	74 22       	st.w [%a2],%d2
}
800039d4:	1d ff bc ff 	j 8000394c <IfxCan_Can_setStandardFilter+0x5e>

800039d8 <Ifx_Ssw_clearCpuEndinit>:
    return Ifx_Ssw_getSafetyWatchdogPasswordInline();
}


void Ifx_Ssw_clearCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
800039d8:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
800039da:	54 42       	ld.w %d2,[%a4]
800039dc:	6f 12 0b 00 	jz.t %d2,1,800039f2 <Ifx_Ssw_clearCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039e0:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800039e4:	54 42       	ld.w %d2,[%a4]
800039e6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039ea:	a6 32       	or %d2,%d3
800039ec:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800039f0:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039f2:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800039f4:	54 42       	ld.w %d2,[%a4]
800039f6:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800039fa:	a6 42       	or %d2,%d4
800039fc:	8f 22 40 21 	or %d2,%d2,2
    watchdog->CON0.U = ((unsigned int)0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a00:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003a02:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_clearCpuEndinitInline(watchdog, password);
}
80003a04:	00 90       	ret 

80003a06 <Ifx_Ssw_setCpuEndinit>:


void Ifx_Ssw_setCpuEndinit(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003a06:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80003a08:	54 42       	ld.w %d2,[%a4]
80003a0a:	6f 12 0b 00 	jz.t %d2,1,80003a20 <Ifx_Ssw_setCpuEndinit+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a0e:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a12:	54 42       	ld.w %d2,[%a4]
80003a14:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a18:	a6 32       	or %d2,%d3
80003a1a:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a1e:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a20:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003a22:	54 42       	ld.w %d2,[%a4]
80003a24:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003a28:	a6 42       	or %d2,%d4
80003a2a:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003a2e:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003a30:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80003a32:	00 90       	ret 

80003a34 <Ifx_Ssw_clearSafetyEndinit>:


void Ifx_Ssw_clearSafetyEndinit(unsigned short password)
{
80003a34:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003a36:	91 30 00 2f 	movh.a %a2,61443
80003a3a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003a3e:	54 22       	ld.w %d2,[%a2]
80003a40:	6f 12 0b 00 	jz.t %d2,1,80003a56 <Ifx_Ssw_clearSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a44:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a48:	54 22       	ld.w %d2,[%a2]
80003a4a:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a4e:	a6 32       	or %d2,%d3
80003a50:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a54:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a56:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a58:	91 30 00 2f 	movh.a %a2,61443
80003a5c:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003a60:	54 22       	ld.w %d2,[%a2]
80003a62:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a66:	a6 42       	or %d2,%d4
80003a68:	8f 22 40 21 	or %d2,%d2,2
    SCU_WDTS_CON0.U = ((unsigned int)0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a6c:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003a6e:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_clearSafetyEndinitInline(password);
}
80003a70:	00 90       	ret 

80003a72 <Ifx_Ssw_setSafetyEndinit>:


void Ifx_Ssw_setSafetyEndinit(unsigned short password)
{
80003a72:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003a74:	91 30 00 2f 	movh.a %a2,61443
80003a78:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003a7c:	54 22       	ld.w %d2,[%a2]
80003a7e:	6f 12 0b 00 	jz.t %d2,1,80003a94 <Ifx_Ssw_setSafetyEndinit+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a82:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a86:	54 22       	ld.w %d2,[%a2]
80003a88:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a8c:	a6 32       	or %d2,%d3
80003a8e:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003a92:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003a94:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003a96:	91 30 00 2f 	movh.a %a2,61443
80003a9a:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003a9e:	54 22       	ld.w %d2,[%a2]
80003aa0:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003aa4:	a6 42       	or %d2,%d4
80003aa6:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003aaa:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003aac:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80003aae:	00 90       	ret 

80003ab0 <Ifx_Ssw_serviceCpuWatchdog>:


void Ifx_Ssw_serviceCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003ab0:	40 ae       	mov.aa %a14,%sp
    if (watchdog->CON0.B.LCK)
80003ab2:	54 42       	ld.w %d2,[%a4]
80003ab4:	6f 12 0b 00 	jz.t %d2,1,80003aca <Ifx_Ssw_serviceCpuWatchdog+0x1a>
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ab8:	8f 24 00 30 	sh %d3,%d4,2
                           ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003abc:	54 42       	ld.w %d2,[%a4]
80003abe:	b7 02 10 20 	insert %d2,%d2,0,0,16
                           ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ac2:	a6 32       	or %d2,%d3
80003ac4:	8f 12 40 21 	or %d2,%d2,1
        watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ac8:	74 42       	st.w [%a4],%d2
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003aca:	06 24       	sh %d4,2
                       ((unsigned int)watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80003acc:	54 42       	ld.w %d2,[%a4]
80003ace:	b7 02 10 20 	insert %d2,%d2,0,0,16
                       ((unsigned int)password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80003ad2:	a6 42       	or %d2,%d4
80003ad4:	8f 32 40 21 	or %d2,%d2,3
    watchdog->CON0.U = ((unsigned int)1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80003ad8:	74 42       	st.w [%a4],%d2
    watchdog->CON0.U;
80003ada:	54 42       	ld.w %d2,[%a4]
    Ifx_Ssw_setCpuEndinitInline(watchdog, password);
}
80003adc:	00 90       	ret 

80003ade <Ifx_Ssw_serviceSafetyWatchdog>:


void Ifx_Ssw_serviceSafetyWatchdog(unsigned short password)
{
80003ade:	40 ae       	mov.aa %a14,%sp
    if (SCU_WDTS_CON0.B.LCK)
80003ae0:	91 30 00 2f 	movh.a %a2,61443
80003ae4:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003ae8:	54 22       	ld.w %d2,[%a2]
80003aea:	6f 12 0b 00 	jz.t %d2,1,80003b00 <Ifx_Ssw_serviceSafetyWatchdog+0x22>
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003aee:	8f 24 00 30 	sh %d3,%d4,2
                          ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003af2:	54 22       	ld.w %d2,[%a2]
80003af4:	b7 02 10 20 	insert %d2,%d2,0,0,16
                          ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003af8:	a6 32       	or %d2,%d3
80003afa:	8f 12 40 21 	or %d2,%d2,1
        SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003afe:	74 22       	st.w [%a2],%d2
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b00:	06 24       	sh %d4,2
                      ((unsigned int)SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80003b02:	91 30 00 2f 	movh.a %a2,61443
80003b06:	d9 22 28 a6 	lea %a2,[%a2]25256 <f00362a8 <bmhd_3_copy+0x40c34ca8>>
80003b0a:	54 22       	ld.w %d2,[%a2]
80003b0c:	b7 02 10 20 	insert %d2,%d2,0,0,16
                      ((unsigned int)password << IFX_SCU_WDTS_CON0_PW_OFF) |
80003b10:	a6 42       	or %d2,%d4
80003b12:	8f 32 40 21 	or %d2,%d2,3
    SCU_WDTS_CON0.U = ((unsigned int)1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80003b16:	74 22       	st.w [%a2],%d2
    SCU_WDTS_CON0.U;
80003b18:	54 22       	ld.w %d2,[%a2]
    Ifx_Ssw_setSafetyEndinitInline(password);
}
80003b1a:	00 90       	ret 

80003b1c <Ifx_Ssw_disableCpuWatchdog>:


void Ifx_Ssw_disableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003b1c:	40 ae       	mov.aa %a14,%sp
80003b1e:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003b22:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003b26:	8f 72 00 21 	and %d2,%d2,7
    __asm__ volatile ("min.u %0, %1, %2" : "=d" (res) : "d" (a), "d" (b));
80003b2a:	82 53       	mov %d3,5
80003b2c:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003b30:	7b 30 00 3f 	movh %d3,61443
80003b34:	1b c3 24 36 	addi %d3,%d3,25164
80003b38:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003b3c:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003b3e:	02 84       	mov %d4,%d8
80003b40:	60 24       	mov.a %a4,%d2
80003b42:	6d ff 4b ff 	call 800039d8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 1U;         /* Set DR bit in Config_1 register */
80003b46:	d9 c2 04 00 	lea %a2,[%a12]4
80003b4a:	19 c2 04 00 	ld.w %d2,[%a12]4
80003b4e:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003b52:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003b54:	02 84       	mov %d4,%d8
80003b56:	40 c4       	mov.aa %a4,%a12
80003b58:	6d ff 57 ff 	call 80003a06 <Ifx_Ssw_setCpuEndinit>
}
80003b5c:	00 90       	ret 

80003b5e <Ifx_Ssw_enableCpuWatchdog>:


void Ifx_Ssw_enableCpuWatchdog(Ifx_SCU_WDTCPU *watchdog, unsigned short password)
{
80003b5e:	40 ae       	mov.aa %a14,%sp
80003b60:	37 04 70 80 	extr.u %d8,%d4,0,16
    /* Select CPU Watchdog based on Core Id */
    unsigned int    cpuIndex;
    cpuIndex = Ifx_Ssw_MFCR(CPU_CORE_ID);
80003b64:	4d c0 e1 2f 	mfcr %d2,$core_id
    cpuIndex = (unsigned int)((unsigned int)cpuIndex >> IFX_CPU_CORE_ID_CORE_ID_OFF) & IFX_CPU_CORE_ID_CORE_ID_MSK;
80003b68:	8f 72 00 21 	and %d2,%d2,7
80003b6c:	82 53       	mov %d3,5
80003b6e:	0b 32 90 21 	min.u %d2,%d2,%d3
    cpuIndex = Ifx_Ssw_MINU(cpuIndex, 5);
    Ifx_SCU_WDTCPU *wdt = &MODULE_SCU.WDTCPU[cpuIndex];
80003b72:	7b 30 00 3f 	movh %d3,61443
80003b76:	1b c3 24 36 	addi %d3,%d3,25164
80003b7a:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003b7e:	60 2c       	mov.a %a12,%d2

    Ifx_Ssw_clearCpuEndinit(wdt, password);
80003b80:	02 84       	mov %d4,%d8
80003b82:	60 24       	mov.a %a4,%d2
80003b84:	6d ff 2a ff 	call 800039d8 <Ifx_Ssw_clearCpuEndinit>
    wdt->CON1.B.DR = 0U;         /* Clear DR bit in Config_1 register */
80003b88:	d9 c2 04 00 	lea %a2,[%a12]4
80003b8c:	19 c2 04 00 	ld.w %d2,[%a12]4
80003b90:	8f 82 c0 21 	andn %d2,%d2,8
80003b94:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setCpuEndinit(wdt, password);
80003b96:	02 84       	mov %d4,%d8
80003b98:	40 c4       	mov.aa %a4,%a12
80003b9a:	6d ff 36 ff 	call 80003a06 <Ifx_Ssw_setCpuEndinit>
}
80003b9e:	00 90       	ret 

80003ba0 <Ifx_Ssw_disableSafetyWatchdog>:


void Ifx_Ssw_disableSafetyWatchdog(unsigned short password)
{
80003ba0:	40 ae       	mov.aa %a14,%sp
80003ba2:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80003ba6:	02 84       	mov %d4,%d8
80003ba8:	6d ff 46 ff 	call 80003a34 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 1U;     /* Set DR bit in Config_1 register */
80003bac:	91 30 00 2f 	movh.a %a2,61443
80003bb0:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80003bb4:	54 22       	ld.w %d2,[%a2]
80003bb6:	b7 12 81 21 	insert %d2,%d2,1,3,1
80003bba:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003bbc:	02 84       	mov %d4,%d8
80003bbe:	6d ff 5a ff 	call 80003a72 <Ifx_Ssw_setSafetyEndinit>
}
80003bc2:	00 90       	ret 

80003bc4 <Ifx_Ssw_enableSafetyWatchdog>:


void Ifx_Ssw_enableSafetyWatchdog(unsigned short password)
{
80003bc4:	40 ae       	mov.aa %a14,%sp
80003bc6:	37 04 70 80 	extr.u %d8,%d4,0,16
    Ifx_Ssw_clearSafetyEndinit(password);
80003bca:	02 84       	mov %d4,%d8
80003bcc:	6d ff 34 ff 	call 80003a34 <Ifx_Ssw_clearSafetyEndinit>
    SCU_WDTS_CON1.B.DR = 0U;     /* Clear DR bit in Config_1 register */
80003bd0:	91 30 00 2f 	movh.a %a2,61443
80003bd4:	d9 22 2c a6 	lea %a2,[%a2]25260 <f00362ac <bmhd_3_copy+0x40c34cac>>
80003bd8:	54 22       	ld.w %d2,[%a2]
80003bda:	8f 82 c0 21 	andn %d2,%d2,8
80003bde:	74 22       	st.w [%a2],%d2
    Ifx_Ssw_setSafetyEndinit(password);
80003be0:	02 84       	mov %d4,%d8
80003be2:	6d ff 48 ff 	call 80003a72 <Ifx_Ssw_setSafetyEndinit>
}
80003be6:	00 90       	ret 

80003be8 <Ifx_Ssw_startCore>:


void Ifx_Ssw_startCore(Ifx_CPU *cpu, unsigned int programCounter)
{
80003be8:	40 ae       	mov.aa %a14,%sp
    /* Set the PC */
    cpu->PC.B.PC = (unsigned int)programCounter >> 1U;
80003bea:	7b 20 00 20 	movh %d2,2
80003bee:	1b 82 e0 2f 	addi %d2,%d2,-504
80003bf2:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80003bf6:	54 22       	ld.w %d2,[%a2]
80003bf8:	37 24 01 20 	insert %d2,%d4,%d2,0,1
80003bfc:	74 22       	st.w [%a2],%d2

    /* release boot halt mode if required */
    Ifx_CPU_SYSCON syscon;
    syscon = cpu->SYSCON;
80003bfe:	7b 20 00 20 	movh %d2,2
80003c02:	1b 42 e1 2f 	addi %d2,%d2,-492
80003c06:	01 42 00 26 	addsc.a %a2,%a4,%d2,0
80003c0a:	54 22       	ld.w %d2,[%a2]

    if (syscon.B.BHALT)
80003c0c:	ef 82 0b 00 	jz.t %d2,24,80003c22 <Ifx_Ssw_startCore+0x3a>
    {
        syscon.B.BHALT = 0U;
80003c10:	b7 02 01 2c 	insert %d2,%d2,0,24,1
        cpu->SYSCON    = syscon;
80003c14:	7b 20 00 40 	movh %d4,2
80003c18:	1b 44 e1 4f 	addi %d4,%d4,-492
80003c1c:	01 44 00 26 	addsc.a %a2,%a4,%d4,0
80003c20:	74 22       	st.w [%a2],%d2
    }

}
80003c22:	00 90       	ret 

80003c24 <Ifx_Ssw_getStmFrequency>:
    Ifx_Ssw_setCpuEndinit(wdt, cpuWdtPw);
}


float Ifx_Ssw_getStmFrequency(void)
{
80003c24:	40 ae       	mov.aa %a14,%sp
    float        oscFreq    = IFX_CFG_SSW_XTAL_FREQUENCY;
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
    unsigned int insel      = SCU_SYSPLLCON0.B.INSEL;
80003c26:	91 30 00 2f 	movh.a %a2,61443
80003c2a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80003c2e:	54 22       	ld.w %d2,[%a2]
80003c30:	8f 22 1e 20 	sh %d2,%d2,-30

    if (insel == 2U)
80003c34:	df 22 40 00 	jeq %d2,2,80003cb4 <Ifx_Ssw_getStmFrequency+0x90>
    {
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
    }
    else if (insel == 1U)
80003c38:	df 12 38 00 	jeq %d2,1,80003ca8 <Ifx_Ssw_getStmFrequency+0x84>
    {
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
    }
    else
    {
        oscFreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003c3c:	7b f0 cb 34 	movh %d3,19647
80003c40:	1b 03 c2 3b 	addi %d3,%d3,-17376
    }

    if (SCU_CCUCON0.B.CLKSEL != 0U)
80003c44:	91 30 00 2f 	movh.a %a2,61443
80003c48:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80003c4c:	54 22       	ld.w %d2,[%a2]
80003c4e:	37 02 62 2e 	extr.u %d2,%d2,28,2
80003c52:	df 02 37 00 	jeq %d2,0,80003cc0 <Ifx_Ssw_getStmFrequency+0x9c>
    {
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003c56:	91 30 00 2f 	movh.a %a2,61443
80003c5a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <bmhd_3_copy+0x40c34a18>>
80003c5e:	54 22       	ld.w %d2,[%a2]
80003c60:	37 02 e7 24 	extr.u %d2,%d2,9,7
80003c64:	c2 12       	add %d2,1
80003c66:	4b 02 61 21 	utof %d2,%d2
80003c6a:	4b 32 41 30 	mul.f %d3,%d2,%d3
                     ((SCU_SYSPLLCON0.B.PDIV + 1U) * (SCU_SYSPLLCON1.B.K2DIV + 1U));
80003c6e:	54 24       	ld.w %d4,[%a2]
80003c70:	37 04 63 4c 	extr.u %d4,%d4,24,3
80003c74:	91 30 00 2f 	movh.a %a2,61443
80003c78:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <bmhd_3_copy+0x40c34a1c>>
80003c7c:	54 22       	ld.w %d2,[%a2]
80003c7e:	8f 72 00 21 	and %d2,%d2,7
80003c82:	c2 12       	add %d2,1
80003c84:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
        sourcefreq = (oscFreq * (SCU_SYSPLLCON0.B.NDIV + 1U)) /
80003c88:	4b 02 61 21 	utof %d2,%d2
80003c8c:	4b 23 51 40 	div.f %d4,%d3,%d2
    }

    return sourcefreq / SCU_CCUCON0.B.STMDIV;
80003c90:	91 30 00 2f 	movh.a %a2,61443
80003c94:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <bmhd_3_copy+0x40c34a30>>
80003c98:	54 22       	ld.w %d2,[%a2]
80003c9a:	8f f2 00 21 	and %d2,%d2,15
80003c9e:	4b 02 41 21 	itof %d2,%d2
}
80003ca2:	4b 24 51 20 	div.f %d2,%d4,%d2
80003ca6:	00 90       	ret 
        oscFreq = IFX_CFG_SSW_XTAL_FREQUENCY;
80003ca8:	7b 90 b9 34 	movh %d3,19353
80003cac:	1b 03 68 39 	addi %d3,%d3,-27008
80003cb0:	1d ff ca ff 	j 80003c44 <Ifx_Ssw_getStmFrequency+0x20>
        oscFreq = IFX_CFG_SSW_SYSCLK_PIN_FREQUENCY;
80003cb4:	7b 90 b9 34 	movh %d3,19353
80003cb8:	1b 03 68 39 	addi %d3,%d3,-27008
80003cbc:	1d ff c4 ff 	j 80003c44 <Ifx_Ssw_getStmFrequency+0x20>
    float        sourcefreq = IFX_CFG_SSW_EVR_OSC_FREQUENCY;
80003cc0:	7b f0 cb 44 	movh %d4,19647
80003cc4:	1b 04 c2 4b 	addi %d4,%d4,-17376
80003cc8:	1d ff e4 ff 	j 80003c90 <Ifx_Ssw_getStmFrequency+0x6c>

80003ccc <Ifx_Ssw_doCppInit>:

void Ifx_Ssw_doCppInit(void)
{
80003ccc:	40 ae       	mov.aa %a14,%sp
80003cce:	20 08       	sub.a %sp,8
{
    Ifx_Ssw_CTablePtr pBlockDest, pBlockSrc;
    unsigned int      uiLength, uiCnt;
    unsigned int     *pTable;
    /* clear table */
    pTable = (unsigned int *)&__clear_table;
80003cd0:	91 00 00 28 	movh.a %a2,32768
80003cd4:	d9 22 70 50 	lea %a2,[%a2]1392 <80000570 <__clear_table>>

    while (pTable)
80003cd8:	1d 00 32 00 	j 80003d3c <Ifx_Ssw_doCppInit+0x70>
            break;
        }

        uiCnt = uiLength / 8;

        while (uiCnt--)
80003cdc:	91 00 00 28 	movh.a %a2,32768
80003ce0:	d9 22 50 80 	lea %a2,[%a2]1552 <80000610 <__copy_table>>
80003ce4:	1d 00 7c 00 	j 80003ddc <Ifx_Ssw_doCppInit+0x110>
            *pBlockDest.ullPtr++ = 0;
80003ce8:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003cec:	80 22       	mov.d %d2,%a2
80003cee:	1b 82 00 20 	addi %d2,%d2,8
80003cf2:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003cf6:	d2 02       	mov %e2,0
80003cf8:	89 22 40 09 	st.d [%a2],%e2
        while (uiCnt--)
80003cfc:	02 52       	mov %d2,%d5
80003cfe:	1b f2 ff 5f 	addi %d5,%d2,-1
80003d02:	df 02 f3 ff 	jne %d2,0,80003ce8 <Ifx_Ssw_doCppInit+0x1c>
        if (uiLength & 0x4)
80003d06:	6f 24 0a 00 	jz.t %d4,2,80003d1a <Ifx_Ssw_doCppInit+0x4e>
            *pBlockDest.uiPtr++ = 0;
80003d0a:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d0e:	80 22       	mov.d %d2,%a2
80003d10:	c2 42       	add %d2,4
80003d12:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003d16:	82 02       	mov %d2,0
80003d18:	74 22       	st.w [%a2],%d2
        if (uiLength & 0x2)
80003d1a:	6f 14 0a 00 	jz.t %d4,1,80003d2e <Ifx_Ssw_doCppInit+0x62>
            *pBlockDest.usPtr++ = 0;
80003d1e:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d22:	80 22       	mov.d %d2,%a2
80003d24:	c2 22       	add %d2,2
80003d26:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003d2a:	82 02       	mov %d2,0
80003d2c:	b4 22       	st.h [%a2],%d2
        if (uiLength & 0x1)
80003d2e:	6f 04 06 00 	jz.t %d4,0,80003d3a <Ifx_Ssw_doCppInit+0x6e>
            *pBlockDest.ucPtr = 0;
80003d32:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003d36:	82 02       	mov %d2,0
80003d38:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80003d3a:	40 32       	mov.aa %a2,%a3
    while (pTable)
80003d3c:	bd 02 d0 7f 	jz.a %a2,80003cdc <Ifx_Ssw_doCppInit+0x10>
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003d40:	d9 23 08 00 	lea %a3,[%a2]8
80003d44:	54 22       	ld.w %d2,[%a2]
80003d46:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80003d4a:	19 24 04 00 	ld.w %d4,[%a2]4
        if (uiLength == 0xFFFFFFFF)
80003d4e:	df f4 c7 7f 	jeq %d4,-1,80003cdc <Ifx_Ssw_doCppInit+0x10>
        uiCnt = uiLength / 8;
80003d52:	8f d4 1f 20 	sh %d2,%d4,-3
        while (uiCnt--)
80003d56:	1d ff d4 ff 	j 80003cfe <Ifx_Ssw_doCppInit+0x32>
        {
            *pBlockDest.ullPtr++ = *pBlockSrc.ullPtr++;
80003d5a:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003d5e:	80 22       	mov.d %d2,%a2
80003d60:	1b 82 00 20 	addi %d2,%d2,8
80003d64:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003d68:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80003d6c:	80 32       	mov.d %d2,%a3
80003d6e:	1b 82 00 20 	addi %d2,%d2,8
80003d72:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003d76:	09 26 40 09 	ld.d %e6,[%a2]
80003d7a:	89 36 40 09 	st.d [%a3],%e6
        while (uiCnt--)
80003d7e:	02 42       	mov %d2,%d4
80003d80:	1b f2 ff 4f 	addi %d4,%d2,-1
80003d84:	df 02 eb ff 	jne %d2,0,80003d5a <Ifx_Ssw_doCppInit+0x8e>
        }

        if (uiLength & 0x4)
80003d88:	6f 23 10 00 	jz.t %d3,2,80003da8 <Ifx_Ssw_doCppInit+0xdc>
        {
            *pBlockDest.uiPtr++ = *pBlockSrc.uiPtr++;
80003d8c:	99 e2 fc ff 	ld.a %a2,[%a14]-4
80003d90:	80 22       	mov.d %d2,%a2
80003d92:	c2 42       	add %d2,4
80003d94:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003d98:	99 e3 f8 ff 	ld.a %a3,[%a14]-8
80003d9c:	80 32       	mov.d %d2,%a3
80003d9e:	c2 42       	add %d2,4
80003da0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003da4:	54 22       	ld.w %d2,[%a2]
80003da6:	74 32       	st.w [%a3],%d2
        }

        if (uiLength & 0x2)
80003da8:	6f 13 11 00 	jz.t %d3,1,80003dca <Ifx_Ssw_doCppInit+0xfe>
        {
            *pBlockDest.usPtr++ = *pBlockSrc.usPtr++;
80003dac:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80003db0:	80 32       	mov.d %d2,%a3
80003db2:	c2 22       	add %d2,2
80003db4:	59 e2 fc ff 	st.w [%a14]-4,%d2
80003db8:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003dbc:	80 22       	mov.d %d2,%a2
80003dbe:	c2 22       	add %d2,2
80003dc0:	59 e2 f8 ff 	st.w [%a14]-8,%d2
80003dc4:	b9 32 00 00 	ld.hu %d2,[%a3]0
80003dc8:	b4 22       	st.h [%a2],%d2
        }

        if (uiLength & 0x1)
80003dca:	6f 03 08 00 	jz.t %d3,0,80003dda <Ifx_Ssw_doCppInit+0x10e>
        {
            *pBlockDest.ucPtr = *pBlockSrc.ucPtr;
80003dce:	99 e3 fc ff 	ld.a %a3,[%a14]-4
80003dd2:	99 e2 f8 ff 	ld.a %a2,[%a14]-8
80003dd6:	14 32       	ld.bu %d2,[%a3]
80003dd8:	34 22       	st.b [%a2],%d2
        while (uiCnt--)
80003dda:	60 52       	mov.a %a2,%d5
    while (pTable)
80003ddc:	bd 02 14 00 	jz.a %a2,80003e04 <Ifx_Ssw_doCppInit+0x138>
        pBlockSrc.uiPtr  = (unsigned int *)*pTable++;
80003de0:	54 22       	ld.w %d2,[%a2]
80003de2:	59 e2 fc ff 	st.w [%a14]-4,%d2
        pBlockDest.uiPtr = (unsigned int *)*pTable++;
80003de6:	19 22 04 00 	ld.w %d2,[%a2]4
80003dea:	59 e2 f8 ff 	st.w [%a14]-8,%d2
        uiLength         = *pTable++;
80003dee:	80 22       	mov.d %d2,%a2
80003df0:	1b c2 00 50 	addi %d5,%d2,12
80003df4:	19 23 08 00 	ld.w %d3,[%a2]8
        if (uiLength == 0xFFFFFFFF)
80003df8:	df f3 06 00 	jeq %d3,-1,80003e04 <Ifx_Ssw_doCppInit+0x138>
        uiCnt = uiLength / 8;
80003dfc:	8f d3 1f 20 	sh %d2,%d3,-3
        while (uiCnt--)
80003e00:	1d ff c0 ff 	j 80003d80 <Ifx_Ssw_doCppInit+0xb4>
	#elif defined(__HIGHTEC__) && !defined(__clang__)
		extern void _init(void); /* cpp initialization */
		_init();
	#elif defined(__GNUC__) && !defined(__HIGHTEC__)
		extern void _init(void); /* cpp initialization */
		_init();
80003e04:	6d ff 8e e6 	call 80000b20 <_init>
	#elif defined(__ghs__)
		extern void _main(void); /* cpp initialization */
		_main();
	#endif
}
80003e08:	00 90       	ret 

80003e0a <Ifx_Ssw_Pms_Init>:
#pragma GCC optimize ("O1")
#endif

#if (IFX_CFG_SSW_ENABLE_PMS_INIT == 1U)
void Ifx_Ssw_Pms_Init(void)
{
80003e0a:	40 ae       	mov.aa %a14,%sp
    uint16 password = MODULE_SCU.SEICON0.B.EPW ^ 0x003F;
80003e0c:	91 30 00 2f 	movh.a %a2,61443
80003e10:	d9 22 00 06 	lea %a2,[%a2]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
80003e14:	19 22 34 a0 	ld.w %d2,[%a2]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003e18:	37 02 6e 21 	extr.u %d2,%d2,2,14
    uint32                                      regVal;
    uint16                                      endinitSfty_pw = IfxScuWdt_getGlobalSafetyEndinitPasswordInline();
    const IfxPmsEvr_initSequencePhase          *phaseConfig;
    const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig;

    if (PMS_EVRSTAT.B.EVRC == 1U)
80003e1c:	91 50 02 2f 	movh.a %a2,61477
80003e20:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80003e24:	54 23       	ld.w %d3,[%a2]
80003e26:	6f 03 04 80 	jnz.t %d3,0,80003e2e <Ifx_Ssw_Pms_Init+0x24>
}


IFX_SSW_INLINE void Ifx_Ssw_jumpBackToLink(void)
{
    __asm__ volatile ("ji %a11");
80003e2a:	dc 0b       	ji %a11
        __debug();
        /* Application may have call to error handling here */
    }

    Ifx_Ssw_jumpBackToLink();
}
80003e2c:	00 90       	ret 
    {
        /*Loop through each configured phase*/
        for (phaseConfig = &sequence->phaseConfig[0];
80003e2e:	91 00 00 28 	movh.a %a2,32768
80003e32:	d9 23 5c 00 	lea %a3,[%a2]1052 <8000041c <IfxPmsEvr_cfgSequenceDefault>>
80003e36:	b0 43       	add.a %a3,4
80003e38:	d4 33       	ld.a %a3,[%a3]
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003e3a:	39 27 5c 00 	ld.bu %d7,[%a2]1052 <8000041c <IfxPmsEvr_cfgSequenceDefault>>
80003e3e:	53 c7 20 70 	mul %d7,%d7,12
80003e42:	80 33       	mov.d %d3,%a3
80003e44:	42 73       	add %d3,%d7
80003e46:	80 34       	mov.d %d4,%a3
80003e48:	7f 34 f1 ff 	jge.u %d4,%d3,80003e2a <Ifx_Ssw_Pms_Init+0x20>
             phaseConfig++)
        {
            IfxScuWdt_clearGlobalSafetyEndinitInline(endinitSfty_pw);
80003e4c:	8f f2 83 21 	xor %d2,%d2,63
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003e50:	06 22       	sh %d2,2
80003e52:	7b c0 ff 1f 	movh %d1,65532
80003e56:	a6 21       	or %d1,%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80003e58:	7b c0 ff 0f 	movh %d0,65532
80003e5c:	c2 20       	add %d0,2
80003e5e:	a6 20       	or %d0,%d2
    boolean                                     pmsInitDone    = TRUE;
80003e60:	82 18       	mov %d8,1
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003e62:	91 30 00 4f 	movh.a %a4,61443
80003e66:	d9 44 00 06 	lea %a4,[%a4]24576 <f0036000 <bmhd_3_copy+0x40c34a00>>
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80003e6a:	02 84       	mov %d4,%d8
                 * However, for this function, as this is used only with CPU0 startup no wait required
                 */
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
            }

            PMS_EVRSDCTRL0.B.UP = 1;
80003e6c:	91 50 02 5f 	movh.a %a5,61477
80003e70:	d9 55 08 48 	lea %a5,[%a5]-32504 <f0248108 <bmhd_3_copy+0x40e46b08>>
            /*Now, wait for the UP bit at EVRSDCTRL0 is reset, which is to indicate the configurations are done*/
            do
            {
                if (--timeoutCount <= 0)
                {
                    pmsInitDone = FALSE;
80003e74:	82 09       	mov %d9,0
}


IFX_INLINE void IfxPmsEvr_wait(float32 waitInSec)
{
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80003e76:	7b c0 bf 64 	movh %d6,19452
80003e7a:	1b 06 52 6c 	addi %d6,%d6,-15072
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80003e7e:	c5 f6 10 01 	lea %a6,f0001010 <bmhd_3_copy+0x40bffa10>
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003e82:	d9 2c 5c 00 	lea %a12,[%a2]1052 <8000041c <IfxPmsEvr_cfgSequenceDefault>>
80003e86:	1d 00 15 00 	j 80003eb0 <Ifx_Ssw_Pms_Init+0xa6>
    uint32 stmCount      = (uint32)((float32)33000000UL * waitInSec);
80003e8a:	19 32 08 00 	ld.w %d2,[%a3]8
80003e8e:	4b 26 41 20 	mul.f %d2,%d6,%d2
80003e92:	4b 02 71 31 	ftouz %d3,%d2
    uint32 stmCountBegin = STM0_TIM0.U;     /* it is necessary to get this value to have minimum 100uS delay in subsequent CPU start */
80003e96:	54 65       	ld.w %d5,[%a6]

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80003e98:	54 62       	ld.w %d2,[%a6]
80003e9a:	a2 52       	sub %d2,%d5
80003e9c:	3f 32 fe ff 	jlt.u %d2,%d3,80003e98 <Ifx_Ssw_Pms_Init+0x8e>
             phaseConfig++)
80003ea0:	d9 33 0c 00 	lea %a3,[%a3]12
             phaseConfig < &sequence->phaseConfig[sequence->numOfPhases];
80003ea4:	19 c2 04 00 	ld.w %d2,[%a12]4
80003ea8:	42 72       	add %d2,%d7
80003eaa:	80 33       	mov.d %d3,%a3
80003eac:	7f 23 3d 80 	jge.u %d3,%d2,80003f26 <Ifx_Ssw_Pms_Init+0x11c>
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF);
80003eb0:	59 41 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d1
    while (MODULE_SCU.SEICON0.B.ENDINIT == 1)
80003eb4:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003eb8:	37 02 e1 20 	extr.u %d2,%d2,1,1
80003ebc:	5f 42 fc 7f 	jeq %d2,%d4,80003eb4 <Ifx_Ssw_Pms_Init+0xaa>
            for (regConfig = &phaseConfig->regConfig[0];
80003ec0:	99 32 04 00 	ld.a %a2,[%a3]4
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
80003ec4:	14 32       	ld.bu %d2,[%a3]
80003ec6:	80 23       	mov.d %d3,%a2
80003ec8:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003ecc:	7f 23 16 80 	jge.u %d3,%d2,80003ef8 <Ifx_Ssw_Pms_Init+0xee>
                regVal  = (*((volatile uint32 *)regConfig->regAddr));
80003ed0:	d4 27       	ld.a %a7,[%a2]
80003ed2:	54 72       	ld.w %d2,[%a7]
                regVal &= ~regConfig->mask;
80003ed4:	19 23 08 00 	ld.w %d3,[%a2]8
80003ed8:	0f 32 e0 20 	andn %d2,%d2,%d3
                regVal |= regConfig->value;
80003edc:	19 23 04 00 	ld.w %d3,[%a2]4
80003ee0:	a6 32       	or %d2,%d3
                (*((volatile uint32 *)regConfig->regAddr)) = regVal; /*Write to the physical register*/
80003ee2:	74 72       	st.w [%a7],%d2
                 regConfig++)
80003ee4:	d9 22 0c 00 	lea %a2,[%a2]12
                 regConfig < &phaseConfig->regConfig[phaseConfig->numOfRegisters];
80003ee8:	14 32       	ld.bu %d2,[%a3]
80003eea:	19 33 04 00 	ld.w %d3,[%a3]4
80003eee:	13 c2 20 23 	madd %d2,%d3,%d2,12
80003ef2:	80 23       	mov.d %d3,%a2
80003ef4:	3f 23 ee ff 	jlt.u %d3,%d2,80003ed0 <Ifx_Ssw_Pms_Init+0xc6>
            PMS_EVRSDCTRL0.B.UP = 1;
80003ef8:	54 52       	ld.w %d2,[%a5]
80003efa:	b7 12 01 2f 	insert %d2,%d2,1,30,1
80003efe:	74 52       	st.w [%a5],%d2
    MODULE_SCU.SEICON0.U = (0xFFFCU << 16U) | (password << IFX_SCU_SEICON0_EPW_OFF) | (1 << IFX_SCU_SEICON0_ENDINIT_OFF);
80003f00:	59 40 34 a0 	st.w [%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>,%d0
    while (MODULE_SCU.SEICON0.B.ENDINIT == 0)
80003f04:	19 42 34 a0 	ld.w %d2,[%a4]692 <f00302b4 <bmhd_3_copy+0x40c2ecb4>>
80003f08:	6f 12 fe 7f 	jz.t %d2,1,80003f04 <Ifx_Ssw_Pms_Init+0xfa>
80003f0c:	3b f0 0f 20 	mov %d2,255
            } while (PMS_EVRSDCTRL0.B.UP == 1);
80003f10:	54 53       	ld.w %d3,[%a5]
80003f12:	37 03 61 3f 	extr.u %d3,%d3,30,1
80003f16:	5f 43 ba ff 	jne %d3,%d4,80003e8a <Ifx_Ssw_Pms_Init+0x80>
                if (--timeoutCount <= 0)
80003f1a:	c2 f2       	add %d2,-1
80003f1c:	df 02 fa ff 	jne %d2,0,80003f10 <Ifx_Ssw_Pms_Init+0x106>
                    pmsInitDone = FALSE;
80003f20:	02 98       	mov %d8,%d9
80003f22:	1d ff b4 ff 	j 80003e8a <Ifx_Ssw_Pms_Init+0x80>
    if (IfxPmsEvr_runInitSequence(&IfxPmsEvr_cfgSequenceDefault) == 0)
80003f26:	df 08 82 ff 	jne %d8,0,80003e2a <Ifx_Ssw_Pms_Init+0x20>
    __asm__ volatile ("debug" : : : "memory");
80003f2a:	00 a0       	debug 
}
80003f2c:	1d ff 7f ff 	j 80003e2a <Ifx_Ssw_Pms_Init+0x20>

80003f30 <Ifx_Ssw_Pms_InitCheck>:

#if (IFX_CFG_SSW_ENABLE_PMS_INIT_CHECK == 1U)
void Ifx_Ssw_Pms_InitCheck(void)
{
80003f30:	40 ae       	mov.aa %a14,%sp
    if (PMS_EVRSTAT.B.EVRC == 1U)
80003f32:	91 50 02 2f 	movh.a %a2,61477
80003f36:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80003f3a:	54 22       	ld.w %d2,[%a2]
80003f3c:	6f 02 04 80 	jnz.t %d2,0,80003f44 <Ifx_Ssw_Pms_InitCheck+0x14>
80003f40:	dc 0b       	ji %a11
    {
        __debug();
        /* Application may have call to error handling here */
    }
    Ifx_Ssw_jumpBackToLink();
}
80003f42:	00 90       	ret 
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003f44:	91 00 00 28 	movh.a %a2,32768
80003f48:	39 25 0c c0 	ld.bu %d5,[%a2]780 <8000030c <IfxPmsEvr_checkRegCfgDefault>>
80003f4c:	bf 15 1d 00 	jlt %d5,1,80003f86 <Ifx_Ssw_Pms_InitCheck+0x56>
            const IfxPmsEvr_StepDownRegulatorRegConfig *regConfig = &checkConfig->regConfig[regCfgCount];
80003f50:	d9 22 0c c0 	lea %a2,[%a2]780 <8000030c <IfxPmsEvr_checkRegCfgDefault>>
80003f54:	b0 42       	add.a %a2,4
80003f56:	d4 22       	ld.a %a2,[%a2]
    boolean allRight = TRUE;
80003f58:	82 12       	mov %d2,1
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003f5a:	82 03       	mov %d3,0
            regVal  = (*((volatile uint32 *)regConfig->regAddr));
80003f5c:	d4 23       	ld.a %a3,[%a2]
80003f5e:	54 34       	ld.w %d4,[%a3]
            regVal &= regConfig->mask;
80003f60:	19 26 08 00 	ld.w %d6,[%a2]8
80003f64:	26 64       	and %d4,%d6
            if (regVal != regConfig->value)
80003f66:	19 26 04 00 	ld.w %d6,[%a2]4
                allRight = FALSE;
80003f6a:	0b 64 00 41 	eq %d4,%d4,%d6
80003f6e:	ab 02 80 24 	sel %d2,%d4,%d2,0
        for (regCfgCount = 0; regCfgCount < checkConfig->numOfRegisters; regCfgCount++)
80003f72:	c2 13       	add %d3,1
80003f74:	d9 22 0c 00 	lea %a2,[%a2]12
80003f78:	5f 53 f2 ff 	jne %d3,%d5,80003f5c <Ifx_Ssw_Pms_InitCheck+0x2c>
        if (allRight == TRUE)
80003f7c:	df 12 05 00 	jeq %d2,1,80003f86 <Ifx_Ssw_Pms_InitCheck+0x56>
    __asm__ volatile ("debug" : : : "memory");
80003f80:	00 a0       	debug 
}
80003f82:	1d ff df ff 	j 80003f40 <Ifx_Ssw_Pms_InitCheck+0x10>
            if (PMS_EVRSTAT.B.SDVOK != 1)
80003f86:	91 50 02 2f 	movh.a %a2,61477
80003f8a:	d9 22 2c 08 	lea %a2,[%a2]-32724 <f024802c <bmhd_3_copy+0x40e46a2c>>
80003f8e:	54 22       	ld.w %d2,[%a2]
80003f90:	ef 52 d8 ff 	jnz.t %d2,21,80003f40 <Ifx_Ssw_Pms_InitCheck+0x10>
80003f94:	1d ff f6 ff 	j 80003f80 <Ifx_Ssw_Pms_InitCheck+0x50>

80003f98 <canIsrTxHandler>:

/* Interrupt Service Routine (ISR) called once the TX interrupt has been generated.
 * Turns on the LED1 to indicate successful CAN message transmission.
 */
void canIsrTxHandler(void)
{
80003f98:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Transmission Completed" interrupt flag */
    //����
    IfxCan_Node_clearInterruptFlag(g_mcmcan.canSrcNode.node, IfxCan_Interrupt_transmissionCompleted);
80003f9a:	91 00 00 27 	movh.a %a2,28672
80003f9e:	d9 22 3c 00 	lea %a2,[%a2]60 <7000003c <g_mcmcan>>
80003fa2:	d9 22 0c 00 	lea %a2,[%a2]12 <7000000c <LCF_DSPR0_START+0xc>>
80003fa6:	d4 22       	ld.a %a2,[%a2]
    node->IR.U = value;
80003fa8:	3b 00 20 20 	mov %d2,512
80003fac:	59 22 10 50 	st.w [%a2]336,%d2
    /* Just to indicate that the CAN message has been transmitted by turning on LED1 */
    IfxPort_setPinLow(g_led1.port, g_led1.pinIndex);
80003fb0:	91 00 00 27 	movh.a %a2,28672
80003fb4:	d9 23 2c 00 	lea %a3,[%a2]44 <7000002c <g_led1>>
80003fb8:	99 22 2c 00 	ld.a %a2,[%a2]44 <7000002c <g_led1>>
80003fbc:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000002c <g_led1>>
}


IFX_INLINE void IfxPort_setPinState(Ifx_P *port, uint8 pinIndex, IfxPort_State action)
{
    port->OMR.U = action << pinIndex;
80003fc0:	7b 10 00 30 	movh %d3,1
80003fc4:	0f 23 00 20 	sh %d2,%d3,%d2
80003fc8:	59 22 04 00 	st.w [%a2]4,%d2
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }

}
80003fcc:	0d 00 40 02 	rslcx 
80003fd0:	00 80       	rfe 

80003fd2 <canIsrRxHandler>:
/* Interrupt Service Routine (ISR) called once the RX interrupt has been generated.
 * Compares the content of the received CAN message with the content of the transmitted CAN message
 * and in case of success, turns on the LED2 to indicate successful CAN message reception.
 */
void canIsrRxHandler(void)
{
80003fd2:	40 ae       	mov.aa %a14,%sp
    /* Clear the "Message stored to Dedicated RX Buffer" interrupt flag */
    IfxCan_Node_clearInterruptFlag(g_mcmcan.canDstNode.node, IfxCan_Interrupt_rxFifo0NewMessage);
80003fd4:	91 00 00 47 	movh.a %a4,28672
80003fd8:	d9 44 3c 00 	lea %a4,[%a4]60 <7000003c <g_mcmcan>>
80003fdc:	99 42 2c 00 	ld.a %a2,[%a4]44 <7000002c <g_led1>>
80003fe0:	82 12       	mov %d2,1
80003fe2:	59 22 10 50 	st.w [%a2]336,%d2

    /* Read the received CAN message */
    g_mcmcan.rxMsg.readFromRxFifo0 = TRUE;
80003fe6:	e9 42 02 80 	st.b [%a4]514 <70000202 <g_mcmcan+0x1c6>>,%d2
    g_mcmcan.rxMsg.readFromRxFifo1 = FALSE;
80003fea:	82 02       	mov %d2,0
80003fec:	e9 42 03 80 	st.b [%a4]515 <70000203 <g_mcmcan+0x1c7>>,%d2

    IfxCan_Can_readMessage(&g_mcmcan.canDstNode, &g_mcmcan.rxMsg, g_mcmcan.rxData);
80003ff0:	d9 46 0c 80 	lea %a6,[%a4]524 <7000020c <g_mcmcan+0x1d0>>
80003ff4:	d9 45 24 70 	lea %a5,[%a4]484 <700001e4 <g_mcmcan+0x1a8>>
80003ff8:	d9 44 28 00 	lea %a4,[%a4]40 <70000028 <g_led2+0xc>>
80003ffc:	6d ff 74 fb 	call 800036e4 <IfxCan_Can_readMessage>
    IfxPort_setPinState(g_led2.port, g_led2.pinIndex,  IfxPort_State_toggled);
80004000:	91 00 00 27 	movh.a %a2,28672
80004004:	d9 23 1c 00 	lea %a3,[%a2]28 <7000001c <g_led2>>
80004008:	99 22 1c 00 	ld.a %a2,[%a2]28 <7000001c <g_led2>>
8000400c:	39 32 04 00 	ld.bu %d2,[%a3]4 <7000001c <g_led2>>
80004010:	7b 10 00 30 	movh %d3,1
80004014:	c2 13       	add %d3,1
80004016:	0f 23 00 20 	sh %d2,%d3,%d2
8000401a:	59 22 04 00 	st.w [%a2]4,%d2
//        ( g_mcmcan.rxMsg.messageId == g_mcmcan.txMsg.messageId ) )
//    {
//        /* Turn on the LED2 to indicate correctness of the received message */
//        IfxPort_setPinLow(g_led2.port, g_led2.pinIndex);
//    }
}
8000401e:	0d 00 40 02 	rslcx 
80004022:	00 80       	rfe 

80004024 <initMcmcan>:



/* Function to initialize MCMCAN module and nodes related for this application use case */
void initMcmcan(void)
{
80004024:	40 ae       	mov.aa %a14,%sp
80004026:	20 18       	sub.a %sp,24
    IfxCan_Can_initModuleConfig(&g_mcmcan.canConfig, &MODULE_CAN0);
80004028:	91 00 00 c7 	movh.a %a12,28672
8000402c:	d9 cc 3c 00 	lea %a12,[%a12]60 <7000003c <g_mcmcan>>
80004030:	91 00 02 5f 	movh.a %a5,61472
80004034:	40 c4       	mov.aa %a4,%a12
80004036:	6d ff 12 f3 	call 8000265a <IfxCan_Can_initModuleConfig>

    IfxCan_Can_initModule(&g_mcmcan.canModule, &g_mcmcan.canConfig);
8000403a:	80 c2       	mov.d %d2,%a12
8000403c:	1b 42 00 80 	addi %d8,%d2,4
80004040:	40 c5       	mov.aa %a5,%a12
80004042:	60 84       	mov.a %a4,%d8
80004044:	6d ff fa f2 	call 80002638 <IfxCan_Can_initModule>


    IfxCan_Can_initNodeConfig(&g_mcmcan.canNodeConfig, &g_mcmcan.canModule);
80004048:	80 c2       	mov.d %d2,%a12
8000404a:	1b 82 04 90 	addi %d9,%d2,72
8000404e:	60 85       	mov.a %a5,%d8
80004050:	60 94       	mov.a %a4,%d9
80004052:	6d ff 3c fa 	call 800034ca <IfxCan_Can_initNodeConfig>


    g_mcmcan.canNodeConfig.nodeId = IfxCan_NodeId_0;
80004056:	82 08       	mov %d8,0
80004058:	59 c8 0c 10 	st.w [%a12]76 <7000004c <g_mcmcan+0x10>>,%d8


    g_mcmcan.canNodeConfig.frame.type = IfxCan_FrameType_transmitAndReceive;
8000405c:	82 22       	mov %d2,2
8000405e:	59 c2 14 10 	st.w [%a12]84 <70000054 <g_mcmcan+0x18>>,%d2


    g_mcmcan.canNodeConfig.baudRate.baudrate = 500000;
80004062:	7b 80 00 30 	movh %d3,8
80004066:	1b 03 12 3a 	addi %d3,%d3,-24288
8000406a:	59 c3 1c 10 	st.w [%a12]92 <7000005c <g_mcmcan+0x20>>,%d3
    g_mcmcan.canNodeConfig.baudRate.prescaler = 0;
8000406e:	f9 c8 24 10 	st.h [%a12]100 <70000064 <g_mcmcan+0x28>>,%d8
    g_mcmcan.canNodeConfig.baudRate.samplePoint = 8000;
80004072:	3b 00 f4 31 	mov %d3,8000
80004076:	f9 c3 20 10 	st.h [%a12]96 <70000060 <g_mcmcan+0x24>>,%d3
    g_mcmcan.canNodeConfig.baudRate.syncJumpWidth = 2000;
8000407a:	3b 00 7d 30 	mov %d3,2000
8000407e:	f9 c3 22 10 	st.h [%a12]98 <70000062 <g_mcmcan+0x26>>,%d3
    g_mcmcan.canNodeConfig.baudRate.timeSegment1 = 3;
80004082:	82 33       	mov %d3,3
80004084:	e9 c3 26 10 	st.b [%a12]102 <70000066 <g_mcmcan+0x2a>>,%d3
    g_mcmcan.canNodeConfig.baudRate.timeSegment2 = 10;
80004088:	3b a0 00 30 	mov %d3,10
8000408c:	e9 c3 27 10 	st.b [%a12]103 <70000067 <g_mcmcan+0x2b>>,%d3

    g_mcmcan.canNodeConfig.pins = &Can0PortInf0;
80004090:	91 00 00 28 	movh.a %a2,32768
80004094:	d9 22 5c 50 	lea %a2,[%a2]1372 <8000055c <Can0PortInf0>>
80004098:	b5 c2 24 60 	st.a [%a12]420 <700001a4 <g_mcmcan+0x168>>,%a2


    g_mcmcan.canNodeConfig.interruptConfig.transmissionCompletedEnabled = TRUE;
8000409c:	82 1a       	mov %d10,1
8000409e:	e9 ca 11 30 	st.b [%a12]209 <700000d1 <g_mcmcan+0x95>>,%d10

    g_mcmcan.canNodeConfig.interruptConfig.rxFifo0NewMessageEnabled = TRUE;
800040a2:	e9 ca 08 30 	st.b [%a12]200 <700000c8 <g_mcmcan+0x8c>>,%d10


    g_mcmcan.canNodeConfig.interruptConfig.traco.priority = ISR_PRIORITY_CAN_TX;
800040a6:	f9 c2 1c 60 	st.h [%a12]412 <7000019c <g_mcmcan+0x160>>,%d2
    g_mcmcan.canNodeConfig.interruptConfig.traco.interruptLine = IfxCan_InterruptLine_0;
800040aa:	59 c8 18 60 	st.w [%a12]408 <70000198 <g_mcmcan+0x15c>>,%d8
    g_mcmcan.canNodeConfig.interruptConfig.traco.typeOfService = IfxSrc_Tos_cpu0;
800040ae:	59 c8 20 60 	st.w [%a12]416 <700001a0 <g_mcmcan+0x164>>,%d8



    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.priority = ISR_PRIORITY_CAN_FIFO0_RX;
800040b2:	82 32       	mov %d2,3
800040b4:	f9 c2 38 50 	st.h [%a12]376 <70000178 <g_mcmcan+0x13c>>,%d2
    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.interruptLine = IfxCan_InterruptLine_1;
800040b8:	82 1c       	mov %d12,1
800040ba:	59 cc 34 50 	st.w [%a12]372 <70000174 <g_mcmcan+0x138>>,%d12
    g_mcmcan.canNodeConfig.interruptConfig.rxf0n.typeOfService = IfxSrc_Tos_cpu0;
800040be:	59 c8 3c 50 	st.w [%a12]380 <7000017c <g_mcmcan+0x140>>,%d8

    g_mcmcan.canNodeConfig.rxConfig.rxMode = IfxCan_RxMode_fifo0;
800040c2:	59 cc 18 20 	st.w [%a12]152 <70000098 <g_mcmcan+0x5c>>,%d12
    g_mcmcan.canNodeConfig.rxConfig.rxFifo0DataFieldSize = IfxCan_DataFieldSize_8;
800040c6:	59 c8 20 20 	st.w [%a12]160 <700000a0 <g_mcmcan+0x64>>,%d8
    g_mcmcan.canNodeConfig.rxConfig.rxFifo0Size = 15;
800040ca:	3b f0 00 20 	mov %d2,15
800040ce:	e9 c2 32 20 	st.b [%a12]178 <700000b2 <g_mcmcan+0x76>>,%d2

    IfxCan_Can_initNode(&g_mcmcan.canSrcNode, &g_mcmcan.canNodeConfig);
800040d2:	60 95       	mov.a %a5,%d9
800040d4:	d9 c4 08 00 	lea %a4,[%a12]8 <70000008 <LCF_DSPR0_START+0x8>>
800040d8:	6d ff c6 f2 	call 80002664 <IfxCan_Can_initNode>

    IfxCan_Can_initNode(&g_mcmcan.canDstNode, &g_mcmcan.canNodeConfig);
800040dc:	80 c2       	mov.d %d2,%a12
800040de:	1b 82 02 b0 	addi %d11,%d2,40
800040e2:	60 95       	mov.a %a5,%d9
800040e4:	60 b4       	mov.a %a4,%d11
800040e6:	6d ff bf f2 	call 80002664 <IfxCan_Can_initNode>
//    g_mcmcan.canFilter.rxBufferOffset = IfxCan_RxBufferId_0;
//    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &g_mcmcan.canFilter);

    IfxCan_Filter filter;

    filter.number = 0;
800040ea:	e9 e8 e8 ff 	st.b [%a14]-24,%d8
    filter.type = IfxCan_FilterType_range;
800040ee:	59 e8 f0 ff 	st.w [%a14]-16,%d8
    filter.elementConfiguration = IfxCan_FilterElementConfiguration_storeInRxFifo0;
800040f2:	59 ec ec ff 	st.w [%a14]-20,%d12
    filter.id1 = 0;
800040f6:	59 e8 f4 ff 	st.w [%a14]-12,%d8
    filter.id2 = 10;
800040fa:	3b a0 00 20 	mov %d2,10
800040fe:	59 e2 f8 ff 	st.w [%a14]-8,%d2
    //filter.rxBufferOffset = IfxCan_RxBufferId_0;
    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &filter);
80004102:	d9 e5 e8 ff 	lea %a5,[%a14]-24
80004106:	60 b4       	mov.a %a4,%d11
80004108:	6d ff f3 fb 	call 800038ee <IfxCan_Can_setStandardFilter>
//    IfxCan_Can_setStandardFilter(&g_mcmcan.canDstNode, &filter);




    IfxCan_Can_initMessage(&g_mcmcan.rxMsg);
8000410c:	d9 c4 24 70 	lea %a4,[%a12]484 <700001e4 <g_mcmcan+0x1a8>>
80004110:	6d ff 74 f2 	call 800025f8 <IfxCan_Can_initMessage>
    g_mcmcan.rxMsg.readFromRxFifo0=TRUE;
80004114:	e9 ca 02 80 	st.b [%a12]514 <70000202 <g_mcmcan+0x1c6>>,%d10
    memset((void *)(&g_mcmcan.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
80004118:	7b 60 5a 2a 	movh %d2,42406
8000411c:	1b 52 5a 2a 	addi %d2,%d2,-23131
80004120:	59 c2 0c 80 	st.w [%a12]524 <7000020c <g_mcmcan+0x1d0>>,%d2
80004124:	59 c2 10 80 	st.w [%a12]528 <70000210 <g_mcmcan+0x1d4>>,%d2
}
80004128:	00 90       	ret 

8000412a <transmitCanMessage>:

/* Function to initialize both TX and RX messages with the default data values.
 * After initialization of the messages, the TX message is transmitted.
 */
void transmitCanMessage(void)
{
8000412a:	40 ae       	mov.aa %a14,%sp
    /* Initialization of the RX message with the default configuration */
    IfxCan_Can_initMessage(&g_mcmcan.rxMsg);
8000412c:	91 00 00 c7 	movh.a %a12,28672
80004130:	d9 cc 20 80 	lea %a12,[%a12]544 <70000220 <g_mcmcan+0x1e4>>
80004134:	40 c4       	mov.aa %a4,%a12
80004136:	6d ff 61 f2 	call 800025f8 <IfxCan_Can_initMessage>

    /* Invalidation of the RX message data content */
    memset((void *)(&g_mcmcan.rxData[0]), INVALID_RX_DATA_VALUE, MAXIMUM_CAN_DATA_PAYLOAD * sizeof(uint32));
8000413a:	7b 60 5a 2a 	movh %d2,42406
8000413e:	1b 52 5a 2a 	addi %d2,%d2,-23131
80004142:	59 c2 28 00 	st.w [%a12]40 <70000028 <g_led2+0xc>>,%d2
80004146:	59 c2 2c 00 	st.w [%a12]44 <7000002c <g_led1>>,%d2

    /* Initialization of the TX message with the default configuration */
    IfxCan_Can_initMessage(&g_mcmcan.txMsg);
8000414a:	d9 c4 e0 ff 	lea %a4,[%a12]-32 <6fffffe0 <__CSA1_END+0xffc43e0>>
8000414e:	6d ff 55 f2 	call 800025f8 <IfxCan_Can_initMessage>

    /* Define the content of the data to be transmitted */
    g_mcmcan.txData[0] = TX_DATA_LOW_WORD;
80004152:	7b b0 0c 2c 	movh %d2,49355
80004156:	1b a2 01 2c 	addi %d2,%d2,-16358
8000415a:	59 c2 20 00 	st.w [%a12]32 <70000020 <g_led2+0x4>>,%d2
    g_mcmcan.txData[1] = TX_DATA_HIGH_WORD;
8000415e:	7b f0 a5 2b 	movh %d2,47711
80004162:	1b 12 a1 2b 	addi %d2,%d2,-17903
80004166:	59 c2 24 00 	st.w [%a12]36 <70000024 <g_led2+0x8>>,%d2

    /* Set the message ID that is used during the receive acceptance phase */
    g_mcmcan.txMsg.messageId = CAN_MESSAGE_ID;
8000416a:	3b 70 77 20 	mov %d2,1911
8000416e:	59 c2 e4 ff 	st.w [%a12]-28 <6fffffe4 <__CSA1_END+0xffc43e4>>,%d2

    /* Send the CAN message with the previously defined TX message content */
    while( IfxCan_Status_notSentBusy ==
           IfxCan_Can_sendMessage(&g_mcmcan.canSrcNode, &g_mcmcan.txMsg, &g_mcmcan.txData[0]) )
80004172:	91 00 00 67 	movh.a %a6,28672
80004176:	d9 66 00 90 	lea %a6,[%a6]576 <70000240 <g_mcmcan+0x204>>
8000417a:	d9 65 c0 ff 	lea %a5,[%a6]-64 <6fffffc0 <__CSA1_END+0xffc43c0>>
8000417e:	d9 64 c4 8f 	lea %a4,[%a6]-508 <6ffffe04 <__CSA1_END+0xffc4204>>
80004182:	6d ff 33 fb 	call 800037e8 <IfxCan_Can_sendMessage>
    while( IfxCan_Status_notSentBusy ==
80004186:	8b 02 02 22 	eq %d2,%d2,32
8000418a:	df 02 f4 ff 	jne %d2,0,80004172 <transmitCanMessage+0x48>
    {
    }
}
8000418e:	00 90       	ret 

80004190 <initLeds>:

/* Function to initialize the LEDs */
void initLeds(void)
{
80004190:	40 ae       	mov.aa %a14,%sp
     *  - define the GPIO pin that is connected to the LED
     *  - define the general GPIO pin usage (no alternate function used)
     *  - define the pad driver strength
     * ======================================================================
     */
    g_led1.port      = &MODULE_P21;
80004192:	7b 00 00 87 	movh %d8,28672
80004196:	60 82       	mov.a %a2,%d8
80004198:	d9 2d 2c 00 	lea %a13,[%a2]44
8000419c:	91 40 00 4f 	movh.a %a4,61444
800041a0:	d9 44 40 4b 	lea %a4,[%a4]-19200 <f003b500 <bmhd_3_copy+0x40c39f00>>
800041a4:	b5 24 2c 00 	st.a [%a2]44 <f003b500 <bmhd_3_copy+0x40c39f00>>,%a4
    g_led1.pinIndex  = 4;
800041a8:	82 42       	mov %d2,4
800041aa:	e9 d2 04 00 	st.b [%a13]4,%d2
    g_led1.mode      = IfxPort_OutputIdx_general;
800041ae:	3b 00 08 50 	mov %d5,128
800041b2:	59 d5 08 00 	st.w [%a13]8,%d5
    g_led1.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800041b6:	82 03       	mov %d3,0
800041b8:	59 d3 0c 00 	st.w [%a13]12,%d3

    g_led2.port      = &MODULE_P21;
800041bc:	91 00 00 f7 	movh.a %a15,28672
800041c0:	d9 fc 1c 00 	lea %a12,[%a15]28 <7000001c <g_led2>>
800041c4:	b5 f4 1c 00 	st.a [%a15]28 <7000001c <g_led2>>,%a4
    g_led2.pinIndex  = 5;
800041c8:	82 52       	mov %d2,5
800041ca:	e9 c2 04 00 	st.b [%a12]4,%d2
    g_led2.mode      = IfxPort_OutputIdx_general;
800041ce:	59 c5 08 00 	st.w [%a12]8,%d5
    g_led2.padDriver = IfxPort_PadDriver_cmosAutomotiveSpeed1;
800041d2:	59 c3 0c 00 	st.w [%a12]12,%d3
800041d6:	3b 00 01 20 	mov %d2,16
800041da:	d9 42 04 00 	lea %a2,[%a4]4 <f0040004 <bmhd_3_copy+0x40c3ea04>>
800041de:	59 42 04 00 	st.w [%a4]4 <f0040004 <bmhd_3_copy+0x40c3ea04>>,%d2
800041e2:	3b 00 02 20 	mov %d2,32
800041e6:	74 22       	st.w [%a2],%d2
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
800041e8:	82 44       	mov %d4,4
800041ea:	6d ff 60 ec 	call 80001aaa <IfxPort_setPinMode>
    IfxPort_setPinHigh(g_led1.port, g_led1.pinIndex);
    IfxPort_setPinHigh(g_led2.port, g_led2.pinIndex);

    /* Set the pin input/output mode for both pins connected to the LEDs */
    IfxPort_setPinModeOutput(g_led1.port, g_led1.pinIndex, IfxPort_OutputMode_pushPull, g_led1.mode);
    IfxPort_setPinModeOutput(g_led2.port, g_led2.pinIndex, IfxPort_OutputMode_pushPull, g_led2.mode);
800041ee:	19 c5 08 00 	ld.w %d5,[%a12]8
800041f2:	8f 05 48 51 	or %d5,%d5,128
800041f6:	39 c4 04 00 	ld.bu %d4,[%a12]4
800041fa:	99 f4 1c 00 	ld.a %a4,[%a15]28 <7000001c <g_led2>>
800041fe:	6d ff 56 ec 	call 80001aaa <IfxPort_setPinMode>

    /* Set the pad driver mode for both pins connected to the LEDs */
    IfxPort_setPinPadDriver(g_led1.port, g_led1.pinIndex, g_led1.padDriver);
80004202:	19 d5 0c 00 	ld.w %d5,[%a13]12
80004206:	39 d4 04 00 	ld.bu %d4,[%a13]4
8000420a:	60 82       	mov.a %a2,%d8
8000420c:	99 24 2c 00 	ld.a %a4,[%a2]44
80004210:	6d ff 8a ec 	call 80001b24 <IfxPort_setPinPadDriver>
    IfxPort_setPinPadDriver(g_led2.port, g_led2.pinIndex, g_led2.padDriver);
80004214:	19 c5 0c 00 	ld.w %d5,[%a12]12
80004218:	39 c4 04 00 	ld.bu %d4,[%a12]4
8000421c:	99 f4 1c 00 	ld.a %a4,[%a15]28 <7000001c <g_led2>>
80004220:	6d ff 82 ec 	call 80001b24 <IfxPort_setPinPadDriver>
}
80004224:	00 90       	ret 

80004226 <memset>:
80004226:	40 42       	mov.aa %a2,%a4
80004228:	df 05 07 00 	jeq %d5,0,80004236 <memset+0x10>
8000422c:	60 53       	mov.a %a3,%d5
8000422e:	b0 f3       	add.a %a3,-1
80004230:	24 44       	st.b [%a4+],%d4
80004232:	fd 30 ff 7f 	loop %a3,80004230 <memset+0xa>
80004236:	00 90       	ret 

80004238 <__fixunsdfsi>:
80004238:	82 06       	mov %d6,0
8000423a:	7b 00 1e 74 	movh %d7,16864
8000423e:	60 4d       	mov.a %a13,%d4
80004240:	60 5c       	mov.a %a12,%d5
80004242:	6d 00 91 02 	call 80004764 <__gedf2>
80004246:	ff 02 07 00 	jge %d2,0,80004254 <__fixunsdfsi+0x1c>
8000424a:	80 d4       	mov.d %d4,%a13
8000424c:	80 c5       	mov.d %d5,%a12
8000424e:	6d 00 ab 02 	call 800047a4 <__fixdfsi>
80004252:	00 90       	ret 
80004254:	82 06       	mov %d6,0
80004256:	7b 00 1e 74 	movh %d7,16864
8000425a:	80 d4       	mov.d %d4,%a13
8000425c:	80 c5       	mov.d %d5,%a12
8000425e:	6d 00 4e 01 	call 800044fa <__subdf3>
80004262:	0b 23 10 48 	mov %e4,%d3,%d2
80004266:	6d 00 9f 02 	call 800047a4 <__fixdfsi>
8000426a:	9b 02 00 28 	addih %d2,%d2,32768
8000426e:	00 90       	ret 

80004270 <__extendsfdf2>:
80004270:	20 20       	sub.a %sp,32
80004272:	d9 a5 10 00 	lea %a5,[%sp]16
80004276:	d9 a4 0c 00 	lea %a4,[%sp]12
8000427a:	59 a4 0c 00 	st.w [%sp]12,%d4
8000427e:	6d 00 e1 02 	call 80004840 <__unpack_f>
80004282:	19 a2 1c 00 	ld.w %d2,[%sp]28
80004286:	19 a6 18 00 	ld.w %d6,[%sp]24
8000428a:	53 12 40 40 	mul.u %e4,%d2,1
8000428e:	77 45 00 3f 	dextr %d3,%d5,%d4,30
80004292:	8f e4 01 20 	sh %d2,%d4,30
80004296:	19 a5 14 00 	ld.w %d5,[%sp]20
8000429a:	19 a4 10 00 	ld.w %d4,[%sp]16
8000429e:	74 a2       	st.w [%sp],%d2
800042a0:	59 a3 04 00 	st.w [%sp]4,%d3
800042a4:	6d 00 be 02 	call 80004820 <__make_dp>
800042a8:	00 90       	ret 

800042aa <_fpadd_parts>:
800042aa:	54 42       	ld.w %d2,[%a4]
800042ac:	40 42       	mov.aa %a2,%a4
800042ae:	bf 22 c2 80 	jlt.u %d2,2,80004432 <_fpadd_parts+0x188>
800042b2:	54 53       	ld.w %d3,[%a5]
800042b4:	40 52       	mov.aa %a2,%a5
800042b6:	bf 23 be 80 	jlt.u %d3,2,80004432 <_fpadd_parts+0x188>
800042ba:	df 42 e3 00 	jeq %d2,4,80004480 <_fpadd_parts+0x1d6>
800042be:	df 43 ba 00 	jeq %d3,4,80004432 <_fpadd_parts+0x188>
800042c2:	df 23 b9 00 	jeq %d3,2,80004434 <_fpadd_parts+0x18a>
800042c6:	df 22 b6 00 	jeq %d2,2,80004432 <_fpadd_parts+0x188>
800042ca:	19 40 08 00 	ld.w %d0,[%a4]8
800042ce:	19 57 08 00 	ld.w %d7,[%a5]8
800042d2:	09 44 4c 09 	ld.d %e4,[%a4]12
800042d6:	0b 70 80 60 	sub %d6,%d0,%d7
800042da:	09 52 4c 09 	ld.d %e2,[%a5]12
800042de:	bf 06 c2 00 	jlt %d6,0,80004462 <_fpadd_parts+0x1b8>
800042e2:	8b 06 84 12 	ge %d1,%d6,64
800042e6:	df 01 c4 80 	jne %d1,0,8000446e <_fpadd_parts+0x1c4>
800042ea:	df 06 2a 00 	jeq %d6,0,8000433e <_fpadd_parts+0x94>
800042ee:	8b 06 82 72 	ge %d7,%d6,32
800042f2:	2b 32 50 97 	seln %d9,%d7,%d2,%d3
800042f6:	ab 03 a0 87 	seln %d8,%d7,%d3,0
800042fa:	8f f6 01 71 	and %d7,%d6,31
800042fe:	8b 07 02 11 	rsub %d1,%d7,32
80004302:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
80004306:	2b 91 40 17 	sel %d1,%d7,%d1,%d9
8000430a:	8b 06 82 a2 	ge %d10,%d6,32
8000430e:	32 57       	rsub %d7
80004310:	02 19       	mov %d9,%d1
80004312:	8f f6 01 61 	and %d6,%d6,31
80004316:	82 f1       	mov %d1,-1
80004318:	0f 78 00 80 	sh %d8,%d8,%d7
8000431c:	17 11 80 76 	dextr %d7,%d1,%d1,%d6
80004320:	0f 61 00 60 	sh %d6,%d1,%d6
80004324:	2b 67 50 7a 	seln %d7,%d10,%d7,%d6
80004328:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
8000432c:	0f 62 e0 10 	andn %d1,%d2,%d6
80004330:	0f 73 e0 60 	andn %d6,%d3,%d7
80004334:	a6 16       	or %d6,%d1
80004336:	8b 06 00 95 	or.ne %d9,%d6,0
8000433a:	0b 98 10 28 	mov %e2,%d8,%d9
8000433e:	19 41 04 00 	ld.w %d1,[%a4]4
80004342:	19 56 04 00 	ld.w %d6,[%a5]4
80004346:	5f 61 4c 00 	jeq %d1,%d6,800043de <_fpadd_parts+0x134>
8000434a:	0b 24 c0 60 	subx %d6,%d4,%d2
8000434e:	0b 35 d0 70 	subc %d7,%d5,%d3
80004352:	df 01 06 00 	jeq %d1,0,8000435e <_fpadd_parts+0xb4>
80004356:	0b 42 c0 60 	subx %d6,%d2,%d4
8000435a:	0b 53 d0 70 	subc %d7,%d3,%d5
8000435e:	8b 07 00 31 	rsub %d3,%d7,0
80004362:	8b 06 00 91 	rsub %d9,%d6,0
80004366:	ab f3 1f 36 	cadd %d3,%d6,%d3,-1
8000436a:	82 12       	mov %d2,1
8000436c:	bf 07 05 00 	jlt %d7,0,80004376 <_fpadd_parts+0xcc>
80004370:	02 69       	mov %d9,%d6
80004372:	02 73       	mov %d3,%d7
80004374:	82 02       	mov %d2,0
80004376:	8b f9 9f 70 	addx %d7,%d9,-1
8000437a:	82 f5       	mov %d5,-1
8000437c:	8b f3 bf 60 	addc %d6,%d3,-1
80004380:	06 c5       	sh %d5,-4
80004382:	59 62 04 00 	st.w [%a6]4,%d2
80004386:	82 e1       	mov %d1,-2
80004388:	0b 56 00 21 	eq %d2,%d6,%d5
8000438c:	0b 71 30 22 	and.lt.u %d2,%d1,%d7
80004390:	59 60 08 00 	st.w [%a6]8,%d0
80004394:	59 69 0c 00 	st.w [%a6]12,%d9
80004398:	59 63 10 00 	st.w [%a6]16,%d3
8000439c:	0b 65 a0 22 	or.lt.u %d2,%d5,%d6
800043a0:	df 02 2b 80 	jne %d2,0,800043f6 <_fpadd_parts+0x14c>
800043a4:	1b f0 ff 7f 	addi %d7,%d0,-1
800043a8:	77 93 80 30 	dextr %d3,%d3,%d9,1
800043ac:	06 19       	sh %d9,1
800043ae:	8b f9 9f 00 	addx %d0,%d9,-1
800043b2:	8b f3 bf 60 	addc %d6,%d3,-1
800043b6:	0b 56 00 21 	eq %d2,%d6,%d5
800043ba:	0b 01 50 22 	and.ge.u %d2,%d1,%d0
800043be:	0b 56 a0 22 	or.lt.u %d2,%d6,%d5
800043c2:	02 78       	mov %d8,%d7
800043c4:	c2 f7       	add %d7,-1
800043c6:	df 02 f1 ff 	jne %d2,0,800043a8 <_fpadd_parts+0xfe>
800043ca:	82 32       	mov %d2,3
800043cc:	59 69 0c 00 	st.w [%a6]12,%d9
800043d0:	59 63 10 00 	st.w [%a6]16,%d3
800043d4:	59 68 08 00 	st.w [%a6]8,%d8
800043d8:	74 62       	st.w [%a6],%d2
800043da:	40 62       	mov.aa %a2,%a6
800043dc:	00 90       	ret 
800043de:	0b 24 40 90 	addx %d9,%d4,%d2
800043e2:	0b 35 50 30 	addc %d3,%d5,%d3
800043e6:	59 61 04 00 	st.w [%a6]4,%d1
800043ea:	59 60 08 00 	st.w [%a6]8,%d0
800043ee:	59 69 0c 00 	st.w [%a6]12,%d9
800043f2:	59 63 10 00 	st.w [%a6]16,%d3
800043f6:	82 32       	mov %d2,3
800043f8:	7b 00 00 52 	movh %d5,8192
800043fc:	40 62       	mov.aa %a2,%a6
800043fe:	74 62       	st.w [%a6],%d2
80004400:	0b 53 00 21 	eq %d2,%d3,%d5
80004404:	b7 02 01 20 	insert %d2,%d2,0,0,1
80004408:	0b 53 a0 22 	or.lt.u %d2,%d3,%d5
8000440c:	df 02 13 80 	jne %d2,0,80004432 <_fpadd_parts+0x188>
80004410:	8f f3 1f 20 	sh %d2,%d3,-1
80004414:	77 93 80 5f 	dextr %d5,%d3,%d9,31
80004418:	8f 19 00 31 	and %d3,%d9,1
8000441c:	59 62 10 00 	st.w [%a6]16,%d2
80004420:	19 62 08 00 	ld.w %d2,[%a6]8
80004424:	a6 53       	or %d3,%d5
80004426:	c2 12       	add %d2,1
80004428:	d9 63 08 00 	lea %a3,[%a6]8
8000442c:	59 63 0c 00 	st.w [%a6]12,%d3
80004430:	74 32       	st.w [%a3],%d2
80004432:	00 90       	ret 
80004434:	40 42       	mov.aa %a2,%a4
80004436:	df 22 fe ff 	jne %d2,2,80004432 <_fpadd_parts+0x188>
8000443a:	40 63       	mov.aa %a3,%a6
8000443c:	09 44 48 01 	ld.d %e4,[%a4+]8
80004440:	89 34 48 01 	st.d [%a3+]8,%e4
80004444:	09 44 48 01 	ld.d %e4,[%a4+]8
80004448:	89 34 48 01 	st.d [%a3+]8,%e4
8000444c:	44 44       	ld.w %d4,[%a4+]
8000444e:	64 34       	st.w [%a3+],%d4
80004450:	19 23 04 00 	ld.w %d3,[%a2]4
80004454:	19 52 04 00 	ld.w %d2,[%a5]4
80004458:	40 62       	mov.aa %a2,%a6
8000445a:	26 32       	and %d2,%d3
8000445c:	59 62 04 00 	st.w [%a6]4,%d2
80004460:	00 90       	ret 
80004462:	0b 07 80 60 	sub %d6,%d7,%d0
80004466:	8b 06 44 12 	lt %d1,%d6,64
8000446a:	df 01 1d 80 	jne %d1,0,800044a4 <_fpadd_parts+0x1fa>
8000446e:	3f 07 06 00 	jlt %d7,%d0,8000447a <_fpadd_parts+0x1d0>
80004472:	d2 04       	mov %e4,0
80004474:	02 70       	mov %d0,%d7
80004476:	1d ff 64 ff 	j 8000433e <_fpadd_parts+0x94>
8000447a:	d2 02       	mov %e2,0
8000447c:	1d ff 61 ff 	j 8000433e <_fpadd_parts+0x94>
80004480:	40 42       	mov.aa %a2,%a4
80004482:	df 43 d8 ff 	jne %d3,4,80004432 <_fpadd_parts+0x188>
80004486:	19 43 04 00 	ld.w %d3,[%a4]4
8000448a:	19 52 04 00 	ld.w %d2,[%a5]4
8000448e:	7b 00 00 48 	movh %d4,32768
80004492:	0b 23 10 21 	ne %d2,%d3,%d2
80004496:	1b 04 21 40 	addi %d4,%d4,528
8000449a:	80 43       	mov.d %d3,%a4
8000449c:	2b 43 50 22 	seln %d2,%d2,%d3,%d4
800044a0:	60 22       	mov.a %a2,%d2
800044a2:	00 90       	ret 
800044a4:	8b 06 82 02 	ge %d0,%d6,32
800044a8:	2b 54 50 90 	seln %d9,%d0,%d4,%d5
800044ac:	ab 05 a0 80 	seln %d8,%d0,%d5,0
800044b0:	8f f6 01 01 	and %d0,%d6,31
800044b4:	8b 00 02 11 	rsub %d1,%d0,32
800044b8:	17 98 80 11 	dextr %d1,%d8,%d9,%d1
800044bc:	2b 91 40 10 	sel %d1,%d0,%d1,%d9
800044c0:	8b 06 82 a2 	ge %d10,%d6,32
800044c4:	32 50       	rsub %d0
800044c6:	02 19       	mov %d9,%d1
800044c8:	8f f6 01 61 	and %d6,%d6,31
800044cc:	82 f1       	mov %d1,-1
800044ce:	0f 08 00 80 	sh %d8,%d8,%d0
800044d2:	17 11 80 06 	dextr %d0,%d1,%d1,%d6
800044d6:	0f 61 00 60 	sh %d6,%d1,%d6
800044da:	2b 60 50 0a 	seln %d0,%d10,%d0,%d6
800044de:	ab 06 a0 6a 	seln %d6,%d10,%d6,0
800044e2:	0f 64 e0 10 	andn %d1,%d4,%d6
800044e6:	0f 05 e0 60 	andn %d6,%d5,%d0
800044ea:	a6 16       	or %d6,%d1
800044ec:	8b 06 00 95 	or.ne %d9,%d6,0
800044f0:	0b 98 10 48 	mov %e4,%d8,%d9
800044f4:	02 70       	mov %d0,%d7
800044f6:	1d ff 24 ff 	j 8000433e <_fpadd_parts+0x94>

800044fa <__subdf3>:
800044fa:	20 50       	sub.a %sp,80
800044fc:	d9 a5 14 00 	lea %a5,[%sp]20
80004500:	d9 a4 04 00 	lea %a4,[%sp]4
80004504:	89 a4 44 09 	st.d [%sp]4,%e4
80004508:	89 a6 4c 09 	st.d [%sp]12,%e6
8000450c:	6d 00 ad 02 	call 80004a66 <__unpack_d>
80004510:	d9 a5 28 00 	lea %a5,[%sp]40
80004514:	d9 a4 0c 00 	lea %a4,[%sp]12
80004518:	6d 00 a7 02 	call 80004a66 <__unpack_d>
8000451c:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004520:	d9 a4 14 00 	lea %a4,[%sp]20
80004524:	8f 12 80 21 	xor %d2,%d2,1
80004528:	d9 a6 3c 00 	lea %a6,[%sp]60
8000452c:	d9 a5 28 00 	lea %a5,[%sp]40
80004530:	59 a2 2c 00 	st.w [%sp]44,%d2
80004534:	6d ff bb fe 	call 800042aa <_fpadd_parts>
80004538:	40 24       	mov.aa %a4,%a2
8000453a:	6d 00 c7 01 	call 800048c8 <__pack_d>
8000453e:	00 90       	ret 

80004540 <__muldf3>:
80004540:	20 50       	sub.a %sp,80
80004542:	d9 a5 14 00 	lea %a5,[%sp]20
80004546:	d9 a4 04 00 	lea %a4,[%sp]4
8000454a:	89 a4 44 09 	st.d [%sp]4,%e4
8000454e:	89 a6 4c 09 	st.d [%sp]12,%e6
80004552:	6d 00 8a 02 	call 80004a66 <__unpack_d>
80004556:	d9 a5 28 00 	lea %a5,[%sp]40
8000455a:	d9 a4 0c 00 	lea %a4,[%sp]12
8000455e:	6d 00 84 02 	call 80004a66 <__unpack_d>
80004562:	19 a2 14 00 	ld.w %d2,[%sp]20
80004566:	ff 22 0f 80 	jge.u %d2,2,80004584 <__muldf3+0x44>
8000456a:	19 a3 18 00 	ld.w %d3,[%sp]24
8000456e:	19 a2 2c 00 	ld.w %d2,[%sp]44
80004572:	d9 a4 14 00 	lea %a4,[%sp]20
80004576:	0b 23 10 21 	ne %d2,%d3,%d2
8000457a:	59 a2 18 00 	st.w [%sp]24,%d2
8000457e:	6d 00 a5 01 	call 800048c8 <__pack_d>
80004582:	00 90       	ret 
80004584:	19 a3 28 00 	ld.w %d3,[%sp]40
80004588:	bf 23 14 80 	jlt.u %d3,2,800045b0 <__muldf3+0x70>
8000458c:	df 42 0a 80 	jne %d2,4,800045a0 <__muldf3+0x60>
80004590:	91 00 00 48 	movh.a %a4,32768
80004594:	d9 44 10 80 	lea %a4,[%a4]528 <80000210 <__thenan_df>>
80004598:	df 23 f3 7f 	jeq %d3,2,8000457e <__muldf3+0x3e>
8000459c:	1d ff e7 ff 	j 8000456a <__muldf3+0x2a>
800045a0:	df 43 15 80 	jne %d3,4,800045ca <__muldf3+0x8a>
800045a4:	91 00 00 48 	movh.a %a4,32768
800045a8:	d9 44 10 80 	lea %a4,[%a4]528 <80000210 <__thenan_df>>
800045ac:	df 22 e9 7f 	jeq %d2,2,8000457e <__muldf3+0x3e>
800045b0:	19 a2 2c 00 	ld.w %d2,[%sp]44
800045b4:	19 a3 18 00 	ld.w %d3,[%sp]24
800045b8:	d9 a4 28 00 	lea %a4,[%sp]40
800045bc:	0b 23 10 21 	ne %d2,%d3,%d2
800045c0:	59 a2 2c 00 	st.w [%sp]44,%d2
800045c4:	6d 00 82 01 	call 800048c8 <__pack_d>
800045c8:	00 90       	ret 
800045ca:	19 a5 2c 00 	ld.w %d5,[%sp]44
800045ce:	19 a4 18 00 	ld.w %d4,[%sp]24
800045d2:	0b 45 10 a1 	ne %d10,%d5,%d4
800045d6:	df 22 aa 00 	jeq %d2,2,8000472a <__muldf3+0x1ea>
800045da:	df 23 ae 00 	jeq %d3,2,80004736 <__muldf3+0x1f6>
800045de:	19 a6 34 00 	ld.w %d6,[%sp]52
800045e2:	19 a4 20 00 	ld.w %d4,[%sp]32
800045e6:	82 03       	mov %d3,0
800045e8:	73 46 68 00 	mul.u %e0,%d6,%d4
800045ec:	19 a2 38 00 	ld.w %d2,[%sp]56
800045f0:	82 0b       	mov %d11,0
800045f2:	03 36 0a 11 	madd %d1,%d1,%d6,%d3
800045f6:	02 48       	mov %d8,%d4
800045f8:	19 a7 24 00 	ld.w %d7,[%sp]36
800045fc:	03 4b 0a 11 	madd %d1,%d1,%d11,%d4
80004600:	73 42 68 40 	mul.u %e4,%d2,%d4
80004604:	82 0d       	mov %d13,0
80004606:	82 0c       	mov %d12,0
80004608:	03 32 0a 55 	madd %d5,%d5,%d2,%d3
8000460c:	03 8d 0a 55 	madd %d5,%d5,%d13,%d8
80004610:	73 27 68 80 	mul.u %e8,%d7,%d2
80004614:	03 d7 0a 99 	madd %d9,%d9,%d7,%d13
80004618:	03 2c 0a 99 	madd %d9,%d9,%d12,%d2
8000461c:	03 67 68 24 	madd.u %e2,%e4,%d7,%d6
80004620:	03 b7 0a 33 	madd %d3,%d3,%d7,%d11
80004624:	03 6c 0a 33 	madd %d3,%d3,%d12,%d6
80004628:	0b 35 00 61 	eq %d6,%d5,%d3
8000462c:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
80004630:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
80004634:	02 67       	mov %d7,%d6
80004636:	82 06       	mov %d6,0
80004638:	0b 06 40 60 	addx %d6,%d6,%d0
8000463c:	0b 12 50 50 	addc %d5,%d2,%d1
80004640:	0b 51 00 41 	eq %d4,%d1,%d5
80004644:	0b 06 50 42 	and.ge.u %d4,%d6,%d0
80004648:	0b 51 a0 42 	or.lt.u %d4,%d1,%d5
8000464c:	df 04 06 80 	jne %d4,0,80004658 <__muldf3+0x118>
80004650:	8b 1b 80 b0 	addx %d11,%d11,1
80004654:	8b 07 a0 70 	addc %d7,%d7,0
80004658:	82 04       	mov %d4,0
8000465a:	0b 83 40 30 	addx %d3,%d3,%d8
8000465e:	0b 94 50 20 	addc %d2,%d4,%d9
80004662:	0b b3 40 30 	addx %d3,%d3,%d11
80004666:	0b 72 50 20 	addc %d2,%d2,%d7
8000466a:	19 a4 1c 00 	ld.w %d4,[%sp]28
8000466e:	19 a7 30 00 	ld.w %d7,[%sp]48
80004672:	59 aa 00 10 	st.w [%sp]64,%d10
80004676:	0b 74 00 10 	add %d1,%d4,%d7
8000467a:	7b 00 00 42 	movh %d4,8192
8000467e:	1b 41 00 00 	addi %d0,%d1,4
80004682:	0b 42 00 71 	eq %d7,%d2,%d4
80004686:	b7 07 01 70 	insert %d7,%d7,0,0,1
8000468a:	59 a0 04 10 	st.w [%sp]68,%d0
8000468e:	0b 42 a0 72 	or.lt.u %d7,%d2,%d4
80004692:	df 07 2b 80 	jne %d7,0,800046e8 <__muldf3+0x1a8>
80004696:	1b 51 00 70 	addi %d7,%d1,5
8000469a:	8f 13 00 01 	and %d0,%d3,1
8000469e:	02 71       	mov %d1,%d7
800046a0:	df 00 07 00 	jeq %d0,0,800046ae <__muldf3+0x16e>
800046a4:	77 65 80 6f 	dextr %d6,%d5,%d6,31
800046a8:	06 f5       	sh %d5,-1
800046aa:	b7 f5 81 5f 	insert %d5,%d5,15,31,1
800046ae:	77 32 80 3f 	dextr %d3,%d2,%d3,31
800046b2:	06 f2       	sh %d2,-1
800046b4:	0b 24 30 01 	lt.u %d0,%d4,%d2
800046b8:	0b 24 70 02 	or.eq %d0,%d4,%d2
800046bc:	c2 17       	add %d7,1
800046be:	df 00 ee ff 	jne %d0,0,8000469a <__muldf3+0x15a>
800046c2:	59 a1 04 10 	st.w [%sp]68,%d1
800046c6:	8f f3 0f 41 	and %d4,%d3,255
800046ca:	8b 04 28 42 	ne %d4,%d4,128
800046ce:	df 04 3a 00 	jeq %d4,0,80004742 <__muldf3+0x202>
800046d2:	59 a2 0c 10 	st.w [%sp]76,%d2
800046d6:	82 32       	mov %d2,3
800046d8:	59 a3 08 10 	st.w [%sp]72,%d3
800046dc:	d9 a4 3c 00 	lea %a4,[%sp]60
800046e0:	59 a2 3c 00 	st.w [%sp]60,%d2
800046e4:	1d ff 4d ff 	j 8000457e <__muldf3+0x3e>
800046e8:	7b 00 00 71 	movh %d7,4096
800046ec:	0b 27 30 41 	lt.u %d4,%d7,%d2
800046f0:	0b 27 70 42 	or.eq %d4,%d7,%d2
800046f4:	df 04 e9 ff 	jne %d4,0,800046c6 <__muldf3+0x186>
800046f8:	77 32 80 20 	dextr %d2,%d2,%d3,1
800046fc:	c2 f0       	add %d0,-1
800046fe:	06 13       	sh %d3,1
80004700:	ff 05 06 00 	jge %d5,0,8000470c <__muldf3+0x1cc>
80004704:	8f 13 40 11 	or %d1,%d3,1
80004708:	0b 21 10 28 	mov %e2,%d1,%d2
8000470c:	0b 72 00 41 	eq %d4,%d2,%d7
80004710:	b7 04 01 40 	insert %d4,%d4,0,0,1
80004714:	77 65 80 50 	dextr %d5,%d5,%d6,1
80004718:	0b 72 a0 42 	or.lt.u %d4,%d2,%d7
8000471c:	06 16       	sh %d6,1
8000471e:	df 04 ed ff 	jne %d4,0,800046f8 <__muldf3+0x1b8>
80004722:	59 a0 04 10 	st.w [%sp]68,%d0
80004726:	1d ff d0 ff 	j 800046c6 <__muldf3+0x186>
8000472a:	59 aa 18 00 	st.w [%sp]24,%d10
8000472e:	d9 a4 14 00 	lea %a4,[%sp]20
80004732:	1d ff 26 ff 	j 8000457e <__muldf3+0x3e>
80004736:	59 aa 2c 00 	st.w [%sp]44,%d10
8000473a:	d9 a4 28 00 	lea %a4,[%sp]40
8000473e:	1d ff 20 ff 	j 8000457e <__muldf3+0x3e>
80004742:	77 32 00 4c 	dextr %d4,%d2,%d3,24
80004746:	a6 65       	or %d5,%d6
80004748:	8b 05 20 52 	ne %d5,%d5,0
8000474c:	0f 45 e0 40 	andn %d4,%d5,%d4
80004750:	df 04 c1 7f 	jeq %d4,0,800046d2 <__muldf3+0x192>
80004754:	8b 03 88 30 	addx %d3,%d3,128
80004758:	8b 02 a0 20 	addc %d2,%d2,0
8000475c:	8f f3 cf 31 	andn %d3,%d3,255
80004760:	1d ff b9 ff 	j 800046d2 <__muldf3+0x192>

80004764 <__gedf2>:
80004764:	20 38       	sub.a %sp,56
80004766:	d9 a5 10 00 	lea %a5,[%sp]16
8000476a:	40 a4       	mov.aa %a4,%sp
8000476c:	89 a4 40 09 	st.d [%sp],%e4
80004770:	89 a6 48 09 	st.d [%sp]8,%e6
80004774:	6d 00 79 01 	call 80004a66 <__unpack_d>
80004778:	d9 a5 24 00 	lea %a5,[%sp]36
8000477c:	d9 a4 08 00 	lea %a4,[%sp]8
80004780:	6d 00 73 01 	call 80004a66 <__unpack_d>
80004784:	19 a3 10 00 	ld.w %d3,[%sp]16
80004788:	82 f2       	mov %d2,-1
8000478a:	bf 23 0c 80 	jlt.u %d3,2,800047a2 <__gedf2+0x3e>
8000478e:	19 a3 24 00 	ld.w %d3,[%sp]36
80004792:	bf 23 08 80 	jlt.u %d3,2,800047a2 <__gedf2+0x3e>
80004796:	d9 a5 24 00 	lea %a5,[%sp]36
8000479a:	d9 a4 10 00 	lea %a4,[%sp]16
8000479e:	6d 00 c3 01 	call 80004b24 <__fpcmp_parts_d>
800047a2:	00 90       	ret 

800047a4 <__fixdfsi>:
800047a4:	20 20       	sub.a %sp,32
800047a6:	d9 a5 0c 00 	lea %a5,[%sp]12
800047aa:	d9 a4 04 00 	lea %a4,[%sp]4
800047ae:	89 a4 44 09 	st.d [%sp]4,%e4
800047b2:	6d 00 5a 01 	call 80004a66 <__unpack_d>
800047b6:	19 a3 0c 00 	ld.w %d3,[%sp]12
800047ba:	82 02       	mov %d2,0
800047bc:	bf 33 25 80 	jlt.u %d3,3,80004806 <__fixdfsi+0x62>
800047c0:	df 43 29 00 	jeq %d3,4,80004812 <__fixdfsi+0x6e>
800047c4:	19 a3 14 00 	ld.w %d3,[%sp]20
800047c8:	bf 03 1f 00 	jlt %d3,0,80004806 <__fixdfsi+0x62>
800047cc:	8b f3 41 22 	lt %d2,%d3,31
800047d0:	19 a6 10 00 	ld.w %d6,[%sp]16
800047d4:	df 02 1a 00 	jeq %d2,0,80004808 <__fixdfsi+0x64>
800047d8:	8b c3 03 21 	rsub %d2,%d3,60
800047dc:	19 a5 1c 00 	ld.w %d5,[%sp]28
800047e0:	19 a4 18 00 	ld.w %d4,[%sp]24
800047e4:	8b 02 82 32 	ge %d3,%d2,32
800047e8:	2b 54 50 43 	seln %d4,%d3,%d4,%d5
800047ec:	ab 05 a0 53 	seln %d5,%d3,%d5,0
800047f0:	8f f2 01 31 	and %d3,%d2,31
800047f4:	8b 03 02 21 	rsub %d2,%d3,32
800047f8:	17 45 80 22 	dextr %d2,%d5,%d4,%d2
800047fc:	2b 42 40 23 	sel %d2,%d3,%d2,%d4
80004800:	df 06 03 00 	jeq %d6,0,80004806 <__fixdfsi+0x62>
80004804:	32 52       	rsub %d2
80004806:	00 90       	ret 
80004808:	82 f2       	mov %d2,-1
8000480a:	06 f2       	sh %d2,-1
8000480c:	ab 12 00 26 	cadd %d2,%d6,%d2,1
80004810:	00 90       	ret 
80004812:	19 a3 10 00 	ld.w %d3,[%sp]16
80004816:	82 f2       	mov %d2,-1
80004818:	06 f2       	sh %d2,-1
8000481a:	ab 12 00 23 	cadd %d2,%d3,%d2,1
8000481e:	00 90       	ret 

80004820 <__make_dp>:
80004820:	20 18       	sub.a %sp,24
80004822:	09 a2 d8 09 	ld.da %a2,[%sp]24
80004826:	d9 a4 04 00 	lea %a4,[%sp]4
8000482a:	59 a4 04 00 	st.w [%sp]4,%d4
8000482e:	59 a5 08 00 	st.w [%sp]8,%d5
80004832:	59 a6 0c 00 	st.w [%sp]12,%d6
80004836:	89 a2 d0 09 	st.da [%sp]16,%a2
8000483a:	6d 00 47 00 	call 800048c8 <__pack_d>
8000483e:	00 90       	ret 

80004840 <__unpack_f>:
80004840:	54 42       	ld.w %d2,[%a4]
80004842:	8f 12 1e 50 	sh %d5,%d2,-31
80004846:	37 02 e8 3b 	extr.u %d3,%d2,23,8
8000484a:	b7 02 89 4b 	insert %d4,%d2,0,23,9
8000484e:	59 55 04 00 	st.w [%a5]4,%d5
80004852:	df 03 16 80 	jne %d3,0,8000487e <__unpack_f+0x3e>
80004856:	df 04 25 00 	jeq %d4,0,800048a0 <__unpack_f+0x60>
8000485a:	82 33       	mov %d3,3
8000485c:	8f 74 00 20 	sh %d2,%d4,7
80004860:	7b 00 00 54 	movh %d5,16384
80004864:	74 53       	st.w [%a5],%d3
80004866:	3b 10 f8 3f 	mov %d3,-127
8000486a:	06 12       	sh %d2,1
8000486c:	02 34       	mov %d4,%d3
8000486e:	c2 f3       	add %d3,-1
80004870:	3f 52 fd ff 	jlt.u %d2,%d5,8000486a <__unpack_f+0x2a>
80004874:	59 54 08 00 	st.w [%a5]8,%d4
80004878:	59 52 0c 00 	st.w [%a5]12,%d2
8000487c:	00 90       	ret 
8000487e:	8b f3 2f 52 	ne %d5,%d3,255
80004882:	df 05 12 00 	jeq %d5,0,800048a6 <__unpack_f+0x66>
80004886:	82 32       	mov %d2,3
80004888:	1b 13 f8 3f 	addi %d3,%d3,-127
8000488c:	74 52       	st.w [%a5],%d2
8000488e:	8f 74 00 20 	sh %d2,%d4,7
80004892:	b7 f2 01 2f 	insert %d2,%d2,15,30,1
80004896:	59 53 08 00 	st.w [%a5]8,%d3
8000489a:	59 52 0c 00 	st.w [%a5]12,%d2
8000489e:	00 90       	ret 
800048a0:	82 22       	mov %d2,2
800048a2:	74 52       	st.w [%a5],%d2
800048a4:	00 90       	ret 
800048a6:	df 04 05 80 	jne %d4,0,800048b0 <__unpack_f+0x70>
800048aa:	82 42       	mov %d2,4
800048ac:	74 52       	st.w [%a5],%d2
800048ae:	00 90       	ret 
800048b0:	37 02 61 3b 	extr.u %d3,%d2,22,1
800048b4:	06 72       	sh %d2,7
800048b6:	74 53       	st.w [%a5],%d3
800048b8:	7b 00 00 32 	movh %d3,8192
800048bc:	1b 03 f8 3f 	addi %d3,%d3,-128
800048c0:	26 32       	and %d2,%d3
800048c2:	59 52 0c 00 	st.w [%a5]12,%d2
800048c6:	00 90       	ret 

800048c8 <__pack_d>:
800048c8:	54 44       	ld.w %d4,[%a4]
800048ca:	19 43 0c 00 	ld.w %d3,[%a4]12
800048ce:	19 42 10 00 	ld.w %d2,[%a4]16
800048d2:	19 41 04 00 	ld.w %d1,[%a4]4
800048d6:	bf 24 56 80 	jlt.u %d4,2,80004982 <__pack_d+0xba>
800048da:	7b 00 ff 57 	movh %d5,32752
800048de:	d2 06       	mov %e6,0
800048e0:	df 44 0b 00 	jeq %d4,4,800048f6 <__pack_d+0x2e>
800048e4:	0f 23 a0 50 	or %d5,%d3,%d2
800048e8:	8b 05 00 02 	eq %d0,%d5,0
800048ec:	8b 24 e0 04 	or.eq %d0,%d4,2
800048f0:	82 05       	mov %d5,0
800048f2:	df 00 0c 00 	jeq %d0,0,8000490a <__pack_d+0x42>
800048f6:	0b 10 00 28 	mov %e2,%d1
800048fa:	a6 75       	or %d5,%d7
800048fc:	8f f2 01 20 	sh %d2,%d2,31
80004900:	0f 25 a0 40 	or %d4,%d5,%d2
80004904:	02 43       	mov %d3,%d4
80004906:	02 62       	mov %d2,%d6
80004908:	00 90       	ret 
8000490a:	19 44 08 00 	ld.w %d4,[%a4]8
8000490e:	3b 20 c0 0f 	mov %d0,-1022
80004912:	3f 04 41 00 	jlt %d4,%d0,80004994 <__pack_d+0xcc>
80004916:	3b 00 40 00 	mov %d0,1024
8000491a:	7b 00 ff 57 	movh %d5,32752
8000491e:	7f 04 ec 7f 	jge %d4,%d0,800048f6 <__pack_d+0x2e>
80004922:	8f f3 0f 51 	and %d5,%d3,255
80004926:	8b 05 28 52 	ne %d5,%d5,128
8000492a:	df 05 1b 00 	jeq %d5,0,80004960 <__pack_d+0x98>
8000492e:	8b f3 87 30 	addx %d3,%d3,127
80004932:	8b 02 a0 20 	addc %d2,%d2,0
80004936:	7b 00 00 52 	movh %d5,8192
8000493a:	0b 25 30 61 	lt.u %d6,%d5,%d2
8000493e:	0b 25 70 62 	or.eq %d6,%d5,%d2
80004942:	df 06 19 80 	jne %d6,0,80004974 <__pack_d+0xac>
80004946:	1b f4 3f 40 	addi %d4,%d4,1023
8000494a:	0b 40 00 48 	mov %e4,%d4
8000494e:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004952:	06 82       	sh %d2,-8
80004954:	b7 02 0c 7a 	insert %d7,%d2,0,20,12
80004958:	8f 44 01 50 	sh %d5,%d4,20
8000495c:	1d ff cd ff 	j 800048f6 <__pack_d+0x2e>
80004960:	8f 03 10 51 	and %d5,%d3,256
80004964:	df 05 e9 7f 	jeq %d5,0,80004936 <__pack_d+0x6e>
80004968:	8b 03 88 30 	addx %d3,%d3,128
8000496c:	8b 02 a0 20 	addc %d2,%d2,0
80004970:	1d ff e3 ff 	j 80004936 <__pack_d+0x6e>
80004974:	77 32 80 3f 	dextr %d3,%d2,%d3,31
80004978:	1b 04 40 40 	addi %d4,%d4,1024
8000497c:	06 f2       	sh %d2,-1
8000497e:	1d ff e6 ff 	j 8000494a <__pack_d+0x82>
80004982:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004986:	06 82       	sh %d2,-8
80004988:	b7 12 8d 79 	insert %d7,%d2,1,19,13
8000498c:	7b 00 ff 57 	movh %d5,32752
80004990:	1d ff b3 ff 	j 800048f6 <__pack_d+0x2e>
80004994:	0b 40 80 40 	sub %d4,%d0,%d4
80004998:	8b 94 83 02 	ge %d0,%d4,57
8000499c:	df 00 ad ff 	jne %d0,0,800048f6 <__pack_d+0x2e>
800049a0:	8b 04 82 52 	ge %d5,%d4,32
800049a4:	2b 23 50 05 	seln %d0,%d5,%d3,%d2
800049a8:	ab 02 a0 75 	seln %d7,%d5,%d2,0
800049ac:	8f f4 01 51 	and %d5,%d4,31
800049b0:	8b 05 02 61 	rsub %d6,%d5,32
800049b4:	17 07 80 66 	dextr %d6,%d7,%d0,%d6
800049b8:	2b 06 40 65 	sel %d6,%d5,%d6,%d0
800049bc:	8b 04 82 82 	ge %d8,%d4,32
800049c0:	32 55       	rsub %d5
800049c2:	02 60       	mov %d0,%d6
800049c4:	8f f4 01 41 	and %d4,%d4,31
800049c8:	82 f6       	mov %d6,-1
800049ca:	0f 57 00 70 	sh %d7,%d7,%d5
800049ce:	17 66 80 54 	dextr %d5,%d6,%d6,%d4
800049d2:	0f 46 00 40 	sh %d4,%d6,%d4
800049d6:	2b 45 50 58 	seln %d5,%d8,%d5,%d4
800049da:	ab 04 a0 48 	seln %d4,%d8,%d4,0
800049de:	0f 43 e0 30 	andn %d3,%d3,%d4
800049e2:	0f 52 e0 20 	andn %d2,%d2,%d5
800049e6:	a6 32       	or %d2,%d3
800049e8:	02 03       	mov %d3,%d0
800049ea:	8b 02 00 35 	or.ne %d3,%d2,0
800049ee:	8f f3 0f 51 	and %d5,%d3,255
800049f2:	82 12       	mov %d2,1
800049f4:	8b 05 08 24 	and.eq %d2,%d5,128
800049f8:	02 74       	mov %d4,%d7
800049fa:	df 02 14 80 	jne %d2,0,80004a22 <__pack_d+0x15a>
800049fe:	8b f3 87 30 	addx %d3,%d3,127
80004a02:	8b 07 a0 20 	addc %d2,%d7,0
80004a06:	77 32 00 6c 	dextr %d6,%d2,%d3,24
80004a0a:	7b 00 00 31 	movh %d3,4096
80004a0e:	8f 82 1f 70 	sh %d7,%d2,-8
80004a12:	0b 32 50 21 	ge.u %d2,%d2,%d3
80004a16:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004a1a:	8f 42 01 50 	sh %d5,%d2,20
80004a1e:	1d ff 6c ff 	j 800048f6 <__pack_d+0x2e>
80004a22:	8b 03 88 60 	addx %d6,%d3,128
80004a26:	8b 07 a0 20 	addc %d2,%d7,0
80004a2a:	7b 00 00 a1 	movh %d10,4096
80004a2e:	8f 82 1f 70 	sh %d7,%d2,-8
80004a32:	77 62 00 6c 	dextr %d6,%d2,%d6,24
80004a36:	0b a2 50 21 	ge.u %d2,%d2,%d10
80004a3a:	53 12 40 80 	mul.u %e8,%d2,1
80004a3e:	8f 03 10 01 	and %d0,%d3,256
80004a42:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004a46:	8f 48 01 50 	sh %d5,%d8,20
80004a4a:	df 00 56 ff 	jne %d0,0,800048f6 <__pack_d+0x2e>
80004a4e:	8f 84 1f 70 	sh %d7,%d4,-8
80004a52:	0b a4 50 21 	ge.u %d2,%d4,%d10
80004a56:	77 34 00 6c 	dextr %d6,%d4,%d3,24
80004a5a:	b7 07 0c 7a 	insert %d7,%d7,0,20,12
80004a5e:	8f 42 01 50 	sh %d5,%d2,20
80004a62:	1d ff 4a ff 	j 800048f6 <__pack_d+0x2e>

80004a66 <__unpack_d>:
80004a66:	09 48 40 09 	ld.d %e8,[%a4]
80004a6a:	3b f0 7f 00 	mov %d0,2047
80004a6e:	8f 19 1e 70 	sh %d7,%d9,-31
80004a72:	37 09 6b 5a 	extr.u %d5,%d9,20,11
80004a76:	b7 09 0c 6a 	insert %d6,%d9,0,20,12
80004a7a:	59 57 04 00 	st.w [%a5]4,%d7
80004a7e:	df 05 26 80 	jne %d5,0,80004aca <__unpack_d+0x64>
80004a82:	8b 08 20 22 	ne %d2,%d8,0
80004a86:	8b 06 00 25 	or.ne %d2,%d6,0
80004a8a:	df 02 33 00 	jeq %d2,0,80004af0 <__unpack_d+0x8a>
80004a8e:	82 32       	mov %d2,3
80004a90:	77 86 00 34 	dextr %d3,%d6,%d8,8
80004a94:	8f 88 00 40 	sh %d4,%d8,8
80004a98:	74 52       	st.w [%a5],%d2
80004a9a:	3b 10 c0 5f 	mov %d5,-1023
80004a9e:	7b 00 00 61 	movh %d6,4096
80004aa2:	77 43 80 30 	dextr %d3,%d3,%d4,1
80004aa6:	02 57       	mov %d7,%d5
80004aa8:	0b 63 00 21 	eq %d2,%d3,%d6
80004aac:	b7 02 01 20 	insert %d2,%d2,0,0,1
80004ab0:	06 14       	sh %d4,1
80004ab2:	0b 63 a0 22 	or.lt.u %d2,%d3,%d6
80004ab6:	c2 f5       	add %d5,-1
80004ab8:	df 02 f5 ff 	jne %d2,0,80004aa2 <__unpack_d+0x3c>
80004abc:	59 57 08 00 	st.w [%a5]8,%d7
80004ac0:	59 54 0c 00 	st.w [%a5]12,%d4
80004ac4:	59 53 10 00 	st.w [%a5]16,%d3
80004ac8:	00 90       	ret 
80004aca:	5f 05 16 00 	jeq %d5,%d0,80004af6 <__unpack_d+0x90>
80004ace:	82 32       	mov %d2,3
80004ad0:	1b 15 c0 5f 	addi %d5,%d5,-1023
80004ad4:	8f 88 00 40 	sh %d4,%d8,8
80004ad8:	74 52       	st.w [%a5],%d2
80004ada:	77 86 00 24 	dextr %d2,%d6,%d8,8
80004ade:	59 55 08 00 	st.w [%a5]8,%d5
80004ae2:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
80004ae6:	59 54 0c 00 	st.w [%a5]12,%d4
80004aea:	59 52 10 00 	st.w [%a5]16,%d2
80004aee:	00 90       	ret 
80004af0:	82 22       	mov %d2,2
80004af2:	74 52       	st.w [%a5],%d2
80004af4:	00 90       	ret 
80004af6:	8b 08 20 52 	ne %d5,%d8,0
80004afa:	8b 06 00 55 	or.ne %d5,%d6,0
80004afe:	df 05 05 80 	jne %d5,0,80004b08 <__unpack_d+0xa2>
80004b02:	82 42       	mov %d2,4
80004b04:	74 52       	st.w [%a5],%d2
80004b06:	00 90       	ret 
80004b08:	77 89 00 34 	dextr %d3,%d9,%d8,8
80004b0c:	37 09 e1 49 	extr.u %d4,%d9,19,1
80004b10:	b7 03 85 3d 	insert %d3,%d3,0,27,5
80004b14:	8f 88 00 20 	sh %d2,%d8,8
80004b18:	74 54       	st.w [%a5],%d4
80004b1a:	59 52 0c 00 	st.w [%a5]12,%d2
80004b1e:	59 53 10 00 	st.w [%a5]16,%d3
80004b22:	00 90       	ret 

80004b24 <__fpcmp_parts_d>:
80004b24:	54 43       	ld.w %d3,[%a4]
80004b26:	82 12       	mov %d2,1
80004b28:	bf 23 45 80 	jlt.u %d3,2,80004bb2 <__fpcmp_parts_d+0x8e>
80004b2c:	54 54       	ld.w %d4,[%a5]
80004b2e:	bf 24 42 80 	jlt.u %d4,2,80004bb2 <__fpcmp_parts_d+0x8e>
80004b32:	8b 44 00 52 	eq %d5,%d4,4
80004b36:	8b 43 00 54 	and.eq %d5,%d3,4
80004b3a:	df 05 50 80 	jne %d5,0,80004bda <__fpcmp_parts_d+0xb6>
80004b3e:	df 43 45 00 	jeq %d3,4,80004bc8 <__fpcmp_parts_d+0xa4>
80004b42:	df 44 3d 00 	jeq %d4,4,80004bbc <__fpcmp_parts_d+0x98>
80004b46:	8b 24 00 52 	eq %d5,%d4,2
80004b4a:	8b 23 00 54 	and.eq %d5,%d3,2
80004b4e:	82 02       	mov %d2,0
80004b50:	df 05 31 80 	jne %d5,0,80004bb2 <__fpcmp_parts_d+0x8e>
80004b54:	df 23 34 00 	jeq %d3,2,80004bbc <__fpcmp_parts_d+0x98>
80004b58:	19 42 04 00 	ld.w %d2,[%a4]4
80004b5c:	df 24 2c 00 	jeq %d4,2,80004bb4 <__fpcmp_parts_d+0x90>
80004b60:	19 53 04 00 	ld.w %d3,[%a5]4
80004b64:	5f 23 28 80 	jne %d3,%d2,80004bb4 <__fpcmp_parts_d+0x90>
80004b68:	19 44 08 00 	ld.w %d4,[%a4]8
80004b6c:	19 53 08 00 	ld.w %d3,[%a5]8
80004b70:	3f 43 22 00 	jlt %d3,%d4,80004bb4 <__fpcmp_parts_d+0x90>
80004b74:	3f 34 2f 00 	jlt %d4,%d3,80004bd2 <__fpcmp_parts_d+0xae>
80004b78:	19 45 10 00 	ld.w %d5,[%a4]16
80004b7c:	19 56 10 00 	ld.w %d6,[%a5]16
80004b80:	19 40 0c 00 	ld.w %d0,[%a4]12
80004b84:	0b 65 00 41 	eq %d4,%d5,%d6
80004b88:	19 57 0c 00 	ld.w %d7,[%a5]12
80004b8c:	02 43       	mov %d3,%d4
80004b8e:	0b 07 50 32 	and.ge.u %d3,%d7,%d0
80004b92:	0b 70 50 42 	and.ge.u %d4,%d0,%d7
80004b96:	0b 65 a0 32 	or.lt.u %d3,%d5,%d6
80004b9a:	0b 56 a0 42 	or.lt.u %d4,%d6,%d5
80004b9e:	82 f5       	mov %d5,-1
80004ba0:	ab 15 a0 52 	seln %d5,%d2,%d5,1
80004ba4:	82 16       	mov %d6,1
80004ba6:	ab f6 bf 22 	seln %d2,%d2,%d6,-1
80004baa:	ab 05 a0 44 	seln %d4,%d4,%d5,0
80004bae:	2b 24 40 23 	sel %d2,%d3,%d4,%d2
80004bb2:	00 90       	ret 
80004bb4:	82 13       	mov %d3,1
80004bb6:	ab f3 bf 22 	seln %d2,%d2,%d3,-1
80004bba:	00 90       	ret 
80004bbc:	19 53 04 00 	ld.w %d3,[%a5]4
80004bc0:	82 f2       	mov %d2,-1
80004bc2:	ab 12 a0 23 	seln %d2,%d3,%d2,1
80004bc6:	00 90       	ret 
80004bc8:	19 43 04 00 	ld.w %d3,[%a4]4
80004bcc:	ab f2 bf 23 	seln %d2,%d3,%d2,-1
80004bd0:	00 90       	ret 
80004bd2:	82 f3       	mov %d3,-1
80004bd4:	ab 13 a0 22 	seln %d2,%d2,%d3,1
80004bd8:	00 90       	ret 
80004bda:	19 53 04 00 	ld.w %d3,[%a5]4
80004bde:	19 42 04 00 	ld.w %d2,[%a4]4
80004be2:	0b 23 80 20 	sub %d2,%d3,%d2
80004be6:	00 90       	ret 

80004be8 <__do_global_ctors_aux>:
80004be8:	91 00 00 28 	movh.a %a2,32768
80004bec:	d9 22 d8 04 	lea %a2,[%a2]19480 <80004c18 <__CTOR_END__>>
80004bf0:	19 22 fc ff 	ld.w %d2,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80004bf4:	d9 23 fc ff 	lea %a3,[%a2]-4 <7ffffffc <__CSA0_END+0xffc43fc>>
80004bf8:	df f2 0a 00 	jeq %d2,-1,80004c0c <__do_global_ctors_aux+0x24>
80004bfc:	40 3c       	mov.aa %a12,%a3
80004bfe:	60 22       	mov.a %a2,%d2
80004c00:	b0 cc       	add.a %a12,-4
80004c02:	2d 02 00 00 	calli %a2
80004c06:	54 c2       	ld.w %d2,[%a12]
80004c08:	df f2 fb ff 	jne %d2,-1,80004bfe <__do_global_ctors_aux+0x16>
80004c0c:	00 90       	ret 
	...
